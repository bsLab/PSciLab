var CoreModule = {};
CoreModule['com/io']='com/io';
CoreModule['com/pwgen']='com/pwgen.lw';
CoreModule['assert']='os/assert';
CoreModule['crypto']='os/crypto.rand';
CoreModule['events']='os/events';
CoreModule['path']='os/path';
CoreModule['string_decoder']='os/string_decoder';
CoreModule['util']='util';
CoreModule['http']='http';
CoreModule['deasync']='deasync';
CoreModule['os']='os';
CoreModule['net']='net';
CoreModule['fs']='fs';
CoreModule['stream']='';
CoreModule['url']='';
CoreModule['zlib']='';
CoreModule['child_process']='';

var BundleModuleCode=[];
var BundleObjectCode=[];
var BundleModules = [];
var Fs = require("fs");
if (typeof __dirname == 'undefined') __dirname = '';
if (typeof __filename == 'undefined') __filename = 'plugins/x11/x11.js';
//From compat.js
var any = undefined;
var empty = null;
var none = null;
var _ = undefined;
var int = function (v) {return v|0};
var div = function (a,b) {return a/b|0};
var print = function (msg) {console.log(msg)};
if (typeof global == 'undefined') global={};
PATH=[process.cwd(),".","/home/sbosse/proj/workbook/src",""];
function _isdir(path) {
  var stats=Fs.statSync(path);
  return stats && stats.isDirectory()};
function _search(index,file) {
  if (PATH.length==index) return file;
  var path=PATH[index];
  if (Fs.existsSync(path+"/"+file+".js")) return path+"/"+file+".js";
  else if (Fs.existsSync(path+"/"+file) && !_isdir(path+"/"+file)) return path+"/"+file;
  else return _search(index+1,file);
 }
var __library=arguments&&arguments[3];
function Require(modupath) { 
  var file,filepath;
  if (BundleModules[modupath]) return BundleModules[modupath];
  var exports={}; var module={exports:exports};
  if (CoreModule[modupath]!=undefined) modupath=CoreModule[modupath];
  if (modupath=='') return undefined;
  if (BundleModuleCode[modupath]) BundleModuleCode[modupath](module,exports,global,process);
  else if (BundleObjectCode[modupath]) BundleObjectCode[modupath](module,exports,global,process);
  else { try { file=_search(0,modupath); module = require(file)}
  catch (e) { var more="";
   if ((e.name==="SyntaxError"||e.name==="TypeError") && file) {
      var src=Fs.readFileSync(file,"utf8");
      var Esprima = Require("parser/esprima");
      try {
        var ast = Esprima.parse(src, { tolerant: true, loc:true });
        if (ast.errors && ast.errors.length>0) more = ", "+ast.errors[0];
      } catch (e) {
        if (e.lineNumber) more = ", in line "+e.lineNumber;
      }
   }
   console.log("Require import of "+modupath+" ("+file+") failed: "+e+more);
   // if (e.stack) console.log(e.stack);
   throw e; // process.exit(-1);
  }}
  BundleModules[modupath]=module.exports||module;
  return module.exports||module;};
FilesEmbedded=global.FilesEmbedded = {};
FileEmbedd=global.FileEmbedd = function (path,format) {};
FileEmbedded=global.FileEmbedded = function (path,format) {return FilesEmbedded[path](format);};
global.TARGET='node';

BundleModuleCode['com/io']=function (module,exports,global,process){
/**
 **      ==================================
 **      OOOO   OOOO OOOO  O      O   OOOO
 **      O   O  O    O     O     O O  O   O
 **      O   O  O    O     O     O O  O   O
 **      OOOO   OOOO OOOO  O     OOO  OOOO
 **      O   O     O    O  O    O   O O   O
 **      O   O     O    O  O    O   O O   O
 **      OOOO   OOOO OOOO  OOOO O   O OOOO
 **      ==================================
 **      BSSLAB, Dr. Stefan Bosse http://www.bsslab.de
 **
 **      COPYRIGHT: THIS SOFTWARE, EXECUTABLE AND SOURCE CODE IS OWNED
 **                 BY THE AUTHOR.
 **                 THIS SOURCE CODE MAY NOT BE COPIED, EXTRACTED,
 **                 MODIFIED, OR OTHERWISE USED IN A CONTEXT
 **                 OUTSIDE OF THE SOFTWARE SYSTEM.
 **
 **    $AUTHORS:     Stefan Bosse
 **    $INITIAL:     (C) 2006-2020 BSSLAB
 **    $CREATED:     sbosse on 3/28/15.
 **    $VERSION:     1.7.1X
 **
 **    $INFO:
 *
 * This module encapsulates all IO operations (except networking) supporting
 * node.js applications.
 *
 **    $ENDOFINFO
 */

if (global.TARGET=='node')  { 

 /*
  ************
  ** Node.js
  ************
  */
 var util = require('util');
 var GetEnv = Require('os/getenv');
 var Base64 = Require('os/base64');
 var Fs = require('fs');
 var os = require('os');
 var child = require('child_process');

 var stderr_fun = function (str) { process.stderr.write(str); };
 var stdout_fun = function (str) { process.stdout.write(str); };

 /*
  ** node.js specific
  */

 var tracefile = undefined;
 var tracing = true;

 /**
 * Open a module and append all exported properties to the current global object.
 * (top-level scope)
 */
 global.open = function(name,as) {
   var module = Require(name);
   for (var p in module) {
     global[p] = module[p];
   };
   if (as) global[as]=module;
 }

/*
 ** node.js
 */
var io = {
    checkOptions : function(options,defaultOptions) {
      return Object.assign({}, defaultOptions||{}, options) },
      
    checkOption : function (option,defaultOption) { 
      return option==undefined? defaultOption:option },

    config: {
        columns:undefined,
        rows:undefined
    },
    /**************
     ** FILE IO
     ***************/
    /**
     *
     * @param fd
     */
    close: function (fd) {
        Fs.closeSync(fd);
    },
    /**
     *
     * @param path
     */
    exists: function (path) {
        return Fs.existsSync(path);
    },
    /**
     *
     * @param path
     */
    file_exists: function (path) {
        return Fs.existsSync(path);
    },
    /** Search a file by iterating global PATH variable.
     *
     * @param name  File name or partial (relative) path
     */
    file_search: function (name) {
        // Expecting global PATH variable !?
        if (this.file_exists(name)) return name; 
        else if (typeof PATH !== 'undefined') {
          for (var p in PATH) {
            if (this.file_exists(PATH[p]+'/'+name)) return (PATH[p]+'/'+name);
          }
          return undefined;
        } else return undefined;
    },
    /**
     *
     * @param path
     * @returns {number}
     */
    file_size: function (path) {
        var stat = Fs.statSync(path);
        if (stat != undefined)
            return stat.size;
        else
            return -1;
    },
    /**
     *
     * @param path
     * @param timekind a c m
     * @returns {number}
     */
    file_time: function (path,timekind) {
        var stat = Fs.statSync(path);
        if (stat != undefined)
            switch (timekind) {
                case 'a': return stat.atime.getTime()/1000;
                case 'c': return stat.ctime.getTime()/1000;
                case 'm': return stat.mtime.getTime()/1000;
                default: return stat.mtime.getTime()/1000;
            }
        else
            return -1;
    },
    /**
     *
     * @param path
     * @param mode
     * @returns {*}
     */
    open: function (path, mode) {
        return Fs.openSync(path, mode);
    },
    /**
     *
     * @param fd
     * @param len
     * @param foff
     */
    read: function (fd, len, foff) {
        // TODO
    },
    /**
     *
     * @param path
     * @returns {string|undefined}
     */
    read_file: function (path) {
        try {
            return Fs.readFileSync(path,'utf8');
        } catch (e) {
            return undefined;
        }
    },
    /**
     *
     * @param path
     * @returns {*}
     */
    read_file_bin: function (path) {
        try {
            return Fs.readFileSync(path);
        } catch (e) {
            return undefined;
        }
    },
    /**
     *
     * @param fd
     */
    read_line: function (fd) {
        // TODO
    },
    /**
     *
     * @param fd
     * @param buf
     * @param boff
     * @param len
     * @param [foff]
     * @returns {number}
     */
    read_buf: function (fd, buf, boff, len, foff) {
        return Fs.readSync(fd, buf, boff, len, foff);
    },
    /**
     *
     * @param fd
     */
    sync: function (fd) {
        Fs.fsyncSync(fd);
    },
    
    time: function () {
      return Date.now()
    },
    /**
     *
     * @param fd
     * @param data
     * @param [foff]
     * @returns {number}
     */
    write: function (fd, data, foff) {
        return Fs.writeSync(fd, data, foff);
    },
    /**
     *
     * @param fd
     * @param buf
     * @param bpos
     * @param blen
     * @param [foff]
     * @returns {number}
     */
    write_buf: function (fd, buf, bpos, blen, foff) {
        return Fs.writeSync(fd, buf, bpos, blen, foff);
    },
    /**
     *
     * @param path
     * @param {string} buf
     */
    write_file: function (path,str) {
        try {
            Fs.writeFileSync(path, str, 'utf8');
            return str.length;
        } catch (e) {
            return -1;
        }
    },
    /**
     *
     * @param path
     * @param buf
     * @returns {*}
     */
    write_file_bin: function (path,buf) {
        try {
            Fs.writeFileSync(path, buf, 'binary');
            return buf.length;
        } catch (e) {
            return -1;
        }
    },
    /**
     *
     * @param fd
     * @param {string} str
     * @returns {number}
     */
    write_line: function (fd, str) {
        return Fs.writeSync(fd, str+NL);
    },

    /****************
     ** CONSOLE IO
     ****************/
    /**
     *
     * @param msg
     */
    debug: function (msg) {
        console.error('Debug: ' + msg);
    },
    /**
     *
     * @param msg
     */
    err: function (msg) {
        console.error('Error: ' + msg);
        throw Error(msg);
    },
    /**
     *
     * @param msg
     */
    fail: function (msg) {
        console.error('Fatal Error: ' + msg);
        process.exit(0);
    },
    /**
     *
     * @param obj
     */
    inspect: function (obj,depth) {return util.inspect(obj,{showHidden: false, 
                                                            depth: depth?depth:2})},

    /**
     * 
     */
    stacktrace: function () {
        var e = new Error('dummy');
        var stack = e.stack.replace(/^[^\(]+?[\n$]/gm, '')
            .replace(/^\s+at\s+/gm, '')
            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@')
            .split('\n');
        this.out('Stack Trace');
        this.out('--------------------------------');
        for(var i in stack) {
            if (i>0) {
                var line = stack[i];
                if(line.indexOf('Module.',0)>=0) break;
                this.out(line);
            }
        }
        this.out('--------------------------------');
    },
    /**
     *
     * @param e
     * @param where
     */
    printstack: function (e,where) {
        if (!e.stack) e=new Error(e);
        var stack = e.stack //.replace(/^[^\(]+?[\n$]/gm, '')
            .replace(/^\s+at\s+/gm, '')
            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@')
            .split('\n');
        if (where==undefined) this.out(e);
        else this.out(where+': '+e);
        this.out('Stack Trace');
        this.out('--------------------------------');
        for(var i in stack) {
            if (i>0) {
                var line = stack[i];
                if(line.indexOf('Module.',0)>=0) break;
                this.out(line);
            }
        }
        this.out('--------------------------------');
    },
     /**
     *
     * @param e
     * @param where
     */
    sprintstack: function (e) {
        var str='';
        if (e==_ || !e.stack) e=new Error(e);
        var stack = e.stack //.replace(/^[^\(]+?[\n$]/gm, '')
            .replace(/^\s+at\s+/gm, '')
            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@')
            .replace(/^Object.eval\s*\(/gm, '')
            .split('\n');
        for(var i in stack) {
            if (i>0) {
                var line = stack[i];
                if(line.indexOf('Module.',0)>=0) break;
                if (str!='') str += '\n';
                str += '  at '+line;
            }
        }
        return str;
    },
   /**
     *
     * @param {boolean|string} condmsg conditional message var log=X;  log((log lt. N)||(msg))
     */
    log: function (condmsg) {
        if (condmsg != true) console.warn(condmsg);
    },
    /**
     *
     * @param msg
     */
    out: function (msg) {
        console.warn(msg)
    },
    /**
     *
     * @param msg
     */
    warn: function (msg) {
        console.warn('Warning: ' + msg);
    },
    /**
     *
     * @param fun
     */
    set_stderr: function(fun) {
        stderr_fun=fun;
    },
    /**
     *
     * @param fun
     */
    set_stdout: function(fun) {
        stdout_fun=fun;
    },
    /**
     *
     * @param msg
     */
    stderr: function (msg) {
        stderr_fun(msg);
    },
    /**
     *
     * @param msg
     */
    stdout: function (msg) {
        stdout_fun(msg);
    },

    /** Write a message with a time stamp written to the trace file.
     *
     * @param {boolean|string} condmsg conditional message var trace=Io.tracing;  trace(trace||(msg))
     */
    trace: function (condmsg) {
        if (condmsg != true && tracefile != undefined) {
            var date = new Date();
            var time = date.getTime();
            Fs.writeSync(tracefile, '[' + time + '] ' + condmsg + '\n');
        }
    },
    tracing: tracing,
    /**
     *
     * @param {string} path
     */
    trace_open: function (path) {
        tracefile = Fs.openSync(path, 'w+');
        if (tracefile != undefined) this.tracing = false;
    },

    /**************
     ** Process control
     ***************/
    exit: function (n) {
        process.exit(n);
    },
    /**
     *
     * @returns {*} RSS HEAP in kBytes {data,heap}
     */
    mem: function () {
        var mem = process.memoryUsage();
        return {data:(mem.rss/1024)|0,heap:(mem.heapUsed/1024)|0};
    },
    /****************************
     ** Environment and Arguments
     ****************************/
    getenv: function (name, def) {
        return GetEnv(name, def);
    },
    workdir: function () {
        return this.getenv('PWD','');
    },

    /**
     *  @return {string []}
     */
    getargs: function () {
        return process.argv;
    },

    sleep: function(delay) {
      var start = new Date().getTime();
      while (new Date().getTime() < start + delay);
    },
    
    /**
     *  Process management
     */
    fork: child.fork,
    exec: child.exec,
    spawn: child.spawn,

    /**
     * OS
     */
    hostname: os.hostname

  };
} else {
 /*
  ************
  ** Browser
  ************
  */
  var tracing = true;
  var stderr_fun = function (str) { console.log(str); };
  var stdout_fun = function (str) { console.log(str); };
  var args=[];

  /**
  * Open a module and append all exported properties to the current global object.
  * (top-level scope)
  */
  global.open = function(name,as) {
    var module = Require(name);
    for (var p in module) {
      global[p] = module[p];
    };
    if (as) global[as]=module;
  }
  
  var io = {
    /*
    ************
    ** Browser
    ************
    */
    /*
     ** FILE IO
     * TODO WebStorage
     */
    close: function (fd) {
        return;
    },
    exists: function (path) {
        return false;
    },
    open: function (path, mode) {
        var fd = Fs.openSync(path, mode);
        return fd;
    },

    read: function (fd, len, foff) {
        // TODO
    },
    read_file: function (path) {
        return '';
    },

    read_line: function (fd) {
        // TODO
    },
    /**
     *
     * @param fd
     * @param buf
     * @param boff
     * @param len
     * @param [foff]
     * @returns {*}
     */
    read_buf: function (fd, buf, boff, len, foff) {
        return -1;
    },
    sync: function (fd) {
        return;
    },
    /**
     *
     * @param fd
     * @param data
     * @param [foff]
     * @returns {*}
     */
    write: function (fd, data, foff) {
        return -1;
    },
    /**
     *
     * @param fd
     * @param buf
     * @param bpos
     * @param blen
     * @param [foff]
     * @returns {*}
     */
    write_buf: function (fd, buf, bpos, blen, foff) {
        return -1;
    },

    /*
     ** CONSOLE IO
     */
    debug: function (msg) {
        stderr_fun('Debug: ' + msg);
    },
    err: function (msg) {
        stderr_fun('Error: ' + msg);
        throw Error(msg);
    },
    fail: function (msg) {
        stderr_fun('Fatal Error: ' + msg);
    },
    inspect: function (obj) {
        return;
    },
    stacktrace: function () {
        var e = new Error('dummy');
        var stack = e.stack.replace(/^[^\(]+?[\n$]/gm, '')
            .replace(/^\s+at\s+/gm, '')
            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@')
            .split('\n');
        stderr_fun('Stack Trace');
        stderr_fun('--------------------------------');
        for(var i in stack) {
            if (i>0) {
                var line = stack[i];
                if(line.indexOf('Module.',0)>=0) break;
                stderr_fun(line);
            }
        }
        stderr_fun('--------------------------------');
    },
    /**
     *
     * @param e
     * @param where
     */
    printstack: function (e,where) {
        if (where==undefined) stderr_fun(e);
        else stderr_fun(where+': '+e);
    },
    /**
     *
     * @param {boolean|string} condmsg conditional message var log=X;  log((log lt. N)||(msg))
     */
    log: function (condmsg) {
        if (condmsg != true) console.warn(condmsg);
    },
    out: function (msg) {
        stdout_fun(msg)
    },
    warn: function (msg) {
        stderr_fun('Warning: ' + msg);
    },


    set_stderr: function(fun) {
        stderr_fun=fun;
    },
    set_stdout: function(fun) {
        stdout_fun=fun;
    },

    stderr: function (msg) {
        stderr_fun(msg);
    },
    stdout: function (msg) {
        stdout_fun(msg);
    },

    /** Write a message with a time stamp written to the trace file.
     *
     * @param {boolean|string} condmsg conditional message var trace=Io.tracing;  trace(trace||(msg))
     */
    trace: function (condmsg) {
        if (condmsg != true && tracefile != undefined) {
            var date = new Date();
            var time = date.getTime();
            this.log('[' + time + '] ' + condmsg + '\n');
        }
    },
    tracing: tracing,
    /**
     *
     * @param {string} path
     */
    trace_open: function (path) {
        return undefined;
    },

    exit: function (n) {
        return;
    },
    getenv: function (name, def) {
        return def;
    },
    workdir: function () {
        return '';
    },
    /**
     *  @return {string []}
     */
    getargs: function () {
        return args;
    },
    set_args: function (argv) {
        args=argv;
    },
    inspect: function (o) {return '?'}
  };
}  
module.exports = io;
};
BundleModuleCode['os/getenv']=function (module,exports,global,process){
var util = require("util");
var url = require("url");

var fallbacksDisabled = false;

function _value(varName, fallback) {
  var value = process.env[varName];
  if (value === undefined) {
    if (fallback === undefined) {
      throw new Error('GetEnv.Nonexistent: ' + varName + ' does not exist ' +
                      'and no fallback value provided.');
    }
    if (fallbacksDisabled) {
      throw new Error('GetEnv.DisabledFallbacks: ' + varName + ' relying on fallback ' + 
                      'when fallbacks have been disabled');
    }
    return '' + fallback;
  }
  return value;
}

var convert = {
  string: function(value) {
    return '' + value;
  },
  int: function(value) {
    var isInt = value.match(/^-?\d+$/);
    if (!isInt) {
      throw new Error('GetEnv.NoInteger: ' + value + ' is not an integer.');
    }

    return +value;
  },
  float: function(value) {
    var isInfinity = (+value === Infinity || +value === -Infinity);
    if (isInfinity) {
      throw new Error('GetEnv.Infinity: ' + value + ' is set to +/-Infinity.');
    }

    var isFloat = !(isNaN(value) || value === '');
    if (!isFloat) {
      throw new Error('GetEnv.NoFloat: ' + value + ' is not a number.');
    }

    return +value;
  },
  bool: function(value) {
    var isBool = (value === 'true' || value === 'false');
    if (!isBool) {
      throw new Error('GetEnv.NoBoolean: ' + value + ' is not a boolean.');
    }

    return (value === 'true');
  },
  url: url.parse
};

function converter(type) {
  return function(varName, fallback) {
    if(typeof varName == 'string') { // default
      var value = _value(varName, fallback);
      return convert[type](value);
    } else { // multibert!
      return getenv.multi(varName);
    }
  };
};

var getenv = converter('string');

Object.keys(convert).forEach(function(type) {
  getenv[type] = converter(type);
});

getenv.array = function array(varName, type, fallback) {
  type = type || 'string';
  if (Object.keys(convert).indexOf(type) === -1) {
    throw new Error('GetEnv.ArrayUndefinedType: Unknown array type ' + type);
  }
  var value = _value(varName, fallback);
  return value.split(/\s*,\s*/).map(convert[type]);
};

getenv.multi = function multi(spec) {
  var key, value;
  var result = {};
  for(var key in spec) {
    var value = spec[key];
    if(util.isArray(value)) { // default value & typecast
      switch(value.length) {
        case 1: // no default value
        case 2: // no type casting
          result[key] = getenv(value[0], value[1]); // dirty, when case 1: value[1] is undefined
        break;
        case 3: // with typecast
          result[key] = getenv[value[2]](value[0], value[1]);
          break;
        default: // wtf?
          throw('getenv.multi(): invalid spec');
          break;
      }
    } else { // value or throw
      result[key] = getenv(value);
    }
  }
  return result;
};

getenv.disableFallbacks = function() {
  fallbacksDisabled = true;
};

getenv.enableFallbacks = function() {
  fallbacksDisabled = false;
};

module.exports = getenv;
};
BundleModuleCode['os/base64']=function (module,exports,global,process){
var keyStr = "ABCDEFGHIJKLMNOP" +
               "QRSTUVWXYZabcdef" +
               "ghijklmnopqrstuv" +
               "wxyz0123456789+/" +
               "=";
var Buffer=Require('buffer').Buffer;
var Base64 = {
  encode: function (input) {
     input = escape(input);
     var output = "";
     var chr1, chr2, chr3 = "";
     var enc1, enc2, enc3, enc4 = "";
     var i = 0;

     do {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);

        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
           enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
           enc4 = 64;
        }

        output = output +
           keyStr.charAt(enc1) +
           keyStr.charAt(enc2) +
           keyStr.charAt(enc3) +
           keyStr.charAt(enc4);
        chr1 = chr2 = chr3 = "";
        enc1 = enc2 = enc3 = enc4 = "";
     } while (i < input.length);

     return output;
  },

  encodeBuf: function (input) {
     var output = "";
     var NaN = output.charCodeAt(2);
     var chr1, chr2, chr3 = "";
     var enc1, enc2, enc3, enc4 = "";
     var i = 0;
     var len = input.length;
     do {
        chr1 = input.readUInt8(i++);
        chr2 = (i<len)?input.readUInt8(i++):NaN;
        chr3 = (i<len)?input.readUInt8(i++):NaN;

        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
           enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
           enc4 = 64;
        }

        output = output +
           keyStr.charAt(enc1) +
           keyStr.charAt(enc2) +
           keyStr.charAt(enc3) +
           keyStr.charAt(enc4);
        chr1 = chr2 = chr3 = "";
        enc1 = enc2 = enc3 = enc4 = "";
     } while (i < len);

     return output;
  },

  decode: function (input) {
     var output = "";
     var chr1, chr2, chr3 = "";
     var enc1, enc2, enc3, enc4 = "";
     var i = 0;

     input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

     do {
        enc1 = keyStr.indexOf(input.charAt(i++));
        enc2 = keyStr.indexOf(input.charAt(i++));
        enc3 = keyStr.indexOf(input.charAt(i++));
        enc4 = keyStr.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        output = output + String.fromCharCode(chr1);

        if (enc3 != 64) {
           output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
           output = output + String.fromCharCode(chr3);
        }

        chr1 = chr2 = chr3 = "";
        enc1 = enc2 = enc3 = enc4 = "";

     } while (i < input.length);

     return unescape(output);
  },
  decodeBuf: function (input) {
     var len = input.length;
     var buf = new Buffer(len);
     var chr1, chr2, chr3 = "";
     var enc1, enc2, enc3, enc4 = "";
     var i = 0;
     var buflen = 0;
     input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
     buf.fill(0);
     do {
        enc1 = keyStr.indexOf(input.charAt(i++));
        enc2 = keyStr.indexOf(input.charAt(i++));
        enc3 = keyStr.indexOf(input.charAt(i++));
        enc4 = keyStr.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        buf.writeUInt8(chr1,buflen);
        buflen++;
        if (enc3 != 64) {
          buf.writeUInt8(chr2,buflen);
          buflen++;
        }
        if (enc4 != 64) {
            buf.writeUInt8(chr3,buflen);
            buflen++;
        }

        chr1 = chr2 = chr3 = "";
        enc1 = enc2 = enc3 = enc4 = "";

     } while (i < input.length);

     return buf.slice(0,buflen);
  }

};


module.exports = Base64;
};
BundleModuleCode['com/path']=function (module,exports,global,process){
var process = process || {};
(function () {
  "use strict";

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var isWindows = process.platform === 'win32';
var util = Require('util');


// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}


if (isWindows) {
  // Regex to split a windows path into three parts: [*, device, slash,
  // tail] windows-only
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;

  // Regex to split the tail part of the above into [*, dir, basename, ext]
  var splitTailRe =
      /^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/;

  // Function to split a filename into [root, dir, basename, ext]
  // windows version
  var splitPath = function(filename) {
    // Separate device+slash from tail
    var result = splitDeviceRe.exec(filename),
        device = (result[1] || '') + (result[2] || ''),
        tail = result[3] || '';
    // Split the tail into dir, basename and extension
    var result2 = splitTailRe.exec(tail),
        dir = result2[1],
        basename = result2[2],
        ext = result2[3];
    return [device, dir, basename, ext];
  };

  var normalizeUNCRoot = function(device) {
    return '\\\\' + device.replace(/^[\\\/]+/, '').replace(/[\\\/]+/g, '\\');
  };

  // path.resolve([from ...], to)
  // windows version
  exports.resolve = function() {
    var resolvedDevice = '',
        resolvedTail = '',
        resolvedAbsolute = false;

    for (var i = arguments.length - 1; i >= -1; i--) {
      var path;
      if (i >= 0) {
        path = arguments[i];
      } else if (!resolvedDevice) {
        path = process.cwd();
      } else {
        // Windows has the concept of drive-specific current working
        // directories. If we've resolved a drive letter but not yet an
        // absolute path, get cwd for that drive. We're sure the device is not
        // an unc path at this points, because unc paths are always absolute.
        path = process.env['=' + resolvedDevice];
        // Verify that a drive-local cwd was found and that it actually points
        // to our drive. If not, default to the drive's root.
        if (!path || path.substr(0, 3).toLowerCase() !==
            resolvedDevice.toLowerCase() + '\\') {
          path = resolvedDevice + '\\';
        }
      }

      // Skip empty and invalid entries
      if (!util.isString(path)) {
        throw new TypeError('Arguments to path.resolve must be strings');
      } else if (!path) {
        continue;
      }

      var result = splitDeviceRe.exec(path),
          device = result[1] || '',
          isUnc = device && device.charAt(1) !== ':',
          isAbsolute = exports.isAbsolute(path),
          tail = result[3];

      if (device &&
          resolvedDevice &&
          device.toLowerCase() !== resolvedDevice.toLowerCase()) {
        // This path points to another device so it is not applicable
        continue;
      }

      if (!resolvedDevice) {
        resolvedDevice = device;
      }
      if (!resolvedAbsolute) {
        resolvedTail = tail + '\\' + resolvedTail;
        resolvedAbsolute = isAbsolute;
      }

      if (resolvedDevice && resolvedAbsolute) {
        break;
      }
    }

    // Convert slashes to backslashes when `resolvedDevice` points to an UNC
    // root. Also squash multiple slashes into a single one where appropriate.
    if (isUnc) {
      resolvedDevice = normalizeUNCRoot(resolvedDevice);
    }

    // At this point the path should be resolved to a full absolute path,
    // but handle relative paths to be safe (might happen when process.cwd()
    // fails)

    // Normalize the tail path

    function f(p) {
      return !!p;
    }

    resolvedTail = normalizeArray(resolvedTail.split(/[\\\/]+/).filter(f),
                                  !resolvedAbsolute).join('\\');

    return (resolvedDevice + (resolvedAbsolute ? '\\' : '') + resolvedTail) ||
           '.';
  };

  // windows version
  exports.normalize = function(path) {
    var result = splitDeviceRe.exec(path),
        device = result[1] || '',
        isUnc = device && device.charAt(1) !== ':',
        isAbsolute = exports.isAbsolute(path),
        tail = result[3],
        trailingSlash = /[\\\/]$/.test(tail);

    // If device is a drive letter, we'll normalize to lower case.
    if (device && device.charAt(1) === ':') {
      device = device[0].toLowerCase() + device.substr(1);
    }

    // Normalize the tail path
    tail = normalizeArray(tail.split(/[\\\/]+/).filter(function(p) {
      return !!p;
    }), !isAbsolute).join('\\');

    if (!tail && !isAbsolute) {
      tail = '.';
    }
    if (tail && trailingSlash) {
      tail += '\\';
    }

    // Convert slashes to backslashes when `device` points to an UNC root.
    // Also squash multiple slashes into a single one where appropriate.
    if (isUnc) {
      device = normalizeUNCRoot(device);
    }

    return device + (isAbsolute ? '\\' : '') + tail;
  };

  // windows version
  exports.isAbsolute = function(path) {
    var result = splitDeviceRe.exec(path),
        device = result[1] || '',
        isUnc = !!device && device.charAt(1) !== ':';
    // UNC paths are always absolute
    return !!result[2] || isUnc;
  };

  // windows version
  exports.join = function() {
    function f(p) {
      if (!util.isString(p)) {
        throw new TypeError('Arguments to path.join must be strings');
      }
      return p;
    }

    var paths = Array.prototype.filter.call(arguments, f);
    var joined = paths.join('\\');

    // Make sure that the joined path doesn't start with two slashes, because
    // normalize() will mistake it for an UNC path then.
    //
    // This step is skipped when it is very clear that the user actually
    // intended to point at an UNC path. This is assumed when the first
    // non-empty string arguments starts with exactly two slashes followed by
    // at least one more non-slash character.
    //
    // Note that for normalize() to treat a path as an UNC path it needs to
    // have at least 2 components, so we don't filter for that here.
    // This means that the user can use join to construct UNC paths from
    // a server name and a share name; for example:
    //   path.join('//server', 'share') -> '\\\\server\\share\')
    if (!/^[\\\/]{2}[^\\\/]/.test(paths[0])) {
      joined = joined.replace(/^[\\\/]{2,}/, '\\');
    }

    return exports.normalize(joined);
  };

  // path.relative(from, to)
  // it will solve the relative path from 'from' to 'to', for instance:
  // from = 'C:\\orandea\\test\\aaa'
  // to = 'C:\\orandea\\impl\\bbb'
  // The output of the function should be: '..\\..\\impl\\bbb'
  // windows version
  exports.relative = function(from, to) {
    from = exports.resolve(from);
    to = exports.resolve(to);

    // windows is not case sensitive
    var lowerFrom = from.toLowerCase();
    var lowerTo = to.toLowerCase();

    function trim(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== '') break;
      }

      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== '') break;
      }

      if (start > end) return [];
      return arr.slice(start, end + 1);
    }

    var toParts = trim(to.split('\\'));

    var lowerFromParts = trim(lowerFrom.split('\\'));
    var lowerToParts = trim(lowerTo.split('\\'));

    var length = Math.min(lowerFromParts.length, lowerToParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (lowerFromParts[i] !== lowerToParts[i]) {
        samePartsLength = i;
        break;
      }
    }

    if (samePartsLength == 0) {
      return to;
    }

    var outputParts = [];
    for (var i = samePartsLength; i < lowerFromParts.length; i++) {
      outputParts.push('..');
    }

    outputParts = outputParts.concat(toParts.slice(samePartsLength));

    return outputParts.join('\\');
  };

  exports.sep = '\\';
  exports.delimiter = ';';

} else /* posix */ {

  // Split a filename into [root, dir, basename, ext], unix version
  // 'root' is just a slash, or nothing.
  var splitPathRe =
      /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  var splitPath = function(filename) {
    return splitPathRe.exec(filename).slice(1);
  };

  // path.resolve([from ...], to)
  // posix version
  exports.resolve = function() {
    var resolvedPath = '',
        resolvedAbsolute = false;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = (i >= 0) ? arguments[i] : process.cwd();

      // Skip empty and invalid entries
      if (!util.isString(path)) {
        throw new TypeError('Arguments to path.resolve must be strings');
      } else if (!path) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charAt(0) === '/';
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeArray(resolvedPath.split('/').filter(function(p) {
      return !!p;
    }), !resolvedAbsolute).join('/');

    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
  };

  // path.normalize(path)
  // posix version
  exports.normalize = function(path) {
    var isAbsolute = exports.isAbsolute(path),
        trailingSlash = path[path.length - 1] === '/',
        segments = path.split('/'),
        nonEmptySegments = [];

    // Normalize the path
    for (var i = 0; i < segments.length; i++) {
      if (segments[i]) {
        nonEmptySegments.push(segments[i]);
      }
    }
    path = normalizeArray(nonEmptySegments, !isAbsolute).join('/');

    if (!path && !isAbsolute) {
      path = '.';
    }
    if (path && trailingSlash) {
      path += '/';
    }

    return (isAbsolute ? '/' : '') + path;
  };

  // posix version
  exports.isAbsolute = function(path) {
    return path.charAt(0) === '/';
  };

  // posix version
  exports.join = function() {
    var path = '';
    for (var i = 0; i < arguments.length; i++) {
      var segment = arguments[i];
      if (!util.isString(segment)) {
        throw new TypeError('Arguments to path.join must be strings');
      }
      if (segment) {
        if (!path) {
          path += segment;
        } else {
          path += '/' + segment;
        }
      }
    }
    return exports.normalize(path);
  };


  // path.relative(from, to)
  // posix version
  exports.relative = function(from, to) {
    from = exports.resolve(from).substr(1);
    to = exports.resolve(to).substr(1);

    function trim(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== '') break;
      }

      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== '') break;
      }

      if (start > end) return [];
      return arr.slice(start, end + 1);
    }

    var fromParts = trim(from.split('/'));
    var toParts = trim(to.split('/'));

    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }

    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push('..');
    }

    outputParts = outputParts.concat(toParts.slice(samePartsLength));

    return outputParts.join('/');
  };

  exports.sep = '/';
  exports.delimiter = ':';
}

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};


exports.exists = util.deprecate(function(path, callback) {
  require('fs').exists(path, callback);
}, 'path.exists is now called `fs.exists`.');


exports.existsSync = util.deprecate(function(path) {
  return require('fs').existsSync(path);
}, 'path.existsSync is now called `fs.existsSync`.');


if (isWindows) {
  exports._makeLong = function(path) {
    // Note: this will *probably* throw somewhere.
    if (!util.isString(path))
      return path;

    if (!path) {
      return '';
    }

    var resolvedPath = exports.resolve(path);

    if (/^[a-zA-Z]\:\\/.test(resolvedPath)) {
      // path is local filesystem path, which needs to be converted
      // to long UNC path.
      return '\\\\?\\' + resolvedPath;
    } else if (/^\\\\[^?.]/.test(resolvedPath)) {
      // path is network UNC path, which needs to be converted
      // to long UNC path.
      return '\\\\?\\UNC\\' + resolvedPath.substring(2);
    }

    return path;
  };
} else {
  exports._makeLong = function(path) {
    return path;
  };
}
}());
};
BundleModuleCode['com/sprintf']=function (module,exports,global,process){
(function(window) {
    var re = {
        not_string: /[^s]/,
        number: /[diefg]/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijosuxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[\+\-]/
    }

    function sprintf() {
        var key = arguments[0], cache = sprintf.cache
        if (!(cache[key] && cache.hasOwnProperty(key))) {
            cache[key] = sprintf.parse(key)
        }
        return sprintf.format.call(null, cache[key], arguments)
    }

    sprintf.format = function(parse_tree, argv) {
        var cursor = 1, tree_length = parse_tree.length, node_type = "", arg, output = [], i, k, match, pad, pad_character, pad_length, is_positive = true, sign = ""
        for (i = 0; i < tree_length; i++) {
            node_type = get_type(parse_tree[i])
            if (node_type === "string") {
                output[output.length] = parse_tree[i]
            }
            else if (node_type === "array") {
                match = parse_tree[i] // convenience purposes only
                if (match[2]) { // keyword argument
                    arg = argv[cursor]
                    for (k = 0; k < match[2].length; k++) {
                        if (!arg.hasOwnProperty(match[2][k])) {
                            throw new Error(sprintf("[sprintf] property '%s' does not exist", match[2][k]))
                        }
                        arg = arg[match[2][k]]
                    }
                }
                else if (match[1]) { // positional argument (explicit)
                    arg = argv[match[1]]
                }
                else { // positional argument (implicit)
                    arg = argv[cursor++]
                }

                if (get_type(arg) == "function") {
                    arg = arg()
                }

                if (re.not_string.test(match[8]) && re.not_json.test(match[8]) && (get_type(arg) != "number" && isNaN(arg))) {
                    throw new TypeError(sprintf("[sprintf] expecting number but found %s", get_type(arg)))
                }

                if (re.number.test(match[8])) {
                    is_positive = arg >= 0
                }

                switch (match[8]) {
                    case "b":
                        arg = arg.toString(2)
                    break
                    case "c":
                        arg = String.fromCharCode(arg)
                    break
                    case "d":
                    case "i":
                        arg = parseInt(arg, 10)
                    break
                    case "j":
                        arg = JSON.stringify(arg, null, match[6] ? parseInt(match[6]) : 0)
                    break
                    case "e":
                        arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential()
                    break
                    case "f":
                        arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg)
                    break
                    case "g":
                        arg = match[7] ? parseFloat(arg).toPrecision(match[7]) : parseFloat(arg)
                    break
                    case "o":
                        arg = arg.toString(8)
                    break
                    case "s":
                        arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg)
                    break
                    case "u":
                        arg = arg >>> 0
                    break
                    case "x":
                        arg = arg.toString(16)
                    break
                    case "X":
                        arg = arg.toString(16).toUpperCase()
                    break
                }
                if (re.json.test(match[8])) {
                    output[output.length] = arg
                }
                else {
                    if (re.number.test(match[8]) && (!is_positive || match[3])) {
                        sign = is_positive ? "+" : "-"
                        arg = arg.toString().replace(re.sign, "")
                    }
                    else {
                        sign = ""
                    }
                    pad_character = match[4] ? match[4] === "0" ? "0" : match[4].charAt(1) : " "
                    pad_length = match[6] - (sign + arg).length
                    pad = match[6] ? (pad_length > 0 ? str_repeat(pad_character, pad_length) : "") : ""
                    output[output.length] = match[5] ? sign + arg + pad : (pad_character === "0" ? sign + pad + arg : pad + sign + arg)
                }
            }
        }
        return output.join("")
    }

    sprintf.cache = {}

    sprintf.parse = function(fmt) {
        var _fmt = fmt, match = [], parse_tree = [], arg_names = 0
        while (_fmt) {
            if ((match = re.text.exec(_fmt)) !== null) {
                parse_tree[parse_tree.length] = match[0]
            }
            else if ((match = re.modulo.exec(_fmt)) !== null) {
                parse_tree[parse_tree.length] = "%"
            }
            else if ((match = re.placeholder.exec(_fmt)) !== null) {
                if (match[2]) {
                    arg_names |= 1
                    var field_list = [], replacement_field = match[2], field_match = []
                    if ((field_match = re.key.exec(replacement_field)) !== null) {
                        field_list[field_list.length] = field_match[1]
                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== "") {
                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                                field_list[field_list.length] = field_match[1]
                            }
                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                                field_list[field_list.length] = field_match[1]
                            }
                            else {
                                throw new SyntaxError("[sprintf] failed to parse named argument key")
                            }
                        }
                    }
                    else {
                        throw new SyntaxError("[sprintf] failed to parse named argument key")
                    }
                    match[2] = field_list
                }
                else {
                    arg_names |= 2
                }
                if (arg_names === 3) {
                    throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported")
                }
                parse_tree[parse_tree.length] = match
            }
            else {
                throw new SyntaxError("[sprintf] unexpected placeholder")
            }
            try {_fmt = _fmt.substring(match[0].length)} catch (e) {throw new SyntaxError("[sprintf] unexpected fromat")}
        }
        return parse_tree
    }

    var vsprintf = function(fmt, argv, _argv) {
        _argv = (argv || []).slice(0)
        _argv.splice(0, 0, fmt)
        return sprintf.apply(null, _argv)
    }

    /**
     * helpers
     */
    function get_type(variable) {
        return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase()
    }

    function str_repeat(input, multiplier) {
        return Array(multiplier + 1).join(input)
    }

    /**
     * export to either browser or node.js
     */
    if (typeof exports !== "undefined") {
        exports.sprintf = sprintf
        exports.vsprintf = vsprintf
    }
    else {
        window.sprintf = sprintf
        window.vsprintf = vsprintf

        if (typeof define === "function" && define.amd) {
            define(function() {
                return {
                    sprintf: sprintf,
                    vsprintf: vsprintf
                }
            })
        }
    }
})(typeof window === "undefined" ? this : window);
};
BundleModuleCode['plugins/x11/x11.js']=function (module,exports,global,process){
/**
 **      ==============================
 **       O           O      O   OOOO
 **       O           O     O O  O   O
 **       O           O     O O  O   O
 **       OOOO   OOOO O     OOO  OOOO
 **       O   O       O    O   O O   O
 **       O   O       O    O   O O   O
 **       OOOO        OOOO O   O OOOO
 **      ==============================
 **      Dr. Stefan Bosse http://www.bsslab.de
 **
 **      COPYRIGHT: THIS SOFTWARE, EXECUTABLE AND SOURCE CODE IS OWNED
 **                 BY THE AUTHOR(S).
 **                 THIS SOURCE CODE MAY NOT BE COPIED, EXTRACTED,
 **                 MODIFIED, OR OTHERWISE USED IN A CONTEXT
 **                 OUTSIDE OF THE SOFTWARE SYSTEM.
 **
 **    $AUTHORS:     Stefan Bosse
 **    $INITIAL:     (C) 2006-2021 BSSLAB
 **    $CREATED:     25-12-16 by sbosse.
 **    $RCS:         $Id: libx11.js,v 1.1 2020/02/03 09:45:01 sbosse Exp sbosse $
 **    $VERSION:     1.1.2
 **
 **    $INFO:
 **
 **  X11 API that can be embedded in any host application.
 **
 **
 **    $ENDOFINFO
 */

var X11     = Require('plugins/x11/core/x11');
var Windows = Require('plugins/x11/win/windows');


module.exports = {
  Windows:Windows,
  X11:X11
}
 
};
BundleModuleCode['plugins/x11/core/x11']=function (module,exports,global,process){
// Was index.js

var core = Require('x11/core/xcore');
var em = Require('x11/core/eventmask').eventMask;
var et = Require('x11/core/eventmask').eventType;
var server = Require('x11/core/xserver');
var pixmap = Require('x11/core/pixmap');

module.exports.createClient = core.createClient;
module.exports.createServer = server.createServer;
module.exports.eventMask = em;
module.exports.eventNumber = et;
module.exports.eventType = et;
module.exports.pixmap = pixmap;

Object.defineProperty(module.exports, 'keySyms', {
  enumerable: true,
  get: function() { return Require('x11/core/keysyms'); }
});

Object.defineProperty(module.exports, 'gcFunction', {
  enumerable: true,
  get: function() { return Require('x11/core/gcfunction'); }
});

//TODO:
// keepe everything in namespace for consistensy (eventMask, keySyms, class, destination ...
// or put most used constants to top namespace? (currently class and destination in top) 

// basic constants

// class
module.exports.CopyFromParent = 0;
module.exports.InputOutput = 1;
module.exports.InputOnly = 2;

// destination 
module.exports.PointerWindow = 0;
module.exports.InputFocus = 1;


// TODO
module.exports.bitGravity = {
};

module.exports.winGravity = {
};

// Execute a sequential block using a next function
// block([function () {todo; next(args)}, function () {todo(function () {next(args)}}])

module.exports.block = function (block) {
  var i=0,len=block.length;
  if (len==0) return;
  function next(arg1,arg2,arg3,arg4,arg5,arg6) {
    i++;
    if (i<len) block[i](next,arg1,arg2,arg3,arg4,arg5,arg6);
  }
  block[0](next);
}
};
BundleModuleCode['x11/core/xcore']=function (module,exports,global,process){
var util  = Require('util'); // util.inherits
var net   = Require('net');

var handshake = Require('x11/core/handshake');
//var xevents = require('./xevents');

var EventEmitter  = Require('events').EventEmitter;
var PackStream    = Require('x11/core/unpackstream');
var hexy          = Require('x11/core/hexy').hexy;

var Buffer = Require('buffer').Buffer;
// add 'unpack' method for buffer
Require('x11/core/unpackbuffer').addUnpack(Buffer);

var os = require('os');

var xerrors       = Require('x11/core/xerrors');
var coreRequests  = Require('x11/core/corereqs');
var stdatoms      = Require('x11/core/stdatoms');
var em            = Require('x11/core/eventmask').eventMask;

function stash ()
{
    Require('x11/core/ext/apple-wm');
    Require('x11/core/ext/big-requests');
    Require('x11/core/ext/composite');
    Require('x11/core/ext/damage');
    Require('x11/core/ext/dpms');
    Require('x11/core/ext/fixes');
    Require('x11/core/ext/glxconstants');
    Require('x11/core/ext/glx');
    Require('x11/core/ext/glxrender');
    Require('x11/core/ext/randr');
    Require('x11/core/ext/render');
    Require('x11/core/ext/screen-saver');
    Require('x11/core/ext/shape');
    Require('x11/core/ext/xc-misc');
    Require('x11/core/ext/xtest');
    Require('x11/core/keysyms');
    Require('x11/core/gcfunction');
}
if (process.argv.indexOf('-buildx11')!=-1) stash();

function XClient(displayNum, screenNum, options)
{
    EventEmitter.call(this);
    this.options = options ? options : {};

    // TODO: this is probably not used
    this.core_requests = {};
    this.ext_requests = {};

    this.displayNum = displayNum;
    this.screenNum = screenNum;
}
util.inherits(XClient, EventEmitter);

XClient.prototype.init = function(stream)
{
    this.stream = stream;

    this.authHost = stream.remoteAddress;
    // Node v0.10.x does not have stream.remoteFamily, so dig in to find it
    this.authFamily = stream._getpeername ? stream._getpeername().family : stream.remoteFamily;
    if (!this.authHost || this.authHost === '127.0.0.1' || this.authHost === '::1') {
      this.authHost = os.hostname();
      this.authFamily = null;
    }

    var pack_stream = new PackStream();

    // data received from stream is dispached to
    // read requests set by calls to .unpack and .unpackTo
    //stream.pipe(pack_stream);

    // pack_stream write requests are buffered and
    // flushed to stream as result of call to .flush
    // TODO: listen for drain event and flush automatically
    //pack_stream.pipe(stream);
    var client = this;
    pack_stream.on('data', function( data ) {
        //console.error(hexy(data, {prefix: 'from packer '}));
        //for (var i=0; i < data.length; ++i)
        //   console.log('<<< ' + data[i]);
        stream.write(data);
    });
    stream.on('data', function( data ) {
        //console.error(hexy(data, {prefix: 'to unpacker '}));
        //for (var i=0; i < data.length; ++i)
        //   console.log('>>> ' + data[i]);
        pack_stream.write(data);
    });
    stream.on('end', function() {
        client.emit('end');
    });

    this.pack_stream = pack_stream;

    this.rsrc_id = 0; // generated for each new resource
    var cli = this;
    if (cli.options.debug) {
      this.seq_num_ = 0;
      this.seq2stack = {}; // debug: map seq_num to stack at the moment request was issued
      Object.defineProperty(cli, "seq_num", {
        set : function(v) {
          cli.seq_num_ = v;
          var err = new Error();
          Error.captureStackTrace(err, arguments.callee);
          err.timestamp = Date.now();
          cli.seq2stack[client.seq_num] = err;
        },
        get: function() {
	  return cli.seq_num_;
        }
      });
    } else {
      this.seq_num = 0;
    }


    // in/out packets indexed by sequence ID
    this.replies = {};
    this.atoms = stdatoms;
    this.atom_names = (function() {
        var names = {};
        Object.keys(stdatoms).forEach(function(key) {
            names[stdatoms[key]] = key;
        });

        return names;
    })();

    this.eventMask = em;

    this.event_consumers = {}; // maps window id to eventemitter TODO: bad name
    this.eventParsers = {};
    this.errorParsers = {};
    this._extensions = {};

    this.importRequestsFromTemplates(this, coreRequests);

    this.startHandshake();
    this._closing = false;
    this._unusedIds = [];
}

// TODO: close() = set 'closing' flag, watch it in replies and writeQueue, terminate if empty
XClient.prototype.terminate = function()
{
    this.stream.end();
}

// GetAtomName used as cheapest non-modifying request with reply
// 3 - id for shortest standard atom, "ARC"
XClient.prototype.ping = function(cb) {
   var start = Date.now();
   this.GetAtomName(3, function(err, str) {
      if (err) return cb(err);
      return cb(null, Date.now() - start);
   });
}

XClient.prototype.close = function(cb) {
    var cli = this;
    cli.ping(function(err) {
      if (err) return cb(err);
      cli.terminate();
      if (cb) cb();
    });
    cli._closing = true;
}

XClient.prototype.importRequestsFromTemplates = function(target, reqs)
{
    var client = this;
    this.pending_atoms = {};
    for (var r in reqs)
    {
        // r is request name
        target[r] = (function(reqName) {

            var reqFunc = function req_proxy() {

            if (client._closing)
               throw new Error('client is in closing state');

            // simple overflow handling (this means that currently there is no way to have more than 65535 requests in the queue
            // TODO: edge cases testing
            if (client.seq_num == 65535)
               client.seq_num = 0;
            else
               client.seq_num++;

            // is it fast?
            var args = Array.prototype.slice.call(req_proxy.arguments);

            var callback = args.length > 0 ? args[args.length - 1] : null;
            if (callback && callback.constructor.name != 'Function')
                callback = null;

            // TODO: see how much we can calculate in advance (not in each request)
            var reqReplTemplate = reqs[reqName];
            var reqTemplate  = reqReplTemplate[0];
            var templateType = typeof reqTemplate;

            if (templateType == 'object')
                templateType = reqTemplate.constructor.name;

            if (templateType == 'function')
            {
                 if (reqName === 'InternAtom') {
                     var value = req_proxy.arguments[1];
                     if (client.atoms[value]) {
                         -- client.seq_num;
                         return setImmediate(function() {
                             callback(undefined, client.atoms[value]);
                         });
                     } else {
                         client.pending_atoms[client.seq_num] = value;
                     }
                 }

                 // call template with input arguments (not including callback which is last argument TODO currently with callback. won't hurt)
                 //reqPack = reqTemplate.call(args);
                 var reqPack = reqTemplate.apply(this, req_proxy.arguments);
                 var format = reqPack[0];
                 var requestArguments = reqPack[1];

                 if (callback)
                     this.replies[this.seq_num] = [reqReplTemplate[1], callback];

                 client.pack_stream.pack(format, requestArguments);
                 var b = client.pack_stream.write_queue[0];
                 client.pack_stream.flush();

            } else if (templateType == 'Array'){
                 if (reqName === 'GetAtomName') {
                     var atom = req_proxy.arguments[0];
                     if (client.atom_names[atom]) {
                         -- client.seq_num;
                         return setImmediate(function() {
                             callback(undefined, client.atom_names[atom]);
                         });
                     } else {
                         client.pending_atoms[client.seq_num] = atom;
                     }
                 }

                 var format = reqTemplate[0];
                 var requestArguments = [];

                 for (var a = 0; a < reqTemplate[1].length; ++a)
                     requestArguments.push(reqTemplate[1][a]);
                 for (var a in args)
                     requestArguments.push(args[a]);

                 if (callback)
                     this.replies[this.seq_num] = [reqReplTemplate[1], callback];

                 client.pack_stream.pack(format, requestArguments);
                 client.pack_stream.flush();
            } else {
                 throw 'unknown request format - ' + templateType;
            }
        }
        return reqFunc;
        })(r);
    }
}

XClient.prototype.AllocID = function()
{
  if (this._unusedIds.length > 0) {
    return this._unusedIds.pop();
  }
  // TODO: handle overflow (XCMiscGetXIDRange from XC_MISC ext)
  this.display.rsrc_id++;
  return (this.display.rsrc_id << this.display.rsrc_shift) + this.display.resource_base;
};

XClient.prototype.ReleaseID = function(id) {
  this._unusedIds.push(id);
};

// TODO: move core events unpackers to corereqs.js
XClient.prototype.unpackEvent = function(type, seq, extra, code, raw, headerBuf)
{
    var event = {}; // TODO: constructor & base functions
    // Remove the most significant bit. See Chapter 1, Event Format section in X11 protocol
    // specification
    type = type & 0x7F;
    event.type = type;
    event.seq = seq;

    var extUnpacker = this.eventParsers[type];
    if (extUnpacker)
    {
        return extUnpacker(type, seq, extra, code, raw);
    }

    if (type == 2 || type == 3 || type == 4 || type == 5 || type == 6) { // motion event
        var values = raw.unpack('LLLssssSC');
        //event.raw = values;
        // TODO: use unpackTo???
        event.name = [,,'KeyPress', 'KeyRelease', 'ButtonPress', 'ButtonRelease', 'MotionNotify'][type]
        event.time = extra;
        event.keycode = code;
        event.root = values[0];
        event.wid = values[1];
        event.child = values[2];
        event.rootx = values[3];
        event.rooty = values[4];
        event.x = values[5];
        event.y = values[6];
        event.buttons = values[7];
        event.sameScreen = values[8];
    } else if (type == 7 || type == 8) { //EnterNotify || LeaveNotify
        event.name = type === 7 ? 'EnterNotify' : 'LeaveNotify';
        var values = raw.unpack('LLLssssSC');
        event.root = values[0]
        event.wid = values[1]
        event.child = values[2];
        event.rootx = values[3];
        event.rooty = values[4];
        event.x = values[5];
        event.y = values[6];
        event.values = values

    } else if (type == 12) { // Expose
        var values = raw.unpack('SSSSS');
        event.name = 'Expose'
        event.wid = extra;
        event.x = values[0];
        event.y = values[1];
        event.width = values[2];
        event.height = values[3];
        event.count = values[4]; // TODO: ???
    } else if (type == 16) { // CreateNotify
        var values = raw.unpack('LssSSSc');
        event.name = 'CreateNotify'
        event.parent = extra;
        event.wid = values[0];
        event.x = values[1];
        event.y = values[2];
        event.width = values[3];
        event.height = values[4];
        event.borderWidth = values[5];
        event.overrideRedirect = values[6] ? true : false;
        // x, y, width, height, border
    } else if (type == 17) { // destroy notify
        var values = raw.unpack('L');
        event.name = 'DestroyNotify'
        event.event = extra;
        event.wid = values[0];
    } else if (type == 18) { // UnmapNotify
        var values = raw.unpack('LC');
        event.name = 'UnmapNotify'
        event.event = extra;
        event.wid = values[0];
        event.fromConfigure = values[1] ? true : false;
    } else if (type == 19) { // MapNotify
        var values = raw.unpack('LC');
        event.name = 'MapNotify'
        event.event = extra;
        event.wid = values[0];
        event.overrideRedirect = values[1] ? true : false;
    } else if (type == 20) {
        var values = raw.unpack('L');
        event.name = 'MapRequest'
        event.parent = extra;
        event.wid = values[0];
    } else if (type == 22) {
        var values = raw.unpack('LLssSSSC');
        event.name = 'ConfigureNotify';
        event.wid = extra;
        // TODO rename
        event.wid1 = values[0];
        event.aboveSibling = values[1];
        event.x = values[2];
        event.y = values[3];
        event.width = values[4];
        event.height = values[5];
        event.borderWidth = values[6];
        event.overrideRedirect = values[7];
    } else if (type == 23) {
        var values = raw.unpack('LLssSSSS');
        event.name = 'ConfigureRequest';
        event.stackMode = code;
        event.parent = extra;
        event.wid = values[0];
        event.sibling = values[1];
        event.x = values[2]
        event.y = values[3]
        event.width = values[4]
        event.height = values[5]
        event.borderWidth = values[6];
        //
        // The value-mask indicates which components were specified in
        // the request. The value-mask and the corresponding values are reported as given
        // in the request. The remaining values are filled in from the current geometry of the
        // window, except in the case of sibling and stack-mode, which are reported as None
        // and Above (respectively) if not given in the request.
        event.mask = values[6];
        // 322, [ 12582925, 0, 0, 484, 316, 1, 12, 0
        //console.log([extra, code, values]);
    } else if (type == 28) {// PropertyNotify
        event.name = 'PropertyNotify';
        var values = raw.unpack('LLC');
        event.wid = extra;
        event.atom = values[0];
        event.time = values[1];
        event.state = values[2];
    } else if (type == 29) {// SelectionClear
        event.name = 'SelectionClear';
        event.time = extra;
        var values = raw.unpack('LL');
        event.owner = values[0];
        event.selection = values[1];
    } else if (type == 30) {// SelectionRequest
        event.name = 'SelectionRequest';
        // TODO check this
        event.time = extra;
        var values = raw.unpack('LLLLL');
        event.owner = values[0];
        event.requestor = values[1];
        event.selection = values[2];
        event.target = values[3];
        event.property = values[4];
    } else if (type == 31) {// SelectionNotify
        event.name = 'SelectionNotify';
        // TODO check this
        event.time = extra;
        var values = raw.unpack('LLLL');
        event.requestor = values[0];
        event.selection = values[1];
        event.target = values[2];
        event.property = values[3];
    } else if (type == 33) {// ClientMessage
        event.name = 'ClientMessage';
        event.format = code;
        event.wid = extra;
        event.message_type = raw.unpack('L')[0];
        var format = (code === 32) ? 'LLLLL' : (code === 16) ? 'SSSSSSSSSS' : 'CCCCCCCCCCCCCCCCCCCC';
        event.data = raw.unpack(format, 4);
    } else if (type == 34) {
        event.name = 'MappingNotify';
        event.request = headerBuf[4];
        event.firstKeyCode = headerBuf[5];
        event.count = headerBuf[6];
    }
    return event;
}

XClient.prototype.expectReplyHeader = function()
{
    // TODO: move error parsers to corereqs.js

    var client = this;
    client.pack_stream.get( 8, function(headerBuf) {
            var res = headerBuf.unpack('CCSL');
            var type = res[0];
            var seq_num = res[2];
            var bad_value = res[3];

            if (type == 0)
            {
                var error_code = res[1];
                var error = new Error();
                error.error = error_code;
                error.seq = seq_num;
                if (client.options.debug) {
                  error.longstack = client.seq2stack[error.seq]
                  console.log(client.seq2stack[error.seq].stack);
                }

                // unpack error packet (32 bytes for all error types, 8 of them in CCSL header)
                client.pack_stream.get(24, function(buf) {

		    var res = buf.unpack('SC');
	   	    error.message = xerrors.errorText[error_code];
		    error.badParam = bad_value;
		    error.minorOpcode = res[0];
		    error.majorOpcode = res[1];

	            var extUnpacker = client.errorParsers[error_code];
                    if (extUnpacker) {
                      extUnpacker(error, error_code, seq_num, bad_value, buf);
                    }

                    var handler = client.replies[seq_num];
                    if (handler) {
                        var callback = handler[1];
                        var handled = callback(error);
                        if (!handled)
                            client.emit('error', error);
                        // TODO: should we delete seq2stack and reply even if there is no handler?
			if (client.options.debug)
                          delete client.seq2stack[seq_num];
                        delete client.replies[seq_num];
                    } else
                        client.emit('error', error);
                    client.expectReplyHeader();
                } );
                return;
            } else if (type > 1)
            {
                client.pack_stream.get(24, function(buf) {
                    var extra = res[3];
                    var code = res[1];
                    var ev = client.unpackEvent(type, seq_num, extra, code, buf, headerBuf);

                    // raw event 32-bytes packet (primarily for use in SendEvent);
                    // TODO: Event::pack based on event parameters, inverse to unpackEvent
                    ev.rawData = new Buffer(32);
                    headerBuf.copy(ev.rawData);
                    buf.copy(ev.rawData, 8);

                    client.emit('event', ev);
                    var ee = client.event_consumers[ev.wid];
                    if (ee) {
                       ee.emit('event', ev);
                    }
                    if (ev.parent) {
                       ee = client.event_consumers[ev.parent];
                       if (ee)
                         ee.emit('child-event', ev);
                    }
                    client.expectReplyHeader();
                } );
                return;
            }

            var opt_data = res[1];
            var length_total = res[3];            // in 4-bytes units, _including_ this header
            var bodylength = 24 + length_total*4; // 24 is rest if 32-bytes header

            client.pack_stream.get( bodylength, function( data ) {

                var handler = client.replies[seq_num];
                if (handler) {
                    var unpack = handler[0];
                    if (client.pending_atoms[seq_num]) {
                        opt_data = seq_num;
                    }

                    var result = unpack.call(client, data, opt_data);
                    var callback = handler[1];
                    callback(null, result);
                    // TODO: add multiple replies flag and delete handler only after last reply (eg ListFontsWithInfo)
                    delete client.replies[seq_num];
                }
                // wait for new packet from server
                client.expectReplyHeader();
            });
        }
    );
}

XClient.prototype.startHandshake = function() {
    var client = this;

    handshake.writeClientHello(this.pack_stream, this.displayNum, this.authHost, this.authFamily);
    handshake.readServerHello(this.pack_stream, function(err, display)
    {
        if (err) {
            client.emit('error', err);
            return;
        }
        client.expectReplyHeader();
        client.display = display;
        display.client = client;
        client.emit('connect', display);
    });
}

XClient.prototype.require = function(extName, callback)
{
   var self = this;
   var ext = this._extensions[extName];
   if (ext) {
       return process.nextTick(function() {
           callback(null, ext);
       });
   }

   ext = Require('x11/core/ext/' + extName);
   ext.requireExt(this.display, function(err, _ext) {
       if (err) {
           return callback(err);
       }

       self._extensions[extName] = _ext;
       callback(null, _ext);
   });
};

module.exports.createClient = function(options, initCb)
{
    if (typeof options === 'function') {
        initCb = options;
        options = {};
    }

    if (!options) options = {};

    var display = options.display;
    if (!display)
        display = (process.env.DISPLAY) ? process.env.DISPLAY : ':0';

    var displayMatch = display.match(/^(?:[^:]*?\/)?(.*):(\d+)(?:.(\d+))?$/);
    if (!displayMatch)
       throw new Error("Cannot parse display");

    var host = displayMatch[1];

    var displayNum = displayMatch[2];
    if (!displayNum)
        displayNum = 0;
    var screenNum = displayMatch[3];
    if (!screenNum)
        screenNum = 0;

    // open stream
    var stream;
    var connected = false;
    var cbCalled = false;
    var socketPath;

    // try local socket on non-windows platforms
    if ( ['cygwin', 'win32', 'win64'].indexOf(process.platform) < 0 )
    {
        if (process.platform == 'darwin' || process.platform == 'mac')
        {
            // socket path on OSX is /tmp/launch-(some id)/org.x:0
            if (display[0] == '/')
            {
                socketPath = display;
            }
        } else if(!host)
            socketPath = '/tmp/.X11-unix/X' + displayNum;
    }
    var client = new XClient(displayNum, screenNum, options);

    var connectStream = function() {
        if (socketPath) {
            stream = net.createConnection(socketPath);
        } else {
            stream = net.createConnection(6000 + parseInt(displayNum), host);
        }
        stream.on('connect', function() {
            connected = true;
            client.init(stream);
        });
        stream.on('error', function(err) {
            if (!connected && socketPath && err.code === 'ENOENT') {
                // Retry connection with TCP on localhost
                socketPath = null;
                host = 'localhost';
                connectStream();
            } else if (initCb && !cbCalled) {
                cbCalled = true;
                initCb(err);
            } else {
                client.emit('error', err);
            }
        });
    };
    connectStream();
    if (initCb)
    {
        client.on('connect', function(display) {
            // opt-in BigReq
            if (!options.disableBigRequests) {
                client.require('big-requests', function(err, BigReq) {
                    if (err)
                        return initCb(err)
                    BigReq.Enable(function(err, maxLen) {
                        display.max_request_length = maxLen;
	                cbCalled = true;
                        initCb(undefined, display);
                    });
                });
            } else {
	        cbCalled = true;
                initCb(undefined, display);
            }
        });
    }
    return client;
}
};
BundleModuleCode['x11/core/handshake']=function (module,exports,global,process){
var getAuthString = Require('x11/core/auth');
var xutil = Require('x11/core/xutil');

function readVisuals(bl, visuals, n_visuals, cb)
{
    if (n_visuals == 0)
    {
        cb();
        return;
    }

    var visual = {};
    bl.unpackTo( visual,
    [
        'L vid',
        'C class',
        'C bits_per_rgb',
        'S map_ent',
        'L red_mask',
        'L green_mask',
        'L blue_mask',
        'xxxx'
    ],
    function() {
         var vid = visual.vid;
         // delete visual.vid;
         visuals[visual.vid] = visual;
         if (Object.keys(visuals).length == n_visuals)
             cb()
         else
             readVisuals(bl, visuals, n_visuals, cb);
    });
}

function readScreens(bl, display, cbDisplayReady)
{
     var numParsedDepths = 0;
     var readDepths = function(bl, display, depths, n_depths, cb)
     {
         if (n_depths == 0)
         {
             cb();
             return;
         }

         bl.unpack( 'CxSxxxx', function(res) {
             var dep = res[0];
             var n_visuals = res[1];
             var visuals = {};
             readVisuals(bl, visuals, n_visuals, function()
             {
                 if (dep in depths) {
                     for (var visual in visuals) {
                         depths[dep][visual] = visuals[visual];
                     }
                 } else {
                     depths[dep] = visuals;
                 }
                 numParsedDepths++;
                 if (numParsedDepths == n_depths)
                     cb();
                 else
                     readDepths(bl, display, depths, n_depths, cb);
             });  
         });
     }

     // for (i=0; i < display.screen_num; ++i)
     {
         var scr = {};
         bl.unpackTo( scr,
         [
             'L root',
             'L default_colormap',
             'L white_pixel',
             'L black_pixel',
             'L input_masks',
             'S pixel_width',
             'S pixel_height',
             'S mm_width',
             'S mm_height',
             'S min_installed_maps',
             'S max_installed_maps',
             'L root_visual',
             'C root_depth',
             'C backing_stores',
             'C root_depth',
             'C num_depths'
         ],
         function () {
             var depths = {};
             readDepths(bl, display, depths, scr.num_depths, function() {

                 scr.depths = depths;
                 delete scr.num_depths;
                 display.screen.push(scr);

                 if (display.screen.length == display.screen_num)
                 {
                     delete display.screen_num;
                     cbDisplayReady(null, display);
                     return;
                 } else {
                     readScreens(bl, display, cbDisplayReady);
                 }
             });
         });
     }
}

function readServerHello(bl, cb)
{

bl.unpack('C', function(res) {

     if (res[0] == 0)
     {
         // conection time error
         // unpack error
         bl.unpack('Cxxxxxx', function (rlen) {
             bl.get(rlen[0], function (reason) {
                 var err = new Error;
                 err.message = 'X server connection failed: ' + reason.toString();
                 cb(err);
             });
         });
         // TODO: do we need to close stream from our side?
         // TODO: api to close source stream via attached unpackstream
         return;
     }

     var display = {};
     bl.unpackTo(
         display,
         [
          'x',
          'S major',
          'S minor',
          'S xlen',
          'L release',
          'L resource_base',
          'L resource_mask',
          'L motion_buffer_size',
          'S vlen',
          'S max_request_length',
          'C screen_num',
          'C format_num',
          'C image_byte_order',
          'C bitmap_bit_order',
          'C bitmap_scanline_unit',
          'C bitmap_scanline_pad',
          'C min_keycode',
          'C max_keycode',
          'xxxx'
         ],

         function()
         {
             var pvlen = xutil.padded_length(display.vlen);

             // setup data to generate resource id
             // TODO: cleaunup code here
             var mask = display.resource_mask;
             display.rsrc_shift = 0;
             while (!( (mask >> display.rsrc_shift) & 1) )
                 display.rsrc_shift++;
             display.rsrc_id = 0;

             bl.get(pvlen, function(vendor)
             {
                 display.vendor = vendor.toString().substr(0, display.vlen); // utf8 by default?

                 display.format = {};
                 for (var i=0; i < display.format_num; ++i)
                 {
                     bl.unpack('CCCxxxxx', function(fmt) {
                         var depth = fmt[0];
                         display.format[depth] = {};
                         display.format[depth].bits_per_pixel = fmt[1];
                         display.format[depth].scanline_pad = fmt[2];
                         if (Object.keys(display.format).length == display.format_num)
                         {
                             delete display.format_num;
                             display.screen = [];
                             readScreens(bl, display, cb);
                         }
                     });
                 }
             });
         }
     );
});

}

function getByteOrder() {
    var isLittleEndian = ((new Uint32Array((new Uint8Array([1,2,3,4])).buffer))[0] === 0x04030201);
    if (isLittleEndian) {
        return 'l'.charCodeAt(0);
    } else {
        return 'B'.charCodeAt(0);
    }
}

function writeClientHello(stream, displayNum, authHost, authFamily)
{
    getAuthString( displayNum, authHost, authFamily, function( err, cookie ) {
        if (err) {
            throw err;
        }
        var byte_order = getByteOrder();
        var protocol_major = 11; // TODO: config? env?
        var protocol_minor = 0;
        stream.pack(
            'CxSSSSxxpp',
            [
            byte_order,
            protocol_major,
            protocol_minor,
            cookie.authName.length,
            cookie.authData.length,
            cookie.authName,
            cookie.authData
            ]
        );
        stream.flush();
    });
}

module.exports.readServerHello = readServerHello;
module.exports.writeClientHello = writeClientHello;
};
BundleModuleCode['x11/core/auth']=function (module,exports,global,process){
// TODO: differentiate between auth types (i.e., MIT-MAGIC-COOKIE-1 and XDM-AUTHORIZATION-1)
// and choose the best based on the algorithm in libXau's XauGetBestAuthByAddr

var fs = Require('fs');
var Buffer = Require('buffer').Buffer;
// add 'unpack' method for buffer
Require('x11/core/unpackbuffer').addUnpack(Buffer);

var typeToName = {
    256: 'Local',
  65535: 'Wild',
    254: 'Netname',
    253: 'Krb5Principal',
    252: 'LocalHost',
      0: 'Internet',
      1: 'DECnet',
      2: 'Chaos',
      5: 'ServerInterpreted',
      6: 'Internet6'
};

function parseXauth( buf )
{
    var offset = 0;
    var auth = [];
    var cookieProperties = ['address', 'display', 'authName', 'authData'];

    while (offset < buf.length)
    {
        var cookie = {};
        cookie.type = buf.readUInt16BE(offset);
        if (!typeToName[cookie.type]) {
            console.warn('Unknown address type');
        }
        offset += 2;
        cookieProperties.forEach(function(property) {
          var length = buf.unpack('n', offset)[0];
          offset += 2;
          if (cookie.type === 0 && property == 'address') { // Internet
            // 4 bytes of ip addess, convert to w.x.y.z string
            cookie.address = [ buf[offset], buf[offset+1], buf[offset+2], buf[offset+3]]
              .map(function(octet) { return octet.toString(10) }).join('.');
          } else {
            cookie[property] = buf.unpackString(length, offset);
          }
          offset += length;
        });
        auth.push(cookie);
    }
    return auth;
}

var homedir = Require('os/os-homedir');
var path = Require('path');

function readXauthority(cb) {
  var filename = process.env.XAUTHORITY || path.join(homedir(), '.Xauthority');
  fs.readFile(filename, function(err, data) {
    if (!err)
      return cb(null, data);
    if(err.code == 'ENOENT') {
      // Xming/windows uses %HOME%/Xauthority ( .Xauthority with no dot ) - try with this name
      filename = process.env.XAUTHORITY || path.join(homedir(), 'Xauthority');
      fs.readFile(filename, function (err, data) {
        if (err.code == 'ENOENT') {
          cb(null, null);
        } else {
          cb(err);
        }
      });
    } else {
      cb(err);
    }
  });
}

module.exports = function( display, host, socketFamily, cb )
{
  var family;
  if (socketFamily === 'IPv4') {
    family = 0; // Internet
  } else if (socketFamily === 'IPv6') {
    family = 6; // Internet6
  } else {
    family = 256; // Local
  }
  readXauthority(function(err, data) {
    if(err) return cb(err);

    if (!data) {
      return cb(null, {
        authName: '',
        authData: ''
      });
    }
    var auth = parseXauth(data);
    for (var cookieNum in auth)
    {
      var cookie = auth[cookieNum];
      if ((typeToName[cookie.family] === 'Wild' || (cookie.type === family && cookie.address === host)) &&
          (cookie.display.length === 0 || cookie.display === display))
        return cb( null, cookie );
    }
    // If no cookie is found, proceed without authentication
    cb(null, {
      authName: '',
      authData: ''
    });
  });
};
};
BundleModuleCode['x11/core/unpackbuffer']=function (module,exports,global,process){
// unpack for static buffer
	
// TODO: use as fallback only if v0.5+ fuffer is not available
// TODO: remove duplicate code
var argument_length = {};
argument_length.C = 1;
argument_length.S = 2;
argument_length.s = 2;
argument_length.L = 4;
argument_length.x = 1;

module.exports.addUnpack = function(Buffer)
{
    Buffer.prototype.unpack = function(format, offset)
    {
        if (!offset)
            offset = 0;

        var data = [];
        var current_arg = 0;
        while (current_arg < format.length)
        {
            var arg = format[current_arg];
            switch (arg) {
            case 'C':
                data.push(this.readUInt8(offset++));
                break;
            case 'c':
                data.push(this.readInt8(offset++));
                break;
            case 'S':
                data.push(this.readUInt16LE(offset));
                offset += 2;
                break;
            case 's':
                data.push(this.readInt16LE(offset));
                offset += 2;
                break;
            case 'n':
                data.push(this.readUInt16BE(offset));
                offset += 2;
                break;
            case 'L':
                data.push(this.readUInt32LE(offset));
                offset += 4;
                break;
            case 'l':
                data.push(this.readInt32LE(offset));
                offset += 4;
                break;
            case 'x':
                offset++;
                break;
            }
            current_arg++;
        }
        return data;
    }

    /*  
    Buffer.prototype.skip = function(n)
    {
        offset += n;
    }
    */

    Buffer.prototype.unpackString = function(n, offset)
    {
        var res = '';
        var end = offset + n;
        while(offset < end)
            res += String.fromCharCode(this[offset++]);
        return res;
    }
}
};
BundleModuleCode['os/os-homedir']=function (module,exports,global,process){
'use strict';
var os = require('os');

function homedir() {
	var env = process.env;
	var home = env.HOME;
	var user = env.LOGNAME || env.USER || env.LNAME || env.USERNAME;

	if (process.platform === 'win32') {
		return env.USERPROFILE || env.HOMEDRIVE + env.HOMEPATH || home || null;
	}

	if (process.platform === 'darwin') {
		return home || (user ? '/Users/' + user : null);
	}

	if (process.platform === 'linux') {
		return home || (process.getuid() === 0 ? '/root' : (user ? '/home/' + user : null));
	}

	return home || null;
}

module.exports = typeof os.homedir === 'function' ? os.homedir : homedir;
};
BundleModuleCode['os/path']=function (module,exports,global,process){
var Fs = Require('fs');

var _process = process || {};
(function () {
  "use strict";

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var isWindows = _process.platform === 'win32';
var util = Require('util');
if (!util.deprecate) util.deprecate=function(f,w) {return f;};

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}


if (isWindows) {
  // Regex to split a windows path into three parts: [*, device, slash,
  // tail] windows-only
  var splitDeviceRe =
      /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;

  // Regex to split the tail part of the above into [*, dir, basename, ext]
  var splitTailRe =
      /^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/;

  // Function to split a filename into [root, dir, basename, ext]
  // windows version
  var splitPath = function(filename) {
    // Separate device+slash from tail
    var result = splitDeviceRe.exec(filename),
        device = (result[1] || '') + (result[2] || ''),
        tail = result[3] || '';
    // Split the tail into dir, basename and extension
    var result2 = splitTailRe.exec(tail),
        dir = result2[1],
        basename = result2[2],
        ext = result2[3];
    return [device, dir, basename, ext];
  };

  var normalizeUNCRoot = function(device) {
    return '\\\\' + device.replace(/^[\\\/]+/, '').replace(/[\\\/]+/g, '\\');
  };

  // path.resolve([from ...], to)
  // windows version
  exports.resolve = function() {
    var resolvedDevice = '',
        resolvedTail = '',
        resolvedAbsolute = false;

    for (var i = arguments.length - 1; i >= -1; i--) {
      var path;
      if (i >= 0) {
        path = arguments[i];
      } else if (!resolvedDevice) {
        path = _process.cwd();
      } else {
        // Windows has the concept of drive-specific current working
        // directories. If we've resolved a drive letter but not yet an
        // absolute path, get cwd for that drive. We're sure the device is not
        // an unc path at this points, because unc paths are always absolute.
        path = _process.env['=' + resolvedDevice];
        // Verify that a drive-local cwd was found and that it actually points
        // to our drive. If not, default to the drive's root.
        if (!path || path.substr(0, 3).toLowerCase() !==
            resolvedDevice.toLowerCase() + '\\') {
          path = resolvedDevice + '\\';
        }
      }

      // Skip empty and invalid entries
      if (!util.isString(path)) {
        throw new TypeError('Arguments to path.resolve must be strings');
      } else if (!path) {
        continue;
      }

      var result = splitDeviceRe.exec(path),
          device = result[1] || '',
          isUnc = device && device.charAt(1) !== ':',
          isAbsolute = exports.isAbsolute(path),
          tail = result[3];

      if (device &&
          resolvedDevice &&
          device.toLowerCase() !== resolvedDevice.toLowerCase()) {
        // This path points to another device so it is not applicable
        continue;
      }

      if (!resolvedDevice) {
        resolvedDevice = device;
      }
      if (!resolvedAbsolute) {
        resolvedTail = tail + '\\' + resolvedTail;
        resolvedAbsolute = isAbsolute;
      }

      if (resolvedDevice && resolvedAbsolute) {
        break;
      }
    }

    // Convert slashes to backslashes when `resolvedDevice` points to an UNC
    // root. Also squash multiple slashes into a single one where appropriate.
    if (isUnc) {
      resolvedDevice = normalizeUNCRoot(resolvedDevice);
    }

    // At this point the path should be resolved to a full absolute path,
    // but handle relative paths to be safe (might happen when process.cwd()
    // fails)

    // Normalize the tail path

    function f(p) {
      return !!p;
    }

    resolvedTail = normalizeArray(resolvedTail.split(/[\\\/]+/).filter(f),
                                  !resolvedAbsolute).join('\\');

    return (resolvedDevice + (resolvedAbsolute ? '\\' : '') + resolvedTail) ||
           '.';
  };

  // windows version
  exports.normalize = function(path) {
    var result = splitDeviceRe.exec(path),
        device = result[1] || '',
        isUnc = device && device.charAt(1) !== ':',
        isAbsolute = exports.isAbsolute(path),
        tail = result[3],
        trailingSlash = /[\\\/]$/.test(tail);

    // If device is a drive letter, we'll normalize to lower case.
    if (device && device.charAt(1) === ':') {
      device = device[0].toLowerCase() + device.substr(1);
    }

    // Normalize the tail path
    tail = normalizeArray(tail.split(/[\\\/]+/).filter(function(p) {
      return !!p;
    }), !isAbsolute).join('\\');

    if (!tail && !isAbsolute) {
      tail = '.';
    }
    if (tail && trailingSlash) {
      tail += '\\';
    }

    // Convert slashes to backslashes when `device` points to an UNC root.
    // Also squash multiple slashes into a single one where appropriate.
    if (isUnc) {
      device = normalizeUNCRoot(device);
    }

    return device + (isAbsolute ? '\\' : '') + tail;
  };

  // windows version
  exports.isAbsolute = function(path) {
    var result = splitDeviceRe.exec(path),
        device = result[1] || '',
        isUnc = !!device && device.charAt(1) !== ':';
    // UNC paths are always absolute
    return !!result[2] || isUnc;
  };

  // windows version
  exports.join = function() {
    function f(p) {
      if (!util.isString(p)) {
        throw new TypeError('Arguments to path.join must be strings');
      }
      return p;
    }

    var paths = Array.prototype.filter.call(arguments, f);
    var joined = paths.join('\\');

    // Make sure that the joined path doesn't start with two slashes, because
    // normalize() will mistake it for an UNC path then.
    //
    // This step is skipped when it is very clear that the user actually
    // intended to point at an UNC path. This is assumed when the first
    // non-empty string arguments starts with exactly two slashes followed by
    // at least one more non-slash character.
    //
    // Note that for normalize() to treat a path as an UNC path it needs to
    // have at least 2 components, so we don't filter for that here.
    // This means that the user can use join to construct UNC paths from
    // a server name and a share name; for example:
    //   path.join('//server', 'share') -> '\\\\server\\share\')
    if (!/^[\\\/]{2}[^\\\/]/.test(paths[0])) {
      joined = joined.replace(/^[\\\/]{2,}/, '\\');
    }

    return exports.normalize(joined);
  };

  // path.relative(from, to)
  // it will solve the relative path from 'from' to 'to', for instance:
  // from = 'C:\\orandea\\test\\aaa'
  // to = 'C:\\orandea\\impl\\bbb'
  // The output of the function should be: '..\\..\\impl\\bbb'
  // windows version
  exports.relative = function(from, to) {
    from = exports.resolve(from);
    to = exports.resolve(to);

    // windows is not case sensitive
    var lowerFrom = from.toLowerCase();
    var lowerTo = to.toLowerCase();

    function trim(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== '') break;
      }

      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== '') break;
      }

      if (start > end) return [];
      return arr.slice(start, end + 1);
    }

    var toParts = trim(to.split('\\'));

    var lowerFromParts = trim(lowerFrom.split('\\'));
    var lowerToParts = trim(lowerTo.split('\\'));

    var length = Math.min(lowerFromParts.length, lowerToParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (lowerFromParts[i] !== lowerToParts[i]) {
        samePartsLength = i;
        break;
      }
    }

    if (samePartsLength == 0) {
      return to;
    }

    var outputParts = [];
    for (var i = samePartsLength; i < lowerFromParts.length; i++) {
      outputParts.push('..');
    }

    outputParts = outputParts.concat(toParts.slice(samePartsLength));

    return outputParts.join('\\');
  };

  exports.sep = '\\';
  exports.delimiter = ';';

} else /* posix */ {

  // Split a filename into [root, dir, basename, ext], unix version
  // 'root' is just a slash, or nothing.
  var splitPathRe =
      /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  var splitPath = function(filename) {
    return splitPathRe.exec(filename).slice(1);
  };

  // path.resolve([from ...], to)
  // posix version
  exports.resolve = function() {
    var resolvedPath = '',
        resolvedAbsolute = false;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = (i >= 0) ? arguments[i] : _process.cwd();

      // Skip empty and invalid entries
      if (!util.isString(path)) {
        throw new TypeError('Arguments to path.resolve must be strings');
      } else if (!path) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charAt(0) === '/';
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeArray(resolvedPath.split('/').filter(function(p) {
      return !!p;
    }), !resolvedAbsolute).join('/');

    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
  };

  // path.normalize(path)
  // posix version
  exports.normalize = function(path) {
    var isAbsolute = exports.isAbsolute(path),
        trailingSlash = path[path.length - 1] === '/',
        segments = path.split('/'),
        nonEmptySegments = [];

    // Normalize the path
    for (var i = 0; i < segments.length; i++) {
      if (segments[i]) {
        nonEmptySegments.push(segments[i]);
      }
    }
    path = normalizeArray(nonEmptySegments, !isAbsolute).join('/');

    if (!path && !isAbsolute) {
      path = '.';
    }
    if (path && trailingSlash) {
      path += '/';
    }

    return (isAbsolute ? '/' : '') + path;
  };

  // posix version
  exports.isAbsolute = function(path) {
    return path.charAt(0) === '/';
  };

  // posix version
  exports.join = function() {
    var path = '';
    for (var i = 0; i < arguments.length; i++) {
      var segment = arguments[i];
      if (!util.isString(segment)) {
        throw new TypeError('Arguments to path.join must be strings');
      }
      if (segment) {
        if (!path) {
          path += segment;
        } else {
          path += '/' + segment;
        }
      }
    }
    return exports.normalize(path);
  };


  // path.relative(from, to)
  // posix version
  exports.relative = function(from, to) {
    from = exports.resolve(from).substr(1);
    to = exports.resolve(to).substr(1);

    function trim(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== '') break;
      }

      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== '') break;
      }

      if (start > end) return [];
      return arr.slice(start, end + 1);
    }

    var fromParts = trim(from.split('/'));
    var toParts = trim(to.split('/'));

    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }

    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push('..');
    }

    outputParts = outputParts.concat(toParts.slice(samePartsLength));

    return outputParts.join('/');
  };

  exports.sep = '/';
  exports.delimiter = ':';
}

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};


exports.exists = util.deprecate(function(path, callback) {
  if (Fs) Fs.exists(path, callback);
  else callback(false);
}, 'path.exists is now called `fs.exists`.');


exports.existsSync = util.deprecate(function(path) {
  if (Fs) return Fs.existsSync(path);
  else return false;
}, 'path.existsSync is now called `fs.existsSync`.');


if (isWindows) {
  exports._makeLong = function(path) {
    // Note: this will *probably* throw somewhere.
    if (!util.isString(path))
      return path;

    if (!path) {
      return '';
    }

    var resolvedPath = exports.resolve(path);

    if (/^[a-zA-Z]\:\\/.test(resolvedPath)) {
      // path is local filesystem path, which needs to be converted
      // to long UNC path.
      return '\\\\?\\' + resolvedPath;
    } else if (/^\\\\[^?.]/.test(resolvedPath)) {
      // path is network UNC path, which needs to be converted
      // to long UNC path.
      return '\\\\?\\UNC\\' + resolvedPath.substring(2);
    }

    return path;
  };
} else {
  exports._makeLong = function(path) {
    return path;
  };
}
}());
};
BundleModuleCode['x11/core/xutil']=function (module,exports,global,process){
function padded_length(len)
{
   return ((len + 3) >> 2) << 2;
   /*
   var rem = len % 4;
   var pl = len;
   if (rem)
       return len + 4 - rem;
   return len;
   */
}

// TODO: make it return buffer?
// str += is slow
function padded_string(str)
{
   if (str.length == 0)
       return '';
 
   var pad = padded_length(str.length) - str.length;
   var res = str;
   for (var i=0; i < pad; ++i)
       res += String.fromCharCode(0);

   return res;
}

module.exports.padded_length = padded_length;
module.exports.padded_string = padded_string;
};
BundleModuleCode['os/events']=function (module,exports,global,process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

// listenerCount isn't in node 0.10, so here's a basic polyfill
EventEmitter._listenerCount = function (ee, event) {
  var listeners = ee && ee._events && ee._events[event]
  if (Array.isArray(listeners)) {
    return listeners.length
  } else if (typeof listeners === 'function') {
    return 1
  } else {
    return 0
  }
}

EventEmitter.listenerCount = function(emitter, type) {
  if (emitter.listenerCount == undefined) return EventEmitter._listenerCount(emitter,type)
  else
    return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}
};
BundleModuleCode['x11/core/unpackstream']=function (module,exports,global,process){
var Buffer = Require('buffer').Buffer;
var EventEmitter = Require('events').EventEmitter;
var util = Require('util');
var xutil = Require('x11/core/xutil');

var argument_length = {};
argument_length.C = 1;
argument_length.S = 2;
argument_length.s = 2;
argument_length.L = 4;
argument_length.l = 4;
argument_length.x = 1;

function ReadFormatRequest(format, callback)
{
    this.format = format;
    this.current_arg = 0;
    this.data = [];
    this.callback = callback;
}

function ReadFixedRequest(length, callback)
{
    this.length = length;
    this.callback = callback;
    this.data = new Buffer(length);
    this.received_bytes = 0;
}

ReadFixedRequest.prototype.execute = function(bufferlist, aa, bb, cc, dd)
{
    // TODO: this is a brute force version
    // replace with Buffer.slice calls
    var to_receive = this.length - this.received_bytes;
    for(var i=0 ; i < to_receive; ++i)
    {
        if (bufferlist.length == 0)
            return false;
        this.data[this.received_bytes++] = bufferlist.getbyte();
    }
    this.callback(this.data);
    return true;
}

ReadFormatRequest.prototype.execute = function(bufferlist, tag1, tag2)
{
    while (this.current_arg < this.format.length)
    {
        var arg = this.format[this.current_arg];
        if (bufferlist.length < argument_length[arg])
            return false; // need to wait for more data to prcess this argument

        // TODO: measure Buffer.readIntXXX performance and use them if faster
        // note: 4 and 2-byte values may cross chunk border & split. need to handle this correctly
        // maybe best approach is to wait all data required for format and then process fixed buffer
        // TODO: byte order!!!
        switch (arg) {
        case 'C':
            this.data.push(bufferlist.getbyte());
            break;
        case 'S':
        case 's':
            var b1 = bufferlist.getbyte();
            var b2 = bufferlist.getbyte();
            this.data.push(b2*256+b1);
            break;
        case 'l':
        case 'L':
            var b1 = bufferlist.getbyte();
            var b2 = bufferlist.getbyte();
            var b3 = bufferlist.getbyte();
            var b4 = bufferlist.getbyte();
            this.data.push(((b4*256+b3)*256 + b2)*256 + b1);
            break;
        case 'x':
            bufferlist.getbyte();
            break;
        }
        this.current_arg++;
    }
    this.callback(this.data);
    return true;
}

function UnpackStream()
{
    EventEmitter.call(this);

    this.readlist = [];
    this.length = 0;
    this.offset = 0;
    this.read_queue = [];
    this.write_queue = [];
    this.write_length = 0;
}
util.inherits(UnpackStream, EventEmitter);

UnpackStream.prototype.write = function(buf)
{
    this.readlist.push(buf);
    this.length += buf.length;
    this.resume();
}

UnpackStream.prototype.pipe = function(stream)
{
    // TODO: ondrain & pause
    this.on('data', function(data)
    {
        stream.write(data);
    });
}

UnpackStream.prototype.unpack = function(format, callback)
{
    this.read_queue.push(new ReadFormatRequest(format, callback));
    this.resume();
}

UnpackStream.prototype.unpackTo = function(destination, names_formats, callback)
{
    var names = [];
    var format = '';

    for (var i=0; i < names_formats.length; ++i)
    {
        var off = 0;
        while(off < names_formats[i].length && names_formats[i][off] == 'x')
        {
            format += 'x';
            off++;
        }

        if (off < names_formats[i].length)
        {
            format += names_formats[i][off];
            var name = names_formats[i].substr(off+2);
            names.push(name);
        }
    }

    this.unpack(format, function(data) {
        if (data.length != names.length)
            throw 'Number of arguments mismatch, ' + names.length + ' fields and ' + data.length + ' arguments';
        for (var fld = 0; fld < data.length; ++fld)
        {
            destination[names[fld]] = data[fld];
        }
        callback(destination);
    });
}

UnpackStream.prototype.get = function(length, callback)
{
    this.read_queue.push(new ReadFixedRequest(length, callback));
    this.resume();
}

UnpackStream.prototype.resume = function()
{
    if (this.resumed)
         return;
    this.resumed = true;
    // process all read requests until enough data in the buffer
    while(this.read_queue[0].execute(this))
    {
        this.read_queue.shift();
        if (this.read_queue.length == 0)
            return;
    }
    this.resumed = false;
}

UnpackStream.prototype.getbyte = function()
{
    var res = 0;
    var b = this.readlist[0];
    if (this.offset + 1 < b.length)
    {
        res = b[this.offset];
        this.offset++;
        this.length--;

    } else {

        // last byte in current buffer, shift read list
        res = b[this.offset];
        this.readlist.shift();
        this.length--;
        this.offset = 0;
    }
    return res;
}

/*

// write padded string
// at the moment replaced with pack('p', [ 'padded_string' ])
UnpackStream.prototype.pstr = function(str)
{
    var len = xutil.padded_length(str.length);
    if (len == 0)
        return; // nothing to write
    var buf = new Buffer(len);
    buf.write(str, 'binary');
    this.write_queue.push(buf);
}
*/

// TODO: measure node 0.5+ buffer serialisers performance
UnpackStream.prototype.pack = function(format, args)
{
    var packetlength = 0;

    var arg = 0;
    for (var i = 0; i < format.length; ++i)
    {
        var f = format[i];
        if (f == 'x')
        {
            packetlength++;
        } else if (f == 'p') {
            packetlength += xutil.padded_length(args[arg++].length);
        } else if (f == 'a') {
            packetlength += args[arg].length;
            arg++;
        } else if (f == 'A') {  // @blab+ STRING16
            packetlength += (args[arg].length*2);
            arg++;
        } else {
            // this is a fixed-length format, get length from argument_length table
            packetlength += argument_length[f];
            arg++;
        }
    }
// console.log(format,packetlength)
    var buf = new Buffer(packetlength);
    var offset = 0;
    var arg = 0;
    for (var i = 0; i < format.length; ++i)
    {
        switch(format[i])
        {
            case 'x':
                buf[offset++] = 0;
                break;
            case 'C':
                var n = args[arg++];
                buf[offset++] = n;
                break;
            case 's':
                var n = args[arg++];
                buf.writeInt16LE(n, offset);
                offset += 2;
                break;

            case 'S':
                var n = args[arg++];
                buf[offset++] = n & 0xff;
                buf[offset++] = (n >> 8) & 0xff;
                break;
            case 'l':
                var n = args[arg++];
                buf.writeInt32LE(n, offset);
                offset += 4;
                break;

            case 'L':
                var n = args[arg++];
                buf[offset++] = n & 0xff;
                buf[offset++] = (n >> 8) & 0xff;
                buf[offset++] = (n >> 16) & 0xff;
                buf[offset++] = (n >> 24) & 0xff;
                break;
            case 'a':  // string or buffer
                var str = args[arg++];
                if (Buffer.isBuffer(str))
                {
                    str.copy(buf, offset);
                    offset += str.length;
                } else {
                    // TODO: buffer.write could be faster
                    for (var c = 0; c < str.length; ++c)
                        buf[offset++] = str.charCodeAt(c);
                }
                break;
            // @blab+
            case 'A':  // STRING16 (from  JS string)
                var str = args[arg++];
                {
                    for (var c = 0; c < str.length; ++c) {
                        buf[offset++] = 0;
                        buf[offset++] = str.charCodeAt(c);
                    }
                }
                break;
            case 'p':  // padded string
                var str = args[arg++];
                var len = xutil.padded_length(str.length);
                // TODO: buffer.write could be faster
                var c = 0;
                for (; c < str.length; ++c)
                    buf[offset++] = str.charCodeAt(c);
                for (; c < len; ++c)
                    buf[offset++] = 0;
                break;
        }
    }
    this.write_queue.push(buf);
    this.write_length += buf.length;
    return this;
}

UnpackStream.prototype.flush = function(stream)
{
    // TODO: measure performance benefit of
    // creating and writing one big concatenated buffer

    // TODO: check write result
    // pause/resume streaming
    for (var i=0; i < this.write_queue.length; ++i)
    {
         //stream.write(this.write_queue[i])
         this.emit('data', this.write_queue[i]);
    }
    this.write_queue = [];
    this.write_length = 0;
}

module.exports = UnpackStream;
};
BundleModuleCode['x11/core/hexy']=function (module,exports,global,process){
//= hexy.js -- utility to create hex dumps 
//
// `hexy` is a javascript (node) library that's easy to use to create hex
// dumps from within node. It contains a number of options to configure
// how the hex dumb will end up looking.
//
// It should create a pleasant looking hex dumb by default:
//    
//    var hexy = require('hexy.js'),
//           b = new Buffer("\000\001\003\005\037\012\011bcdefghijklmnopqrstuvwxyz0123456789")
//    
//    console.log(hexy.hexy(b))
//
// results in this dump:
//
//    0000000: 00 01 03 05 1f 0a 09 62   63 64 65 66 67 68 69 6a  .......b cdefghij 
//    0000010: 6b 6c 6d 6e 6f 70 71 72   73 74 75 76 77 78 79 7a  klmnopqr stuvwxyz 
//    0000020: 30 31 32 33 34 35 36 37   38 39                    01234567 89
//
// but it's also possible to configure:
//
//  * Line numbering
//  * Line width
//  * Format
//  * Case of hex decimals
//  * Presence of the ASCII annotation in the right column.
//
// This mean you can do exciting dumps like:
//
//    0000000: 0001 0305 1f0a 0962  .... ...b 
//    0000008: 6364 6566 6768 696a  cdef ghij 
//    0000010: 6b6c 6d6e 6f70 7172  klmn opqr 
//    0000018: 7374 7576 7778 797a  stuv wxyz 
//    0000020: 3031 3233 3435 3637  0123 4567 
//    0000028: 3839                 89
//
// or even:
//
//    0000000: 00 01 03 05 1f 0a 09 62   63 64 65 66 67 68 69 6a 
//    0000010: 6b 6c 6d 6e 6f 70 71 72   73 74 75 76 77 78 79 7a 
//    0000020: 30 31 32 33 34 35 36 37   38 39
//
// with hexy!
// 
// Formatting options are configured by passing a `format` object to the `hexy` function:
//
//    var format = {}
//        format.width = width // how many bytes per line, default 16
//        format.numbering = n // ["hex_bytes" | "none"],  default "none"
//        format.format = f    // ["fours"|"twos"|"none"], how many nibbles per group
//                             //                          default "fours"
//        format.caps = c      // ["lower"|"upper"],       default lower
//        format.annotate=a    // ["ascii"|"none"], ascii annotation at end of line?
//                             //                          default "ascii"
//        format.prefix=p      // <string> something pretty to put in front of each line
//                             //                          default ""
//        format.indent=i      // <num> number of spaces to indent
//                             //                          default 0
//
//    console.log(hexy.hexy(buffer, format))
//
// In case you're really nerdy, you'll have noticed that the defaults correspond
// to how `xxd` formats it's output.
//           
//
//== Installing
//
// Either use `npm`:
//  
//    npm install hexy
//
// This will install the lib which you'll be able to use like so:
//    
//    var hexy = require("hexy.js"),
//        buf  = // get Buffer from somewhere,
//        str  = hexy.hexy(buf)
//
// It will also install `hexy.js` into your path in case you're totally fed up
// with using `xxd`.
//        
// 
// If you don't like `npm`, grab the source from github:
//
//    http://github.com/a2800276/hexy.js
//
//== TODOS
//
// The current version only pretty prints Buffers. Which probably means it
// can only be used from within node. What's more important what it
// doesn't support: Strings (which would be nice for the sake of
// completeness) and Streams/series of Buffers which would be nice so you
// don't have to collect the whole things you want to pretty print in
// memory. `hexy` is probably most useful for debugging and getting binary
// protocol stuff working, so that's probably not an too much of an issue.
//
//== History
//
// This is a fairly straightforward port of `hexy.rb` which does more or less the
// same thing. You can find it here: 
// 
//    http://github.com/a2800276/hexy
// 
// in case these sorts of things interest you.
//
//== Mail
//
// In case you discover bugs, spelling errors, offer suggestions for
// improvements or would like to help out with the project, you can contact
// me directly (tim@kuriositaet.de). 

var hexy = function (buffer, config) {
  config = config || {}
  var h = new Hexy(buffer, config)
  return h.toString()
}

var Hexy = function (buffer, config) {
  var self = this
 
  self.buffer    = buffer // magic string conversion here?
  self.width     = config.width || 16
  self.numbering = config.numbering == "none"  ? "none" : "hex_bytes"
  self.groupSpacing = config.groupSpacing || 0
   
  switch (config.format) {
    case "none":
    case "twos":
      self.format = config.format
      break
    default:
      self.format = "fours"
  }
  
  self.caps      = config.caps      == "upper" ? "upper" : "lower"
  self.annotate  = config.annotate  == "none"  ? "none"  : "ascii"
  self.prefix    = config.prefix    || ""
  self.indent    = config.indent    || 0

  for (var i = 0; i!=self.indent; ++i) {
    self.prefix = " "+prefix
  }

  var pos = 0

  this.toString = function () {
    var str = ""
    
    //split up into line of max `self.width`
    var line_arr = lines()
    
    //lines().forEach(function(hex_raw, i){
    for (var i = 0; i!= line_arr.length; ++i) {
      var hex_raw = line_arr[i],
          hex = hex_raw[0],
          raw = hex_raw[1]
      //insert spaces every `self.format.twos` or fours
      var howMany = hex.length
      if (self.format === "fours") {
        howMany = 4
      } else if (self.format === "twos") {
        howMany = 2
      }

      var hex_formatted = ""
      var middle = Math.floor(self.width / 2)-1
      var groupSpaces = (new Array(self.groupSpacing+1)).join(' ');
      for (var j=0; j<hex.length; j+=howMany) {
        var s = hex.substr(j, howMany)
        hex_formatted += s + (j/2 === middle && self.groupSpacing > 0 ? groupSpaces : " ")
      }
      str += self.prefix 

      if (self.numbering === "hex_bytes") {
        str += pad(i*self.width, 8) // padding...
        str += ": "
      }
      
      var padlen = 0
      switch(self.format) {
        case "fours":
          padlen = self.width*2 + self.width/2
          break
        case "twos":
          padlen = self.width*3 + 2
          break
        default:
          padlen = self * 2
      }

      str += rpad(hex_formatted, padlen)
      if (self.annotate === "ascii") {
        str+=" "
        str+=raw.replace(/[\000-\040\177-\377]/g, ".")
      }
      str += "\n"
    }
    return str
  }

  var lines = function() {
    var hex_raw = []
    

    for (var i = 0; i<self.buffer.length ; i+=self.width) {
      var begin = i,
          end   = i+self.width >= buffer.length ? buffer.length : i+self.width,
          slice = buffer.slice(begin, end),
          hex   = self.caps === "upper" ? hexu(slice) : hexl(slice),
          raw   = slice.toString('ascii')

      hex_raw.push([hex,raw])
    }
    return hex_raw

  }

  var hexl = function (buffer) {
    var str = ""
    for (var i=0; i!=buffer.length; ++i) {
      str += pad(buffer[i], 2)
    }
    return str
  }
  var hexu = function (buffer) {
    return hexl(buffer).toUpperCase()
  }

  var pad = function(b, len) {
    var s = b.toString(16)
    
    while (s.length < len) {
      s = "0" + s
    }
    return s
  } 
  var rpad = function(s, len) {
    while(s.length < len) {
      s += " "
    }
    return s
  }

}
/*
var fs = require('fs'),
    file = process.argv[2]


var data = fs.readFileSync(file)
//console.log(hexy(data))
var format = {}
//format.format = "fours"
format.caps   = "upper"
format.annotate = "none"
//format.numbering = "none"
format.width = 8
console.log(hexy(data, format))
console.log("doen")
*/

exports.hexy = hexy};
BundleModuleCode['x11/core/xerrors']=function (module,exports,global,process){
module.exports.errorText = {
    1: 'Bad request',
    2: 'Bad param value',
    3: 'Bad window',
    4: 'Bad pixmap',
    5: 'Bad atom',
    6: 'Bad cursor',
    7: 'Bad font',
    8: 'Bad match',
    9: 'Bad drawable',
   10: 'Bad access',
   11: 'Bad alloc',
   12: 'Bad colormap',
   13: 'Bad GContext',
   14: 'Bad ID choice',
   15: 'Bad name',
   16: 'Bad length',
   17: 'Bad implementation'
};
};
BundleModuleCode['x11/core/corereqs']=function (module,exports,global,process){
// full list of event/error/request codes for all extensions:
// http://www.opensource.apple.com/source/X11server/X11server-106.7/kdrive/xorg-server-1.6.5-apple3/dix/protocol.txt

var xutil = Require('x11/core/xutil');
var hexy = Require('x11/core/hexy').hexy;

var valueMask = {
    CreateWindow: {
        backgroundPixmap      : {
          mask: 0x00000001,
          format: 'L'
        },
        backgroundPixel       : {
          mask: 0x00000002,
          format: 'L'
        },
        borderPixmap          : {
          mask: 0x00000004,
          format: 'L'
        },
        borderPixel           : {
          mask: 0x00000008,
          format: 'L'
        },
        bitGravity            : {
          mask: 0x00000010,
          format: 'Cxxx'
        },
        winGravity            : {
          mask: 0x00000020,
          format: 'Cxxx'
        },
        backingStore          : {
          mask: 0x00000040,
          format: 'Cxxx'
        },
        backingPlanes         : {
          mask: 0x00000080,
          format: 'L'
        },
        backingPixel          : {
          mask: 0x00000100,
          format: 'L'
        },
        overrideRedirect      : {
          mask: 0x00000200,
          format: 'Cxxx'
        },
        saveUnder             : {
          mask: 0x00000400,
          format: 'Cxxx'
        },
        eventMask             : {
          mask: 0x00000800,
          format: 'L'
        },
        doNotPropagateMask    : {
          mask: 0x00001000,
          format: 'L'
        },
        colormap              : {
          mask: 0x00002000,
          format: 'L'
        },
        cursor                : {
          mask: 0x00004000,
          format: 'L'
        }
    },
    CreateGC: {
       'function'             : { // TODO: alias? _function?
          mask: 0x00000001,
          format: 'Cxxx'
        },
       planeMask              : {
          mask: 0x00000002,
          format: 'L'
        },
       foreground             : {
          mask: 0x00000004,
          format: 'L'
        },
       background             : {
          mask: 0x00000008,
          format: 'L'
        },
       lineWidth              : {
          mask: 0x00000010,
          format: 'Sxx'
        },
       lineStyle              : {
          mask: 0x00000020,
          format: 'Cxxx'
        },
       capStyle               : {
          mask: 0x00000040,
          format: 'Cxxx'
        },
       joinStyle              : {
          mask: 0x00000080,
          format: 'Cxxx'
        },
       fillStyle              : {
          mask: 0x00000100,
          format: 'Cxxx'
        },
       fillRule               : {
          mask: 0x00000200,
          format: 'Cxxx'
        },
       tile                   : {
          mask: 0x00000400,
          format: 'L'
        },
       stipple                : {
          mask: 0x00000800,
          format: 'L'
        },
       tileStippleXOrigin     : {
          mask: 0x00001000,
          format: 'sxx'
        },
       tileStippleYOrigin     : {
          mask: 0x00002000,
          format: 'sxx'
        },
       font                   : {
          mask: 0x00004000,
          format: 'L'
        },
       subwindowMode          : {
          mask: 0x00008000,
          format: 'Cxxx'
        },
       graphicsExposures      : {
          mask: 0x00010000,
          format: 'Cxxx'
        },
       clipXOrigin            : {
          mask: 0x00020000,
          format: 'Sxx'
        },
       clipYOrigin            : {
          mask: 0x00040000,
          format: 'Sxx'
        },
       clipMask               : {
          mask: 0x00080000,
          format: 'L'
        },
       dashOffset             : {
          mask: 0x00100000,
          format: 'Sxx'
        },
       dashes                 : {
          mask: 0x00200000,
          format: 'Cxxx'
        },
       arcMode                : {
          mask: 0x00400000,
          format: 'Cxxx'
        }
    },
    ConfigureWindow: {
      x                       : {
        mask: 0x000001,
        format: 'sxx'
      },
    	y                       : {
        mask: 0x000002,
        format: 'sxx'
      },
    	width                   : {
        mask: 0x000004,
        format: 'Sxx'
      },
    	height                  : {
        mask: 0x000008,
        format: 'Sxx'
      },
    	borderWidth             : {
        mask: 0x000010,
        format: 'Sxx'
      },
    	sibling                 : {
        mask: 0x000020,
        format: 'L'
      },
    	stackMode               : {
        mask: 0x000040,
        format: 'Cxxx'
      }
    }
};


var valueMaskName = {};
for (var req in valueMask) {
    var masks = valueMask[req];
    var names = valueMaskName[req] = {};
    for (var m in masks)
        names[masks[m].mask] = m;
}

function packValueMask(reqname, values)
{
    var bitmask = 0;
    var masksList = [];
    var format = '';
    var reqValueMask = valueMask[reqname];
    var reqValueMaskName = valueMaskName[reqname];

    if (!reqValueMask)
        throw new Error(reqname + ': no value mask description');

    for (var value in values)
    {
        var v = reqValueMask[value];
        if (v) {
          var valueBit = v.mask;
          if (!valueBit)
              throw new Error(reqname + ': incorrect value param ' + value);
          masksList.push(valueBit);
          bitmask |= valueBit;
        }
    }

    /* numeric sort */
    masksList.sort(function(a, b) {
      return a - b;
    });

    var args = [];
    for (m in masksList)
    {
       var valueName = reqValueMaskName[masksList[m]];
       format += reqValueMask[valueName].format
       args.push( values[valueName] );
    }
    return [format, bitmask, args]
}

/*

the way requests are described here

- outgoing request

   1) as function
   client.CreateWindow( params, params ) ->
       req = reqs.CreateWindow[0]( param, param );
       pack_stream.pack(req[0], req[1]);

   2) as array: [format, [opcode, request_length, additional known params]]

   client.MapWindow[0](id) ->
       req = reqs.MwpWindow;
       req[1].push(id);
       pack_stream.pack( req[0], req[1] );

- reply

*/

var templates = {
   CreateWindow: [
       // create request packet - function OR format string
       function(id, parentId, x, y, width, height, borderWidth, depth, _class, visual, values) {

           if (borderWidth === undefined)
               borderWidth = 0;
           if (depth === undefined)
               depth = 0;
           if (_class === undefined)
               _class = 0;
           if (visual === undefined)
               visual = 0;
           if (values === undefined)
               values = {}

           var format = 'CCSLLssSSSSLL';

           // TODO: slice from function arguments?

           // TODO: the code is a little bit mess
           // additional values need to be packed in the following way:
           // bitmask (bytes #24 to #31 in the packet) - 32 bit indicating what adittional arguments we supply
           // values list (bytes #32 .. #32+4*num_values) in order of corresponding bits TODO: it's actually not 4*num. Some values are 4b ytes, some - 1 byte

           var vals = packValueMask('CreateWindow', values);
           var packetLength = 8 + (values ? vals[2].length : 0);
           var args = [1, depth, packetLength, id, parentId, x, y, width, height, borderWidth, _class, visual];
           format += vals[0];
           args.push(vals[1]);
           args = args.concat(vals[2]);
           return [format, args];
       }

   ],

   ChangeWindowAttributes:[
       function(wid, values) {
           var format = 'CxSLSxx';
           var vals = packValueMask('CreateWindow', values);
           var packetLength = 3 + (values ? vals[2].length : 0);
           var args = [2, packetLength, wid, vals[1]];
           var valArr = vals[2];
           format += vals[0];
           args = args.concat(valArr);
           return [format, args];
        }
   ],

   GetWindowAttributes: [
       ['CxSL', [3, 2]],
       function(buf, backingStore)
       {
           // TODO: change from array to named object fields
           var res = buf.unpack('LSCCLLCCCCLLLS');
           var ret = {
               backingStore: backingStore
           };
           ( "visual klass bitGravity winGravity backingPlanes backingPixel" +
             " saveUnder mapIsInstalled mapState overrideRedirect colormap" +
             " allEventMasks myEventMasks doNotPropogateMask" )
           .split(' ').forEach(function(field, index) {
               ret[field] = res[index];
           });
           return ret;
       }
   ],

   DestroyWindow: [
       [ 'CxSL', [4, 2] ]
   ],

   ChangeSaveSet: [
      function(isInsert, wid)
      {
          return [ 'CCSL', [6, (isInsert ? 0 : 1), 2, wid]]
      }
   ],

   // wid, newParentId, x, y
   ReparentWindow: [
       [ 'CxSLLss', [7, 4]]
   ],

   MapWindow: [
       // 8 - opcode, 2 - length, wid added as parameter
       [ 'CxSL', [8, 2] ]
   ],

   UnmapWindow: [
       [ 'CxSL', [10, 2] ]
   ],

   ConfigureWindow: [
        /*
         * options : {
         *     x : x_value,
         *     y : y_value,
         *     width : width_value,
         *     height : height_value,
         *     borderWidth : borderWidth_value,
         *     sibling : sibling_value
         * }
         */
        function(win, options) {
            var vals = packValueMask('ConfigureWindow', options);
            var format = 'CxSLSxx' + vals[0];
            var args = [12, vals[2].length + 3, win, vals[1]];
            args = args.concat(vals[2]);
            return [format, args];
        }
   ],

   ResizeWindow: [
        function(win, width, height) {
            return module.exports.ConfigureWindow[0](win, { width : width, height: height });
        }
   ],

   MoveWindow: [
        function(win, x, y) {
            return module.exports.ConfigureWindow[0](win, { x : x, y: y });
        }
   ],

   MoveResizeWindow: [
        function(win, x, y, width, height) {
            return module.exports.ConfigureWindow[0](win, { x : x, y: y, width : width, height: height });
        }
   ],

   RaiseWindow: [
        function(win) {
            return module.exports.ConfigureWindow[0](win, { stackMode : 0 });
        }
   ],

   LowerWindow: [
        function(win) {
            return module.exports.ConfigureWindow[0](win, { stackMode : 1 });
        }
   ],

   QueryTree: [
        ['CxSL', [15, 2]],

        function(buf) {
            var tree = {};
            var res = buf.unpack('LLS');
            tree.root = res[0];
            tree.parent = res[1];
            tree.children = [];
            for (var i=0; i < res[2]; ++i)
                tree.children.push(buf.unpack('L', 24 + i*4)[0]);
            return tree;
        }
   ],

   // opcode 16
   InternAtom: [
       function (returnOnlyIfExist, value)
       {
           var padded = xutil.padded_string(value);
           return ['CCSSxxa', [16, returnOnlyIfExist ? 1 : 0, 2+padded.length/4, value.length, padded] ];
       },

       function(buf, seq_num) {
           var res = buf.unpack('L')[0];
           var pending_atom = this.pending_atoms[seq_num];
           if (!this.atoms[pending_atom]) {
               this.atoms[pending_atom] = res;
               this.atom_names[res] = pending_atom;
           }

           delete this.pending_atoms[seq_num];
           return res;
       }
   ],

   GetAtomName: [
       [ 'CxSL', [17, 2] ],
       function(buf, seq_num) {
          var nameLen = buf.unpack('S')[0];
          // Atom value starting from 24th byte in the buffer
          var name = buf.unpackString(nameLen, 24);
          var pending_atom = this.pending_atoms[seq_num];
          if (!this.atoms[pending_atom]) {
              this.atom_names[pending_atom] = name;
              this.atoms[name] = pending_atom;
          }

          delete this.pending_atoms[seq_num];
          return name;
       }
   ],

   ChangeProperty: [
       // mode: 0 replace, 1 prepend, 2 append
       // format: 8/16/32
       function(mode, wid, name, type, units, data)
       {
          var padded4 = (data.length + 3) >> 2;
          var pad = new Buffer( (padded4<<2) - data.length);
          var format = 'CCSLLLCxxxLaa';
          var requestLength = 6 + padded4;
          var dataLenInFormatUnits = data.length / (units >> 3);
          return [format, [18, mode, requestLength, wid, name, type, units, dataLenInFormatUnits, data, pad] ];
       }
   ],

   // TODO: test
   DeleteProperty: [
       function(wid, prop) {
           return [ 'CxSLL', [19, 3, wid, prop] ];
       }
   ],

   GetProperty: [

       function(del, wid, name, type, longOffset, longLength) //  - offest and maxLength in 4-byte units
       {
           return [ 'CCSLLLLL', [20, del, 6, wid, name, type, longOffset, longLength ] ];
       },

       function(buf, format) {
           var res = buf.unpack('LLL');
           var prop = {};
           prop.type = res[0];
           prop.bytesAfter = res[1];
           var len = res[2]*(format >> 3)
           prop.data = buf.slice(24, 24+len);
           return prop;
       }
   ],

   ListProperties: [

       function(wid)
       {
          return ['CxSL', [21, 2, wid]];
       },

       function(buf) {
          var n = buf.unpack('S')[0];
          var i;
          var atoms = [];
          for(i=0; i < n; ++i) {
             atoms.push(buf.unpack('L', 24+4*i)[0]);
             //console.log([n, i, atoms]);
          }
          return atoms;
       }
   ],

   SetSelectionOwner: [
      function(owner, selection, time)
      {
          if (!time)
              time = 0; // current time
          return ['CxSLLL', [22, 4, owner, selection, time]];
      }
   ],

   GetSelectionOwner: [
      function(selection)
      {
          return ['CxSL', [23, 2, selection]];
      },

      function(buf) {
          return buf.unpack('L')[0];
      }
   ],

   ConvertSelection: [
      function(requestor, selection, target, property, time) {
          if (!time)
              time = 0;
          return ['CxSLLLLL', [24, 6, requestor, selection, target, property, time]];
      }
   ],

   SendEvent: [

       function(destination, propagate, eventMask, eventRawData)
       {
           return [ 'CCSLLa', [25, propagate, 11, destination, eventMask, eventRawData] ];
       }
   ],

   GrabPointer: [
       function(wid, ownerEvents, mask, pointerMode, keybMode, confineTo, cursor, time) {
           return [ 'CCSLSCCLLL', [ 26, ownerEvents, 6, wid, mask, pointerMode, keybMode,
                                    confineTo, cursor, time] ];
       },
       function(buf, status) {
           return status;
       }
   ],

   UngrabPointer: [
       function(time) {
           return [ 'CxSL', [ 27, 2, time] ];
       }
   ],

   GrabButton: [
       function(wid, ownerEvents, mask, pointerMode, keybMode, confineTo, cursor, button, modifiers) {
           return [ 'CCSLSCCLLCxS', [ 28, ownerEvents, 6, wid, mask, pointerMode, keybMode, confineTo,
                                      cursor, button, modifiers ] ];
       }
   ],

   UngrabButton: [
       function(wid, button, modifiers) {
           return [ 'CCSLSxx', [ 29, button, 3, wid, modifiers ] ];
       }
   ],

   ChangeActivePointerGrab: [
       function(cursor, time, mask) {
           return [ 'CxSLLSxx', [ 30, 4, cursor, time, mask ] ];
       }
   ],

   GrabKeyboard: [
       function(wid, ownerEvents, time, pointerMode, keybMode) {
           return [ 'CCSLLCCxx', [ 31, ownerEvents, 4, wid, time, pointerMode, keybMode ] ];
       },
       function(buf, status) {
           return status;
       }
   ],

   UngrabKeyboard: [
       function(time) {
           return [ 'CxSL', [ 32, 2, time ] ];
       }
   ],

   GrabKey: [
       function(wid, ownerEvents, modifiers, key, pointerMode, keybMode) {
           return [ 'CCSLSCCCxxx', [ 33, ownerEvents, 4, wid, modifiers, key, pointerMode, keybMode ] ];
       }
   ],

   UngrabKey: [
       function(wid, key, modifiers) {
           return [ 'CCSLSxx', [ 34, key, 3, wid, modifiers ] ];
       }
   ],
   
   AllowEvents: [
       function(mode, ts) {
           return [ 'CCSL', [ 35, mode, 2, ts ] ];
       }
   ],

   GrabServer: [
       [ 'CxS', [36, 1]]
   ],

   UngrabServer: [
       [ 'CxS', [37, 1]]
   ],

   QueryPointer: [
       [ 'CxSL', [38, 2] ],
       function(buf, sameScreen) {
           var res = buf.unpack('LLssssS');
           return {
               root: res[0],
               child: res[1],
               rootX: res[2],
               rootY: res[3],
               childX: res[4],
               childY: res[5],
               keyMask: res[6],
               sameScreen : sameScreen
           };
       }
   ],

   TranslateCoordinates: [
       function(srcWid, dstWid, srcX, srcY) {
           return [ 'CxSLLSS', [ 40, 4, srcWid, dstWid, srcX, srcY ] ];
       },
       function(buf, sameScreen)
       {
           var res = buf.unpack('Lss');
           var ext = {};
           ext.child = res[0];
           ext.destX = res[1];
           ext.destY = res[2];
           ext.sameScreen = sameScreen;
           return ext;
       }
   ],

   WarpPointer: [

      function (srcWin, dstWin, srcX, srcY, srcWidth, srcHeight, dstX, dstY)
      {
          return [ 'CxSLLssSSss', [41, 6, srcWin, dstWin, srcX, srcY, srcWidth, srcHeight, dstX, dstY] ];
      }
   ],

   SetInputFocus: [

      function (wid, revertTo) // revertTo: 0 - None, 1 - PointerRoot, 2 - Parent
      {
          return [ 'CCSLL', [42, revertTo, 3, wid, 0] ];
      }
   ],

   GetInputFocus: [
       function() {
           return [ 'CxS', [ 43, 1 ] ];
       },
       function(buf, revertTo)
       {
           return {
               focus : buf.unpack('L')[0],
               revertTo : revertTo
           };
       }
   ],

   OpenFont: [
       function(name,fid) {
           var padded = xutil.padded_string(name);
           return ['CxSLSxxa', [45, 3+padded.length/4, fid, name.length, padded] ];
       }    
   ],

   // @blab+
   QueryTextExtents: [
       function(str,fid) {
          var n = str.length, p = (n % 2) == 1;
//console.log('QueryTextExtents',str,fid,n,p,p?2+(2*n+2)/4:2+(2*n)/4);
          return p?['CCSLAS', [48, 1,  2+(2*n+2)/4, fid, str, 0] ]:['CCSLA', [48, 0,  2+(2*n)/4, fid, str] ];
       },
       function(buf) {
// console.log('QueryTextExtents',buf,buf.length); 
          return { 
            width:buf.unpack('SSSSLLL')[4] 
          };     
       }
   ],

   // @blab+
   QueryFont: [
       function(fid) {
          return ['CCSL', [47, 0,  2, fid] ];
       },
       function(buf) {
// console.log('QueryFont',buf,buf.length);
        var offset = 0;
        var minbounds = {
            leftSideBearing   : buf.readInt16LE(offset),
            rightSideBearing  : buf.readInt16LE(offset+2),
            width       : buf.readInt16LE(offset+4),
            ascent      : buf.readInt16LE(offset+6),
            descent     : buf.readInt16LE(offset+8),
            attributes  : buf.readInt16LE(offset+10)
          }
        offset += 12;
        offset += 4;
        var maxbounds = {
            leftSideBearing   : buf.readInt16LE(offset),
            rightSideBearing  : buf.readInt16LE(offset+2),
            width       : buf.readInt16LE(offset+4),
            ascent      : buf.readInt16LE(offset+6),
            descent     : buf.readInt16LE(offset+8),
            attributes  : buf.readInt16LE(offset+10)
          }
        
        offset += 12;
        offset += 4;
        buf = buf.slice(offset);
        var desc1 =  buf.unpack('SSSSCCCCSSL');
//console.log(desc1);
        offset = 20;
        var props = [];
        for (var i=0;i<desc1[3];i++) {
          var name  = buf.readUInt32LE(offset),
              value = buf.readUInt32LE(offset+4);
          offset += 8;
          props.push({name:name,value:value})
        }        
//console.log(props)
//console.log(buf.length-offset,offset,desc1[10]*12)
        var charinfo = [];
        for (var i=0;i<desc1[10];i++) {
          var chardesc = {
            leftSideBearing   : buf.readInt16LE(offset),
            rightSideBearing  : buf.readInt16LE(offset+2),
            width       : buf.readInt16LE(offset+4),
            ascent      : buf.readInt16LE(offset+6),
            descent     : buf.readInt16LE(offset+8),
            attributes  : buf.readInt16LE(offset+10)
          }
          offset += 12;
          charinfo.push(chardesc)
        }        
//console.log(charinfo)   
/*
     offset=0:
     12     CHARINFO                       min-bounds
     4                                     unused
     12     CHARINFO                       max-bounds
     4                                     unused
     2     CARD16                          min-char-or-byte2
     2     CARD16                          max-char-or-byte2
     2     CARD16                          default-char
     2     n                               number of FONTPROPs in properties
     1                                     draw-direction
          0     LeftToRight
          1     RightToLeft
     1     CARD8                           min-byte1
     1     CARD8                           max-byte1
     1     BOOL                            all-chars-exist
     2     INT16                           font-ascent
     2     INT16                           font-descent
     4     m                               number of CHARINFOs in char-infos
     8n     LISTofFONTPROP                 properties
     12m     LISTofCHARINFO                char-infos

  FONTPROP
     4     ATOM                            name
     4     <32-bits>                 value

  CHARINFO
     2     INT16                           left-side-bearing
     2     INT16                           right-side-bearing
     2     INT16                           character-width
     2     INT16                           ascent
     2     INT16                           descent
     2     CARD16                          attributes
*/
        return {
          minbounds : minbounds,
          maxbounds : maxbounds,
          minchar : desc1[0],
          maxchar : desc1[1],
          ascent  : desc1[8], 
          descent : desc1[9],
          properties : props,
          charinfo:charinfo,
        }

      }
   ],
   
   ListFonts: [
      function(pattern, max)
      {
          var req_len = 2+xutil.padded_length(pattern.length)/4;
          return [ 'CxSSSp', [49, req_len, max, pattern.length, pattern] ];
      },

      function(buf) {
          console.log(buf);
          // TODO: move to buffer.unpackStringList
          var res = [];
          var off = 24;
          while (off < buf.length)
          {
              var len = buf[off++];
              if (len == 0)
                  break;
              if (off + len > buf.length)
              {
                  len = buf.length - off;
                  if (len <= 0)
                     break;
              }
              res.push(buf.unpackString(len, off));
              off += len;
          }
          return res;
      }
   ],

   CreatePixmap: [
       function(pid, drawable, depth, width, height) {
          return [ 'CCSLLSS', [53, depth, 4, pid, drawable, width, height] ];
       }
   ],

   FreePixmap: [
      function (pixmap) {
          return [ 'CxSL', [54, 2, pixmap] ];
      }
   ],

   CreateCursor: [
       function(cid, source, mask, foreRGB, backRGB, x, y) {
          foreR = foreRGB.R
          foreG = foreRGB.G
          foreB = foreRGB.B

          backR = backRGB.R
          backG = backRGB.G
          backB = backRGB.B
          return [ 'CxSLLLSSSSSSSS', [93, 8, cid, source, mask, foreR, foreG, foreB, backR, backG, backB, x, y] ];
       }
   ],

   // opcode 55
   CreateGC: [
       function(cid, drawable, values) {
           var format = 'CxSLLL';
           var vals = packValueMask('CreateGC', values);
           var packetLength = 4 + (values ? vals[2].length : 0);
           var args = [55, packetLength, cid, drawable];
           format += vals[0]
           args.push(vals[1]);     // values bitmask
           args = args.concat(vals[2])
           return [format, args];
        }
   ],

   ChangeGC: [
       function(cid, values) {
           var format = 'CxSLL';
           var vals = packValueMask('CreateGC', values);
           var packetLength = 3 + (values ? vals[2].length : 0);
           var args = [56, packetLength, cid];
           format += vals[0]
           args.push(vals[1]);     // values bitmask
           args = args.concat(vals[2])
           return [format, args];
        }
   ],

   ClearArea: [
       function(wid, x, y, width, height, exposures) {
          return [ 'CCSLssSS', [61, exposures, 4, wid, x, y, width, height] ];
       }
   ],

   //
   CopyArea: [
       function(srcDrawable, dstDrawable, gc, srcX, srcY, dstX, dstY, width, height) {
          return [ 'CxSLLLssssSS', [62, 7, srcDrawable, dstDrawable, gc, srcX, srcY, dstX, dstY, width, height] ];
       }
   ],


   PolyPoint: [
       function(coordMode, drawable, gc, points)
       {
          var format = 'CCSLL';
          var args = [64, coordMode, 3+points.length/2, drawable, gc];
          for (var i=0; i < points.length; ++i)
          {
              format += 'S';
              args.push(points[i]);
          }
          return [format, args];
       }
   ],

   PolyLine: [
       // TODO: remove copy-paste - exectly same as PolyPoint, only differ with opcode
       function(coordMode, drawable, gc, points)
       {
          var format = 'CCSLL';
          var args = [65, coordMode, 3+points.length/2, drawable, gc];
          for (var i=0; i < points.length; ++i)
          {
              format += 'S';
              args.push(points[i]);
          }
          return [format, args];
       }

   ],

   PolyRectangle: [
      function(drawable, gc, coords) { // x1, y1, w1, h1, x2, y2, w2, h2...
          var format = 'CxSLL';
          var numrects4bytes = coords.length/2;
          var args = [67, 3+numrects4bytes, drawable, gc];
          for (var i=0; i < coords.length; ++i)
          {
              format += 'S';
              args.push(coords[i]);
          }
          return [format, args];
      }
   ],

   PolyArc: [
      function(drawable, gc, coords) { // x1, y1, w1, h1, a11, a12, ...
          var format = 'CxSLL';
          var numrects4bytes = coords.length/2;
          var args = [68, 3+numrects4bytes, drawable, gc];
          for (var i=0; i < coords.length; ++i)
          {
              format += 'S';
              args.push(coords[i]);
          }
          return [format, args];
      }
   ],

   FillPoly: [
       // TODO: remove copy-paste - exectly same as PolyPoint, only differ with opcode
       function(drawable, gc, shape, coordMode, points)
       {
          var format = 'CxSLLCCxx';
          var args = [69, 4+points.length/2, drawable, gc, shape, coordMode];
          for (var i=0; i < points.length; ++i)
          {
              format += 'S';
              args.push(points[i]);
          }
          return [format, args];
       }

   ],

   PolyFillRectangle: [
      function(drawable, gc, coords) { // x1, y1, w1, h1, x2, y2, w2, h2...
          var format = 'CxSLL';
          var numrects4bytes = coords.length/2;
          var args = [70, 3+numrects4bytes, drawable, gc];
          for (var i=0; i < coords.length; ++i)
          {
              format += 'S';
              args.push(coords[i]);
          }
          return [format, args];
      }
   ],

   PolyFillArc: [
      function(drawable, gc, coords) { // x1, y1, w1, h1, a11, a12, ...
          var format = 'CxSLL';
          var numrects4bytes = coords.length/2;
          var args = [71, 3+numrects4bytes, drawable, gc];
          for (var i=0; i < coords.length; ++i)
          {
              format += 'S';
              args.push(coords[i]);
          }
          return [format, args];
      }
   ],


   PutImage: [
      // format:  0 - Bitmap, 1 - XYPixmap, 2 - ZPixmap
      function(format, drawable, gc, width, height, dstX, dstY, leftPad, depth, data) {
          var padded = xutil.padded_length(data.length);
          var reqLen = 6 + padded/4; // (length + 3) >> 2 ???
          var padLength = padded - data.length;
          var pad = new Buffer(padLength); // TODO: new pack format 'X' - skip amount of bytes supplied in numerical argument

          // TODO: move code to calculate reqLength and use BigReq if needed outside of corereq.js
          // NOTE: big req is used here (first 'L' in format, 0 and +1 in params), won't work if not enabled
          return [ 'CCSLLLSSssCCxxaa', [72, format, 0, 1+reqLen, drawable, gc, width, height, dstX, dstY, leftPad, depth, data, pad]];
      }
   ],

   GetImage: [
       function(format, drawable, x, y, width, height, planeMask)
       {
           return [ 'CCSLssSSL', [73, format, 5, drawable, x, y, width, height, planeMask]];
       },
       function(buf, depth)
       {
           var visualId = buf.unpack('L')[0];
           return {
               depth: depth,
               visualId: visualId,
               data: buf.slice(24)
           };
       }
   ],

   PolyText8: [
       function(drawable, gc, x, y, items) {
          var format = 'CxSLLss';
          var numItems = items.length;
          var reqLen = 16;
          var args = [74, 0, drawable, gc, x, y];
          for (var i=0; i < numItems; ++i)
          {
              var it = items[i];
              if (typeof it == 'string')
              {
                  if (it.length > 254) // TODO: split string in set of items
                      throw 'not supported yet';
                  format += 'CCa';
                  args.push(it.length);
                  args.push(0); // delta???
                  args.push(it);
                  reqLen += 2 + it.length;
              } else {
                  throw 'not supported yet';
              }
          }
          var len4 = xutil.padded_length(reqLen)/4;
          var padLen = len4*4 - reqLen;
          args[1] = len4; // set request length to calculated value
          var pad = '';
          for (var i=0; i < padLen; ++i)
             pad += String.fromCharCode(0);
          format += 'a';
          args.push(pad);
          return [format, args];
       }
   ],

   CreateColormap:
   [
       function(cmid, wid, vid, alloc)
       {
           return ['CCSLLL', [78, alloc, 4, cmid, wid, vid]];
       }
   ],

   AllocColor: [
       [ 'CxSLSSSxx', [84, 4] ], // params: colormap, red, green, blue

       function(buf) {
	   var res = buf.unpack('SSSxL');
           var color = {};
           color.red   = res[0];
           color.blue  = res[1];
           color.green = res[2];
           color.pixel = res[3]>>8; // it looks like 3 first bytes contain RGB value in response
           return color;
       }
   ],
   
   QueryExtension: [
       function(name) {
           var padded = xutil.padded_string(name);
           return ['CxSSxxa', [98, 2+padded.length/4, name.length, padded] ];
       },

       function(buf) {
	   var res = buf.unpack('CCCC');
           var ext = {};
           ext.present = res[0];
           ext.majorOpcode = res[1];
           ext.firstEvent = res[2];
           ext.firstError = res[3];
           return ext;
       }

   ],

   ListExtensions: [
       [ 'CxS', [99, 1] ],

       function(buf) {
          // TODO: move to buffer.unpackStringList
          var res = [];
          var off = 24;
          while (off < buf.length)
          {
              var len = buf[off++];
              if (len == 0)
                  break;
              if (off + len > buf.length)
              {
                  len = buf.length - off;
                  if (len <= 0)
                     break;
              }
              res.push(buf.unpackString(len, off));
              off += len;
          }
          return res;
       }
   ],

   GetKeyboardMapping: [
       function(startCode, num) {
           return [ 'CxSCCxx', [101, 2, startCode, num] ]
       },
       function(buff, listLength) {
           var res = [];
           var format = '';
           for (var i=0; i < listLength; ++i)
               format += 'L';
           for (var offset=24; offset < buff.length - 4*listLength; offset += 4*listLength)
                res.push(buff.unpack(format, offset));
           return res;
       }
   ],

        // todo: move up to keep reque
	GetGeometry: [
		function(drawable){
			return ['CxSL', [14, 2, drawable]]
		},
		function(buff, depth)
		{
			var res = buff.unpack('LssSSSx');
			var ext = {};
			ext.windowid = res[0]
			ext.xPos = res[1];
			ext.yPos = res[2];
			ext.width = res[3];
			ext.height = res[4];
			ext.borderWidth = res[5];
			ext.depth = depth;
			return ext;
		}
   ],

   KillClient: [
       function(resource) {
           return [ 'CxSL', [113, 2, resource] ];
       }
   ],

   SetScreenSaver: [
       function(timeout, interval, preferBlanking, allowExposures) {
           return [ 'CxSssCCxx', [107, 3, timeout, interval, preferBlanking, allowExposures]];
       }
   ],

   ForceScreenSaver: [
       function(activate) {
           return [ 'CCS', [115, activate?1:0, 1] ];
       }
   ]
};

templates.KillKlient = templates.KillClient;

module.exports = templates;
};
BundleModuleCode['x11/core/stdatoms']=function (module,exports,global,process){
// pre-defined atoms. generated automatically with genstdatoms.js

module.exports = {
    PRIMARY: 1,
    SECONDARY: 2,
    ARC: 3,
    ATOM: 4,
    BITMAP: 5,
    CARDINAL: 6,
    COLORMAP: 7,
    CURSOR: 8,
    CUT_BUFFER0: 9,
    CUT_BUFFER1: 10,
    CUT_BUFFER2: 11,
    CUT_BUFFER3: 12,
    CUT_BUFFER4: 13,
    CUT_BUFFER5: 14,
    CUT_BUFFER6: 15,
    CUT_BUFFER7: 16,
    DRAWABLE: 17,
    FONT: 18,
    INTEGER: 19,
    PIXMAP: 20,
    POINT: 21,
    RECTANGLE: 22,
    RESOURCE_MANAGER: 23,
    RGB_COLOR_MAP: 24,
    RGB_BEST_MAP: 25,
    RGB_BLUE_MAP: 26,
    RGB_DEFAULT_MAP: 27,
    RGB_GRAY_MAP: 28,
    RGB_GREEN_MAP: 29,
    RGB_RED_MAP: 30,
    STRING: 31,
    VISUALID: 32,
    WINDOW: 33,
    WM_COMMAND: 34,
    WM_HINTS: 35,
    WM_CLIENT_MACHINE: 36,
    WM_ICON_NAME: 37,
    WM_ICON_SIZE: 38,
    WM_NAME: 39,
    WM_NORMAL_HINTS: 40,
    WM_SIZE_HINTS: 41,
    WM_ZOOM_HINTS: 42,
    MIN_SPACE: 43,
    NORM_SPACE: 44,
    MAX_SPACE: 45,
    END_SPACE: 46,
    SUPERSCRIPT_X: 47,
    SUPERSCRIPT_Y: 48,
    SUBSCRIPT_X: 49,
    SUBSCRIPT_Y: 50,
    UNDERLINE_POSITION: 51,
    UNDERLINE_THICKNESS: 52,
    STRIKEOUT_ASCENT: 53,
    STRIKEOUT_DESCENT: 54,
    ITALIC_ANGLE: 55,
    X_HEIGHT: 56,
    QUAD_WIDTH: 57,
    WEIGHT: 58,
    POINT_SIZE: 59,
    RESOLUTION: 60,
    COPYRIGHT: 61,
    NOTICE: 62,
    FONT_NAME: 63,
    FAMILY_NAME: 64,
    FULL_NAME: 65,
    CAP_HEIGHT: 66,
    WM_CLASS: 67,
    WM_TRANSIENT_FOR: 68
}};
BundleModuleCode['x11/core/eventmask']=function (module,exports,global,process){
module.exports.eventMask = {
    KeyPress: 0x00000001,
    KeyRelease: 0x00000002,
    ButtonPress: 0x00000004,
    ButtonRelease: 0x00000008,
    EnterWindow: 0x00000010,
    LeaveWindow: 0x00000020,
    PointerMotion: 0x00000040,
    PointerMotionHint: 0x00000080,
    Button1Motion: 0x00000100,
    Button2Motion: 0x00000200,
    Button3Motion: 0x00000400,
    Button4Motion: 0x00000800,
    Button5Motion: 0x00001000,
    ButtonMotion: 0x00002000,
    KeymapState: 0x00004000,
    Exposure: 0x00008000,
    VisibilityChange: 0x00010000,
    StructureNotify: 0x00020000,
    ResizeRedirect: 0x00040000,
    SubstructureNotify: 0x00080000,
    SubstructureRedirect: 0x00100000,
    FocusChange: 0x00200000,
    PropertyChange: 0x00400000,
    ColormapChange: 0x00800000,
    OwnerGrabButton: 0x01000000
    // TODO: add more names for common masks combinations
}

// event.type number
module.exports.eventNumber = module.exports.eventType = {
  KeyPress: 2,
  KeyRelease: 3,
  ButtonPress: 4,
  ButtonRelease: 5,
  MotionNotify: 6,
  Expose: 12,  
  // TODO More events: 
    // EnterNotify: ,
    // LeaveNotify: ,
    // FocusIn: ,
    // FocusOut: ,
    // KeymapNotify: ,
    // Expose: ,
    // GraphicsExpose: ,
    // VisibilityNotify: ,
    // CreateNotify: ,
    // DestroyNotify: ,
    // MapNotify: ,
    // MapRequest: ,
    // ReparentNotify: ,
    // ConfigureNotify: ,
    // ConfigureRequest: ,
    // GravityNotify: ,
    // ResizeRequest: ,
    // CirculateNotify: ,
    // CirculateRequest: ,
    // PropertyNotify: ,
    // SelectionClear: ,
    // SelectionRequest: ,
    // SelectionNotify: ,
    // ColormapNotify: ,
    // ClientMessage: ,
    // MappingNotify: 
}
};
BundleModuleCode['x11/core/ext/apple-wm']=function (module,exports,global,process){
// http://www.xfree86.org/current/AppleWM.3.html
// http://opensource.apple.com/source/X11server/X11server-106.3/Xquartz/xorg-server-1.10.2/hw/xquartz/applewm.c
// /usr/X11/include/X11/extensions/applewm.h

var x11 = Require('x11/core/x11');
var xutil = Require('x11/core/xutil');
// TODO: move to templates

/*
#define X_AppleWMFrameGetRect           1
#define X_AppleWMFrameHitTest           2
#define X_AppleWMFrameDraw              3
#define X_AppleWMDisableUpdate          4
#define X_AppleWMReenableUpdate         5
#define X_AppleWMSetWindowMenuCheck     7
#define X_AppleWMSetWindowMenu          11
#define X_AppleWMSendPSN                12
#define X_AppleWMAttachTransient        13
*/

exports.requireExt = function(display, callback)
{
    var X = display.client;
    X.QueryExtension('Apple-WM', function(err, ext) {

        if (!ext.present)
            callback(new Error('extension not available'));

        ext.QueryVersion = function(cb)
        {
            X.seq_num++;
            X.pack_stream.pack('CCS', [ext.majorOpcode, 0, 1]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('SSL');
                    return res;
                },
                cb
            ];
            X.pack_stream.flush();
        }

        ext.FrameRect = {
            Titlebar: 1,
            Tracking: 2,
            Growbox: 3
        };

        ext.FrameGetRect = function(frame_class, frame_rect, ix, iy, iw, ih, ox, oy, ow, oh, cb)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSSSSSSSSSSS', [ext.majorOpcode, 1, 6, frame_class, frame_rect, ix, iy, iw, ih, ox, oy, ow, oh, cb]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('SSSS');
                    return {
                        x: res[0],
                        y: res[1],
                        w: res[2],
                        h: res[3]
                    };
                },
                cb
            ];
            X.pack_stream.flush();
        }

        ext.FrameHitTest = function(frame_class, px, py, ix, iy, iw, ih, ox, oy, ow, oh, cb)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSSxxSSSSSSSSSS', [ext.majorOpcode, 2, 7, frame_class, px, py, ix, iy, iw, ih, ox, oy, ow, oh]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('L');
                    return res[0];
                },
                cb
            ];
            X.pack_stream.flush();
        }


// from /usr/include/Xplugin.h
        ext.FrameClass = {
            DecorLarge: 1,
            Reserved1: 2,
            Reserved2: 4,
            Reserved3: 8,
            DecorSmall: 16,
            Reserved5: 32,
            Reserved6: 64,
            Reserved8: 128,
            Managed: 1<<15,
            Transient: 1<<16,
            Stationary: 1<<17
        };

        ext.FrameAttr = {
            Active:   1,
            Urgent:   2,
            Title:    4,
            Prelight: 8,
            Shaded:  16,
            CloseBox: 0x100,
            Collapse: 0x200,
            Zoom:     0x400,
            CloseBoxClicked: 0x800,
            CollapseBoxClicked: 0x1000,
            ZoomBoxClicked: 0x2000,
            GrowBox: 0x4000
        };

        ext.FrameDraw = function(screen, window, frameClass, attr, ix, iy, iw, ih, ox, oy, ow, oh, title)
        {
            X.seq_num++;
            var titleReqWords = xutil.padded_length(title.length)/4;
            X.pack_stream.pack('CCSLLSSSSSSSSSSLp', [ext.majorOpcode, 3, 9+titleReqWords, screen, window, frameClass, attr, ix, iy, iw, ih, ox, oy, ow, oh, title.length, title]);
            X.pack_stream.flush();
        }

        ext.NotifyMask = {
            Controller: 1,
            Activation: 2,
            Pasteboard: 4,
            All: 7
        };

// TODO: decode events
/*
#define AppleWMMinimizeWindow           0
#define AppleWMZoomWindow               1
#define AppleWMCloseWindow              2
#define AppleWMBringAllToFront          3
#define AppleWMHideWindow               4
#define AppleWMHideAll                  5
#define AppleWMShowAll                  6
#define AppleWMWindowMenuItem           9
#define AppleWMWindowMenuNotify         10
#define AppleWMNextWindow               11
#define AppleWMPreviousWindow           12

#define AppleWMIsActive                 0
#define AppleWMIsInactive               1
#define AppleWMReloadPreferences        2

#define AppleWMCopyToPasteboard         0
*/

        ext.SelectInput = function(mask)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 6, 2, mask]);
            X.pack_stream.flush();
        }

        ext.SetFrontProcess = function()
        {
            X.seq_num++;
            X.pack_stream.pack('CCS', [ext.majorOpcode, 8, 1]);
            X.pack_stream.flush();
        }

        ext.WindowLevel = {
            Normal: 0,
            Floating: 1,
            TornOff: 2,
            Dock: 3,
            Desktop: 4
        };

        ext.SetWindowLevel = function(window, level)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 9, 3, window, level]);
            X.pack_stream.flush();
        }

        ext.CanQuit = function(state)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSCxxx', [ext.majorOpcode, 10, 2, state]);
            X.pack_stream.flush();
        }

        // shortcut is single-byte ASCII (optional, 0=no shortcut)
        // items example: [ 'item1', 'some item', ['C', 'item with C shortcut'] ]
        ext.SetWindowMenu = function(items)
        {
           var reqlen = 8;
           var extlength = 0;
           items.forEach(function(i) {

           });
        }

        // https://developer.apple.com
        //    /library/mac/documentation/Carbon/Reference/Process_Manager/Reference/reference.html#//apple_ref/doc/c_ref/ProcessSerialNumber
        ext.SendPSN = function(hi, lo)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 12, 3, hi, lo]);
            X.pack_stream.flush();
        }

        ext.AttachTransient = function(child, parent)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 13, 3, child, parent]);
            X.pack_stream.flush();
        }

        callback(null, ext);
        /*
        ext.QueryVersion(function(err, vers) {
            ext.major = vers[0];
            ext.minor = vers[1];
            ext.patch = vers[2];
            callback(null, ext);
        });
        */

        ext.events = {
            AppleWMControllerNotify: 0,
            AppleWMActivationNotify: 1,
            AppleWMPasteboardNotify: 2,
        }

        ext.EventKind = {
          Controller: {
            MinimizeWindow: 0,
            ZoomWindow: 1,
            CloseWindow: 2,
            BringAllToFront: 3,
            WideWindow: 4,
            HideAll: 5,
            ShowAll: 6,
            WindowMenuItem: 9,
            WindowMenuNotify: 10,
            NextWindow: 11,
            PreviousWindow: 12
          },
          Activation: {
            IsActive: 0,
            IsInactive:1,
            ReloadPreferences: 2
          },
          Pasteboard: {
            CopyToPasteboard: 0
          }
        };

        X.eventParsers[ext.firstEvent + ext.events.AppleWMControllerNotify] =
        X.eventParsers[ext.firstEvent + ext.events.AppleWMActivationNotify] =
        X.eventParsers[ext.firstEvent + ext.events.AppleWMPasteboardNotify] = function(type, seq, extra, code, raw)
        {
            var event = {};
            switch(type) {
                case ext.firstEvent + ext.events.AppleWMControllerNotify: event.name = 'AppleWMControllerNotify'; break;
                case ext.firstEvent + ext.events.AppleWMActivationNotify: event.name = 'AppleWMActivationNotify'; break;
                case ext.firstEvent + ext.events.AppleWMPasteboardNotify: event.name = 'AppleWMPasteboardNotify'; break;
            }
            event.type = code;
            event.time = extra;
            event.arg = raw.unpack('xxL')[0];
            return event;
        };


    });
}
};
BundleModuleCode['x11/core/x11']=function (module,exports,global,process){
// Was index.js

var core = Require('x11/core/xcore');
var em = Require('x11/core/eventmask').eventMask;
var et = Require('x11/core/eventmask').eventType;
var server = Require('x11/core/xserver');
var pixmap = Require('x11/core/pixmap');

module.exports.createClient = core.createClient;
module.exports.createServer = server.createServer;
module.exports.eventMask = em;
module.exports.eventNumber = et;
module.exports.eventType = et;
module.exports.pixmap = pixmap;

Object.defineProperty(module.exports, 'keySyms', {
  enumerable: true,
  get: function() { return Require('x11/core/keysyms'); }
});

Object.defineProperty(module.exports, 'gcFunction', {
  enumerable: true,
  get: function() { return Require('x11/core/gcfunction'); }
});

//TODO:
// keepe everything in namespace for consistensy (eventMask, keySyms, class, destination ...
// or put most used constants to top namespace? (currently class and destination in top) 

// basic constants

// class
module.exports.CopyFromParent = 0;
module.exports.InputOutput = 1;
module.exports.InputOnly = 2;

// destination 
module.exports.PointerWindow = 0;
module.exports.InputFocus = 1;


// TODO
module.exports.bitGravity = {
};

module.exports.winGravity = {
};

// Execute a sequential block using a next function
// block([function () {todo; next(args)}, function () {todo(function () {next(args)}}])

module.exports.block = function (block) {
  var i=0,len=block.length;
  if (len==0) return;
  function next(arg1,arg2,arg3,arg4,arg5,arg6) {
    i++;
    if (i<len) block[i](next,arg1,arg2,arg3,arg4,arg5,arg6);
  }
  block[0](next);
}
};
BundleModuleCode['x11/core/ext/big-requests']=function (module,exports,global,process){
// http://www.x.org/releases/X11R7.6/doc/bigreqsproto/bigreq.html

// TODO: move to templates
exports.requireExt = function(display, callback)
{
    var X = display.client;
    X.QueryExtension('BIG-REQUESTS', function(err, ext) {

        if (!ext.present)
            return callback(new Error('extension not available'));

        ext.Enable = function( cb )
        {
            X.seq_num++;
            X.pack_stream.pack('CCS', [ext.majorOpcode, 0, 1]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    return buf.unpack('L')[0];
                },
                cb
            ];
            X.pack_stream.flush();
        }
        callback(null, ext);
    });
}
};
BundleModuleCode['x11/core/ext/composite']=function (module,exports,global,process){
// /usr/share/doc/x11proto-composite-dev/compositeproto.txt.gz
// http://cgit.freedesktop.org/xorg/proto/compositeproto/plain/compositeproto.txt
//
// /usr/include/X11/extensions/Xcomposite.h       Xlib
// /usr/include/X11/extensions/composite.h        constants
// /usr/include/X11/extensions/compositeproto.h   structs
//
// http://ktown.kde.org/~fredrik/composite_howto.html
//
// server side source:
//     http://cgit.freedesktop.org/xorg/xserver/tree/composite/compext.c
//

var x11 = Require('x11/core/x11');
// TODO: move to templates

exports.requireExt = function(display, callback)
{
    var X = display.client;
    X.QueryExtension('Composite', function(err, ext) {

        if (!ext.present)
            return callback(new Error('extension not available'));

        ext.Redirect = {
            Automatic: 0,
	    Manual: 1
        };

        ext.QueryVersion = function(clientMaj, clientMin, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 0, 3, clientMaj, clientMin]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('LL');
                    return res;
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.RedirectWindow = function( window, updateType )
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLCxxx', [ext.majorOpcode, 1, 3, window, updateType]);
            X.pack_stream.flush();
        }

        ext.RedirectSubwindows = function( window, updateType )
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLCxxx', [ext.majorOpcode, 2, 3, window, updateType]);
            X.pack_stream.flush();
        }

        ext.UnredirectWindow = function(window)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 3, 2, window]);
            X.pack_stream.flush();
        }

        ext.UnredirectSubwindows = function(window)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 4, 2, window]);
            X.pack_stream.flush();
        }

        ext.CreateRegionFromBorderClip = function(region, window)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 5, 3, damage, region]);
            X.pack_stream.flush();
        }

        ext.NameWindowPixmap = function(window, pixmap)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 6, 3, window, pixmap]);
            X.pack_stream.flush();
        }

        ext.GetOverlayWindow = function(window, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 7, 2, window]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('L');
                    return res[0];
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.ReleaseOverlayWindow = function(window)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 8, 2, window]);
            X.pack_stream.flush();
        }

        // currently version 0.4 TODO: bump up with coordinate translations
        ext.QueryVersion(0, 4, function(err, vers) {
            if (err)
                return callback(err);

            ext.major = vers[0];
            ext.minor = vers[1];
            callback(null, ext);
        });
    });
}
};
BundleModuleCode['x11/core/ext/damage']=function (module,exports,global,process){
// http://www.x.org/releases/X11R7.6/doc/damageproto/damageproto.txt

var x11 = Require('x11/core/x11');
// TODO: move to templates

exports.requireExt = function(display, callback)
{
    var X = display.client;
    X.QueryExtension('DAMAGE', function(err, ext) {

        if (!ext.present)
            return callback(new Error('extension not available'));

        ext.ReportLevel	= {
            RawRectangles: 0,
	    DeltaRectangles: 1,
            BoundingBox: 2,
            NonEmpty: 3
        };

        ext.QueryVersion = function(clientMaj, clientMin, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 0, 3, clientMaj, clientMin]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('LL');
                    return res;
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.Create = function( damage, drawable, reportlevel )
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLLCxxx', [ext.majorOpcode, 1, 4, damage, drawable, reportlevel]);
            X.pack_stream.flush();
        }

        ext.Destroy = function( damage )
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 2, 3, damage]);
            X.pack_stream.flush();
        }

        ext.Subtract = function(damage, repair, parts)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLLL', [ext.majorOpcode, 3, 4, damage, repair, parts]);
            X.pack_stream.flush();
        }

        ext.Add = function(damage, region)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 4, 3, damage, region]);
            X.pack_stream.flush();
        }

        ext.QueryVersion(1, 1, function(err, vers) {
            if (err)
                return callback(err);
            ext.major = vers[0];
            ext.minor = vers[1];
            callback(null, ext);
        });

        ext.events = {
            DamageNotify: 0
        }

        X.eventParsers[ext.firstEvent + ext.events.DamageNotify] = function(type, seq, extra, code, raw)
        {
            var event = {};
            event.level = code;
            event.seq = seq;
            event.drawable = extra;
            var values = raw.unpack('LLssSSssSS');
            event.damage = values[0];
            event.time = values[1];
            event.area = {
              x: values[2],
              y: values[3],
              w: values[4],
              h: values[5]
            };
            event.geometry = {
              x: values[6],
              y: values[7],
              w: values[8],
              h: values[9]
            };
            event.name = 'DamageNotify';
            return event;
        };
    });
}
};
BundleModuleCode['x11/core/ext/dpms']=function (module,exports,global,process){
// http://www.x.org/releases/X11R7.6/doc/xextproto/dpms.txt

var x11 = Require('x11/core/x11');
// TODO: move to templates
exports.requireExt = function(display, callback)
{
    var X = display.client;
    X.QueryExtension('DPMS', function(err, ext) {

        if (!ext.present)
            return callback(new Error('extension not available'));

        ext.GetVersion = function(clientMaj, clientMin, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSSS', [ext.majorOpcode, 0, 2, clientMaj, clientMin]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('SS');
                    return res;
                },
                callback
            ];
            X.pack_stream.flush();
        };

        ext.Capable = function(callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCS', [ext.majorOpcode, 1, 1]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('C');
                    return res;
                },
                callback
            ];
            X.pack_stream.flush();
        };

        ext.GetTimeouts = function(callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCS', [ext.majorOpcode, 2, 1]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('SSS');
                    return res;
                },
                callback
            ];
            X.pack_stream.flush();
        };

        ext.SetTimeouts = function(standby_t, suspend_t, off_t)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSSSSxx', [ext.majorOpcode, 3, 3, standby_t, suspend_t, off_t]);
            X.pack_stream.flush();
        };

        ext.Enable = function()
        {
            X.seq_num++;
            X.pack_stream.pack('CCS', [ext.majorOpcode, 4, 1]);
            X.pack_stream.flush();
        };

        ext.Disable = function()
        {
            X.seq_num++;
            X.pack_stream.pack('CCS', [ext.majorOpcode, 5, 1]);
            X.pack_stream.flush();
        };

        ext.ForceLevel = function(level) // 0 : On, 1 : Standby, 2 : Suspend, 3 : Off
        {
            X.seq_num++;
            X.pack_stream.pack('CCSSxx', [ext.majorOpcode, 6, 2, level]);
            X.pack_stream.flush();
        };

        ext.Info = function(callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCS', [ext.majorOpcode, 7, 1]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('SC');
                    return res;
                },
                callback
            ];
            X.pack_stream.flush();
        };

        callback(null, ext);
    });
};

};
BundleModuleCode['x11/core/ext/fixes']=function (module,exports,global,process){
// http://www.x.org/releases/X11R7.6/doc/fixesproto/fixesproto.txt

var x11 = Require('x11/core/x11');
// TODO: move to templates

function parse_rectangle(buf, pos) {
    if (!pos) {
        pos = 0;
    }

    return {
        x : buf[pos],
        y : buf[pos + 1],
        width : buf[pos + 2],
        height : buf[pos + 3]
    }
}

exports.requireExt = function(display, callback)
{
    var X = display.client;
    X.QueryExtension('XFIXES', function(err, ext) {

        if (!ext.present)
            return callback(new Error('extension not available'));

        ext.QueryVersion = function(clientMaj, clientMin, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 0, 3, clientMaj, clientMin]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('LL');
                    return res;
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.SaveSetMode = { Insert: 0, Delete: 1 };
        ext.SaveSetTarget = { Nearest: 0, Root: 1 };
        ext.SaveSetMap = { Map: 0, Unmap: 1 };

        ext.ChangeSaveSet = function(window, mode, target, map) {
            X.seq_num++;
            X.pack_stream.pack('CCSCCxL', [ext.majorOpcode, 1, 3, mode, target, map]);
            X.pack_stream.flush();
        };

        ext.WindowRegionKind = {
            Bounding : 0,
            Clip : 1
        };

        ext.CreateRegion = function(region, rects) {
            X.seq_num ++;
            var format = 'CCSL';
            format += Array(rects.length + 1).join('ssSS');
            var args = [ ext.majorOpcode, 5, 2 + (rects.length << 1), region ];
            rects.forEach(function(rect) {
                args.push(rect.x);
                args.push(rect.y);
                args.push(rect.width);
                args.push(rect.height);
            });

            X.pack_stream.pack(format, args);
            X.pack_stream.flush();
        }

        ext.CreateRegionFromWindow = function(region, wid, kind) {
            X.seq_num ++;
            X.pack_stream.pack('CCSLLCxxx', [ ext.majorOpcode, 7, 4, region, wid, kind ]);
            X.pack_stream.flush();
        }

        ext.DestroyRegion = function(region) {
            X.seq_num ++;
            X.pack_stream.pack('CCSL', [ ext.majorOpcode, 10, 2, region ]);
            X.pack_stream.flush();
        }

        ext.UnionRegion = function(src1, src2, dst) {
            X.seq_num ++;
            X.pack_stream.pack('CCSLLL', [ ext.majorOpcode, 13, 4, src1, src2, dst ]);
            X.pack_stream.flush();
        }

        ext.TranslateRegion = function(region, dx, dy) {
            X.seq_num ++;
            X.pack_stream.pack('CCSLss', [ ext.majorOpcode, 17, 3, region, dx, dy ]);
            X.pack_stream.flush();
        }

        ext.FetchRegion = function(region, cb) {
            X.seq_num ++;
            X.pack_stream.pack('CCSL', [ ext.majorOpcode, 19, 2, region ]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var n_rectangles = (buf.length - 24) >> 3;
                    var format = 'ssSSxxxxxxxxxxxxxxxx';
                    format += Array(n_rectangles + 1).join('ssSS');
                    var res = buf.unpack(format);
                    var reg = {
                        extents : parse_rectangle(res),
                        rectangles : []
                    };

                    for (var i = 0; i < n_rectangles; ++ i) {
                        reg.rectangles.push(parse_rectangle(res, 4 + (i << 2)));
                    }

                    return reg;
                },
                cb
            ];

            X.pack_stream.flush();
        }

        ext.QueryVersion(5, 0, function(err, vers) {
            if (err)
                return callback(err);
            ext.major = vers[0];
            ext.minor = vers[1];
            callback(null, ext);
        });

        ext.events = {
            DamageNotify: 0
        }

        X.eventParsers[ext.firstEvent + ext.events.DamageNotify] = function(type, seq, extra, code, raw)
        {
            var event = {};
            event.level = code;
            event.seq = seq;
            event.drawable = extra;
            var values = raw.unpack('LLssSSssSS');
            event.damage = values[0];
            event.time = values[1];
            event.area = {
              x: values[2],
              y: values[3],
              w: values[4],
              h: values[5]
            };
            event.geometry = {
              x: values[6],
              y: values[7],
              w: values[8],
              h: values[9]
            };
            event.name = 'DamageNotify';
            return event;
        };
    });
}
};
BundleModuleCode['x11/core/ext/glxconstants']=function (module,exports,global,process){
module.exports = {
    VERSION_1_1: 1,
    VERSION_1_2: 1,
    VERSION_1_3: 1,
    FALSE: 0x0,
    TRUE: 0x1,
    BYTE: 0x1400,
    UNSIGNED_BYTE: 0x1401,
    SHORT: 0x1402,
    UNSIGNED_SHORT: 0x1403,
    INT: 0x1404,
    UNSIGNED_INT: 0x1405,
    FLOAT: 0x1406,
    "2_BYTES": 0x1407,
    "3_BYTES": 0x1408,
    "4_BYTES": 0x1409,
    DOUBLE: 0x140A,
    POINTS: 0x0000,
    LINES: 0x0001,
    LINE_LOOP: 0x0002,
    LINE_STRIP: 0x0003,
    TRIANGLES: 0x0004,
    TRIANGLE_STRIP: 0x0005,
    TRIANGLE_FAN: 0x0006,
    QUADS: 0x0007,
    QUAD_STRIP: 0x0008,
    POLYGON: 0x0009,
    VERTEX_ARRAY: 0x8074,
    NORMAL_ARRAY: 0x8075,
    COLOR_ARRAY: 0x8076,
    INDEX_ARRAY: 0x8077,
    TEXTURE_COORD_ARRAY: 0x8078,
    EDGE_FLAG_ARRAY: 0x8079,
    VERTEX_ARRAY_SIZE: 0x807A,
    VERTEX_ARRAY_TYPE: 0x807B,
    VERTEX_ARRAY_STRIDE: 0x807C,
    NORMAL_ARRAY_TYPE: 0x807E,
    NORMAL_ARRAY_STRIDE: 0x807F,
    COLOR_ARRAY_SIZE: 0x8081,
    COLOR_ARRAY_TYPE: 0x8082,
    COLOR_ARRAY_STRIDE: 0x8083,
    INDEX_ARRAY_TYPE: 0x8085,
    INDEX_ARRAY_STRIDE: 0x8086,
    TEXTURE_COORD_ARRAY_SIZE: 0x8088,
    TEXTURE_COORD_ARRAY_TYPE: 0x8089,
    TEXTURE_COORD_ARRAY_STRIDE: 0x808A,
    EDGE_FLAG_ARRAY_STRIDE: 0x808C,
    VERTEX_ARRAY_POINTER: 0x808E,
    NORMAL_ARRAY_POINTER: 0x808F,
    COLOR_ARRAY_POINTER: 0x8090,
    INDEX_ARRAY_POINTER: 0x8091,
    TEXTURE_COORD_ARRAY_POINTER: 0x8092,
    EDGE_FLAG_ARRAY_POINTER: 0x8093,
    V2F: 0x2A20,
    V3F: 0x2A21,
    C4UB_V2F: 0x2A22,
    C4UB_V3F: 0x2A23,
    C3F_V3F: 0x2A24,
    N3F_V3F: 0x2A25,
    C4F_N3F_V3F: 0x2A26,
    T2F_V3F: 0x2A27,
    T4F_V4F: 0x2A28,
    T2F_C4UB_V3F: 0x2A29,
    T2F_C3F_V3F: 0x2A2A,
    T2F_N3F_V3F: 0x2A2B,
    T2F_C4F_N3F_V3F: 0x2A2C,
    T4F_C4F_N3F_V4F: 0x2A2D,
    MATRIX_MODE: 0x0BA0,
    MODELVIEW: 0x1700,
    PROJECTION: 0x1701,
    TEXTURE: 0x1702,
    POINT_SMOOTH: 0x0B10,
    POINT_SIZE: 0x0B11,
    POINT_SIZE_GRANULARITY: 0x0B13,
    POINT_SIZE_RANGE: 0x0B12,
    LINE_SMOOTH: 0x0B20,
    LINE_STIPPLE: 0x0B24,
    LINE_STIPPLE_PATTERN: 0x0B25,
    LINE_STIPPLE_REPEAT: 0x0B26,
    LINE_WIDTH: 0x0B21,
    LINE_WIDTH_GRANULARITY: 0x0B23,
    LINE_WIDTH_RANGE: 0x0B22,
    POINT: 0x1B00,
    LINE: 0x1B01,
    FILL: 0x1B02,
    CW: 0x0900,
    CCW: 0x0901,
    FRONT: 0x0404,
    BACK: 0x0405,
    POLYGON_MODE: 0x0B40,
    POLYGON_SMOOTH: 0x0B41,
    POLYGON_STIPPLE: 0x0B42,
    EDGE_FLAG: 0x0B43,
    CULL_FACE: 0x0B44,
    CULL_FACE_MODE: 0x0B45,
    FRONT_FACE: 0x0B46,
    POLYGON_OFFSET_FACTOR: 0x8038,
    POLYGON_OFFSET_UNITS: 0x2A00,
    POLYGON_OFFSET_POINT: 0x2A01,
    POLYGON_OFFSET_LINE: 0x2A02,
    POLYGON_OFFSET_FILL: 0x8037,
    COMPILE: 0x1300,
    COMPILE_AND_EXECUTE: 0x1301,
    LIST_BASE: 0x0B32,
    LIST_INDEX: 0x0B33,
    LIST_MODE: 0x0B30,
    NEVER: 0x0200,
    LESS: 0x0201,
    EQUAL: 0x0202,
    LEQUAL: 0x0203,
    GREATER: 0x0204,
    NOTEQUAL: 0x0205,
    GEQUAL: 0x0206,
    ALWAYS: 0x0207,
    DEPTH_TEST: 0x0B71,
    DEPTH_BITS: 0x0D56,
    DEPTH_CLEAR_VALUE: 0x0B73,
    DEPTH_FUNC: 0x0B74,
    DEPTH_RANGE: 0x0B70,
    DEPTH_WRITEMASK: 0x0B72,
    DEPTH_COMPONENT: 0x1902,
    LIGHTING: 0x0B50,
    LIGHT0: 0x4000,
    LIGHT1: 0x4001,
    LIGHT2: 0x4002,
    LIGHT3: 0x4003,
    LIGHT4: 0x4004,
    LIGHT5: 0x4005,
    LIGHT6: 0x4006,
    LIGHT7: 0x4007,
    SPOT_EXPONENT: 0x1205,
    SPOT_CUTOFF: 0x1206,
    CONSTANT_ATTENUATION: 0x1207,
    LINEAR_ATTENUATION: 0x1208,
    QUADRATIC_ATTENUATION: 0x1209,
    AMBIENT: 0x1200,
    DIFFUSE: 0x1201,
    SPECULAR: 0x1202,
    SHININESS: 0x1601,
    EMISSION: 0x1600,
    POSITION: 0x1203,
    SPOT_DIRECTION: 0x1204,
    AMBIENT_AND_DIFFUSE: 0x1602,
    COLOR_INDEXES: 0x1603,
    LIGHT_MODEL_TWO_SIDE: 0x0B52,
    LIGHT_MODEL_LOCAL_VIEWER: 0x0B51,
    LIGHT_MODEL_AMBIENT: 0x0B53,
    FRONT_AND_BACK: 0x0408,
    SHADE_MODEL: 0x0B54,
    FLAT: 0x1D00,
    SMOOTH: 0x1D01,
    COLOR_MATERIAL: 0x0B57,
    COLOR_MATERIAL_FACE: 0x0B55,
    COLOR_MATERIAL_PARAMETER: 0x0B56,
    NORMALIZE: 0x0BA1,
    CLIP_PLANE0: 0x3000,
    CLIP_PLANE1: 0x3001,
    CLIP_PLANE2: 0x3002,
    CLIP_PLANE3: 0x3003,
    CLIP_PLANE4: 0x3004,
    CLIP_PLANE5: 0x3005,
    ACCUM_RED_BITS: 0x0D58,
    ACCUM_GREEN_BITS: 0x0D59,
    ACCUM_BLUE_BITS: 0x0D5A,
    ACCUM_ALPHA_BITS: 0x0D5B,
    ACCUM_CLEAR_VALUE: 0x0B80,
    ACCUM: 0x0100,
    ADD: 0x0104,
    LOAD: 0x0101,
    MULT: 0x0103,
    RETURN: 0x0102,
    ALPHA_TEST: 0x0BC0,
    ALPHA_TEST_REF: 0x0BC2,
    ALPHA_TEST_FUNC: 0x0BC1,
    BLEND: 0x0BE2,
    BLEND_SRC: 0x0BE1,
    BLEND_DST: 0x0BE0,
    ZERO: 0x0,
    ONE: 0x1,
    SRC_COLOR: 0x0300,
    ONE_MINUS_SRC_COLOR: 0x0301,
    SRC_ALPHA: 0x0302,
    ONE_MINUS_SRC_ALPHA: 0x0303,
    DST_ALPHA: 0x0304,
    ONE_MINUS_DST_ALPHA: 0x0305,
    DST_COLOR: 0x0306,
    ONE_MINUS_DST_COLOR: 0x0307,
    SRC_ALPHA_SATURATE: 0x0308,
    FEEDBACK: 0x1C01,
    RENDER: 0x1C00,
    SELECT: 0x1C02,
    "2D": 0x0600,
    "3D": 0x0601,
    "3D_COLOR": 0x0602,
    "3D_COLOR_TEXTURE": 0x0603,
    "4D_COLOR_TEXTURE": 0x0604,
    POINT_TOKEN: 0x0701,
    LINE_TOKEN: 0x0702,
    LINE_RESET_TOKEN: 0x0707,
    POLYGON_TOKEN: 0x0703,
    BITMAP_TOKEN: 0x0704,
    DRAW_PIXEL_TOKEN: 0x0705,
    COPY_PIXEL_TOKEN: 0x0706,
    PASS_THROUGH_TOKEN: 0x0700,
    FEEDBACK_BUFFER_POINTER: 0x0DF0,
    FEEDBACK_BUFFER_SIZE: 0x0DF1,
    FEEDBACK_BUFFER_TYPE: 0x0DF2,
    SELECTION_BUFFER_POINTER: 0x0DF3,
    SELECTION_BUFFER_SIZE: 0x0DF4,
    FOG: 0x0B60,
    FOG_MODE: 0x0B65,
    FOG_DENSITY: 0x0B62,
    FOG_COLOR: 0x0B66,
    FOG_INDEX: 0x0B61,
    FOG_START: 0x0B63,
    FOG_END: 0x0B64,
    LINEAR: 0x2601,
    EXP: 0x0800,
    EXP2: 0x0801,
    LOGIC_OP: 0x0BF1,
    INDEX_LOGIC_OP: 0x0BF1,
    COLOR_LOGIC_OP: 0x0BF2,
    LOGIC_OP_MODE: 0x0BF0,
    CLEAR: 0x1500,
    SET: 0x150F,
    COPY: 0x1503,
    COPY_INVERTED: 0x150C,
    NOOP: 0x1505,
    INVERT: 0x150A,
    AND: 0x1501,
    NAND: 0x150E,
    OR: 0x1507,
    NOR: 0x1508,
    XOR: 0x1506,
    EQUIV: 0x1509,
    AND_REVERSE: 0x1502,
    AND_INVERTED: 0x1504,
    OR_REVERSE: 0x150B,
    OR_INVERTED: 0x150D,
    STENCIL_BITS: 0x0D57,
    STENCIL_TEST: 0x0B90,
    STENCIL_CLEAR_VALUE: 0x0B91,
    STENCIL_FUNC: 0x0B92,
    STENCIL_VALUE_MASK: 0x0B93,
    STENCIL_FAIL: 0x0B94,
    STENCIL_PASS_DEPTH_FAIL: 0x0B95,
    STENCIL_PASS_DEPTH_PASS: 0x0B96,
    STENCIL_REF: 0x0B97,
    STENCIL_WRITEMASK: 0x0B98,
    STENCIL_INDEX: 0x1901,
    KEEP: 0x1E00,
    REPLACE: 0x1E01,
    INCR: 0x1E02,
    DECR: 0x1E03,
    NONE: 0x0,
    LEFT: 0x0406,
    RIGHT: 0x0407,
    FRONT: 0x0404,
    BACK: 0x0405,
    FRONT_AND_BACK: 0x0408,
    FRONT_LEFT: 0x0400,
    FRONT_RIGHT: 0x0401,
    BACK_LEFT: 0x0402,
    BACK_RIGHT: 0x0403,
    AUX0: 0x0409,
    AUX1: 0x040A,
    AUX2: 0x040B,
    AUX3: 0x040C,
    COLOR_INDEX: 0x1900,
    RED: 0x1903,
    GREEN: 0x1904,
    BLUE: 0x1905,
    ALPHA: 0x1906,
    LUMINANCE: 0x1909,
    LUMINANCE_ALPHA: 0x190A,
    ALPHA_BITS: 0x0D55,
    RED_BITS: 0x0D52,
    GREEN_BITS: 0x0D53,
    BLUE_BITS: 0x0D54,
    INDEX_BITS: 0x0D51,
    SUBPIXEL_BITS: 0x0D50,
    AUX_BUFFERS: 0x0C00,
    READ_BUFFER: 0x0C02,
    DRAW_BUFFER: 0x0C01,
    DOUBLEBUFFER: 0x0C32,
    STEREO: 0x0C33,
    BITMAP: 0x1A00,
    COLOR: 0x1800,
    DEPTH: 0x1801,
    STENCIL: 0x1802,
    DITHER: 0x0BD0,
    RGB: 0x1907,
    RGBA: 0x1908,
    MAX_LIST_NESTING: 0x0B31,
    MAX_EVAL_ORDER: 0x0D30,
    MAX_LIGHTS: 0x0D31,
    MAX_CLIP_PLANES: 0x0D32,
    MAX_TEXTURE_SIZE: 0x0D33,
    MAX_PIXEL_MAP_TABLE: 0x0D34,
    MAX_ATTRIB_STACK_DEPTH: 0x0D35,
    MAX_MODELVIEW_STACK_DEPTH: 0x0D36,
    MAX_NAME_STACK_DEPTH: 0x0D37,
    MAX_PROJECTION_STACK_DEPTH: 0x0D38,
    MAX_TEXTURE_STACK_DEPTH: 0x0D39,
    MAX_VIEWPORT_DIMS: 0x0D3A,
    MAX_CLIENT_ATTRIB_STACK_DEPTH: 0x0D3B,
    ATTRIB_STACK_DEPTH: 0x0BB0,
    CLIENT_ATTRIB_STACK_DEPTH: 0x0BB1,
    COLOR_CLEAR_VALUE: 0x0C22,
    COLOR_WRITEMASK: 0x0C23,
    CURRENT_INDEX: 0x0B01,
    CURRENT_COLOR: 0x0B00,
    CURRENT_NORMAL: 0x0B02,
    CURRENT_RASTER_COLOR: 0x0B04,
    CURRENT_RASTER_DISTANCE: 0x0B09,
    CURRENT_RASTER_INDEX: 0x0B05,
    CURRENT_RASTER_POSITION: 0x0B07,
    CURRENT_RASTER_TEXTURE_COORDS: 0x0B06,
    CURRENT_RASTER_POSITION_VALID: 0x0B08,
    CURRENT_TEXTURE_COORDS: 0x0B03,
    INDEX_CLEAR_VALUE: 0x0C20,
    INDEX_MODE: 0x0C30,
    INDEX_WRITEMASK: 0x0C21,
    MODELVIEW_MATRIX: 0x0BA6,
    MODELVIEW_STACK_DEPTH: 0x0BA3,
    NAME_STACK_DEPTH: 0x0D70,
    PROJECTION_MATRIX: 0x0BA7,
    PROJECTION_STACK_DEPTH: 0x0BA4,
    RENDER_MODE: 0x0C40,
    RGBA_MODE: 0x0C31,
    TEXTURE_MATRIX: 0x0BA8,
    TEXTURE_STACK_DEPTH: 0x0BA5,
    VIEWPORT: 0x0BA2,
    AUTO_NORMAL: 0x0D80,
    MAP1_COLOR_4: 0x0D90,
    MAP1_INDEX: 0x0D91,
    MAP1_NORMAL: 0x0D92,
    MAP1_TEXTURE_COORD_1: 0x0D93,
    MAP1_TEXTURE_COORD_2: 0x0D94,
    MAP1_TEXTURE_COORD_3: 0x0D95,
    MAP1_TEXTURE_COORD_4: 0x0D96,
    MAP1_VERTEX_3: 0x0D97,
    MAP1_VERTEX_4: 0x0D98,
    MAP2_COLOR_4: 0x0DB0,
    MAP2_INDEX: 0x0DB1,
    MAP2_NORMAL: 0x0DB2,
    MAP2_TEXTURE_COORD_1: 0x0DB3,
    MAP2_TEXTURE_COORD_2: 0x0DB4,
    MAP2_TEXTURE_COORD_3: 0x0DB5,
    MAP2_TEXTURE_COORD_4: 0x0DB6,
    MAP2_VERTEX_3: 0x0DB7,
    MAP2_VERTEX_4: 0x0DB8,
    MAP1_GRID_DOMAIN: 0x0DD0,
    MAP1_GRID_SEGMENTS: 0x0DD1,
    MAP2_GRID_DOMAIN: 0x0DD2,
    MAP2_GRID_SEGMENTS: 0x0DD3,
    COEFF: 0x0A00,
    ORDER: 0x0A01,
    DOMAIN: 0x0A02,
    PERSPECTIVE_CORRECTION_HINT: 0x0C50,
    POINT_SMOOTH_HINT: 0x0C51,
    LINE_SMOOTH_HINT: 0x0C52,
    POLYGON_SMOOTH_HINT: 0x0C53,
    FOG_HINT: 0x0C54,
    DONT_CARE: 0x1100,
    FASTEST: 0x1101,
    NICEST: 0x1102,
    SCISSOR_BOX: 0x0C10,
    SCISSOR_TEST: 0x0C11,
    MAP_COLOR: 0x0D10,
    MAP_STENCIL: 0x0D11,
    INDEX_SHIFT: 0x0D12,
    INDEX_OFFSET: 0x0D13,
    RED_SCALE: 0x0D14,
    RED_BIAS: 0x0D15,
    GREEN_SCALE: 0x0D18,
    GREEN_BIAS: 0x0D19,
    BLUE_SCALE: 0x0D1A,
    BLUE_BIAS: 0x0D1B,
    ALPHA_SCALE: 0x0D1C,
    ALPHA_BIAS: 0x0D1D,
    DEPTH_SCALE: 0x0D1E,
    DEPTH_BIAS: 0x0D1F,
    PIXEL_MAP_S_TO_S_SIZE: 0x0CB1,
    PIXEL_MAP_I_TO_I_SIZE: 0x0CB0,
    PIXEL_MAP_I_TO_R_SIZE: 0x0CB2,
    PIXEL_MAP_I_TO_G_SIZE: 0x0CB3,
    PIXEL_MAP_I_TO_B_SIZE: 0x0CB4,
    PIXEL_MAP_I_TO_A_SIZE: 0x0CB5,
    PIXEL_MAP_R_TO_R_SIZE: 0x0CB6,
    PIXEL_MAP_G_TO_G_SIZE: 0x0CB7,
    PIXEL_MAP_B_TO_B_SIZE: 0x0CB8,
    PIXEL_MAP_A_TO_A_SIZE: 0x0CB9,
    PIXEL_MAP_S_TO_S: 0x0C71,
    PIXEL_MAP_I_TO_I: 0x0C70,
    PIXEL_MAP_I_TO_R: 0x0C72,
    PIXEL_MAP_I_TO_G: 0x0C73,
    PIXEL_MAP_I_TO_B: 0x0C74,
    PIXEL_MAP_I_TO_A: 0x0C75,
    PIXEL_MAP_R_TO_R: 0x0C76,
    PIXEL_MAP_G_TO_G: 0x0C77,
    PIXEL_MAP_B_TO_B: 0x0C78,
    PIXEL_MAP_A_TO_A: 0x0C79,
    PACK_ALIGNMENT: 0x0D05,
    PACK_LSB_FIRST: 0x0D01,
    PACK_ROW_LENGTH: 0x0D02,
    PACK_SKIP_PIXELS: 0x0D04,
    PACK_SKIP_ROWS: 0x0D03,
    PACK_SWAP_BYTES: 0x0D00,
    UNPACK_ALIGNMENT: 0x0CF5,
    UNPACK_LSB_FIRST: 0x0CF1,
    UNPACK_ROW_LENGTH: 0x0CF2,
    UNPACK_SKIP_PIXELS: 0x0CF4,
    UNPACK_SKIP_ROWS: 0x0CF3,
    UNPACK_SWAP_BYTES: 0x0CF0,
    ZOOM_X: 0x0D16,
    ZOOM_Y: 0x0D17,
    TEXTURE_ENV: 0x2300,
    TEXTURE_ENV_MODE: 0x2200,
    TEXTURE_1D: 0x0DE0,
    TEXTURE_2D: 0x0DE1,
    TEXTURE_WRAP_S: 0x2802,
    TEXTURE_WRAP_T: 0x2803,
    TEXTURE_MAG_FILTER: 0x2800,
    TEXTURE_MIN_FILTER: 0x2801,
    TEXTURE_ENV_COLOR: 0x2201,
    TEXTURE_GEN_S: 0x0C60,
    TEXTURE_GEN_T: 0x0C61,
    TEXTURE_GEN_R: 0x0C62,
    TEXTURE_GEN_Q: 0x0C63,
    TEXTURE_GEN_MODE: 0x2500,
    TEXTURE_BORDER_COLOR: 0x1004,
    TEXTURE_WIDTH: 0x1000,
    TEXTURE_HEIGHT: 0x1001,
    TEXTURE_BORDER: 0x1005,
    TEXTURE_COMPONENTS: 0x1003,
    TEXTURE_RED_SIZE: 0x805C,
    TEXTURE_GREEN_SIZE: 0x805D,
    TEXTURE_BLUE_SIZE: 0x805E,
    TEXTURE_ALPHA_SIZE: 0x805F,
    TEXTURE_LUMINANCE_SIZE: 0x8060,
    TEXTURE_INTENSITY_SIZE: 0x8061,
    NEAREST_MIPMAP_NEAREST: 0x2700,
    NEAREST_MIPMAP_LINEAR: 0x2702,
    LINEAR_MIPMAP_NEAREST: 0x2701,
    LINEAR_MIPMAP_LINEAR: 0x2703,
    OBJECT_LINEAR: 0x2401,
    OBJECT_PLANE: 0x2501,
    EYE_LINEAR: 0x2400,
    EYE_PLANE: 0x2502,
    SPHERE_MAP: 0x2402,
    DECAL: 0x2101,
    MODULATE: 0x2100,
    NEAREST: 0x2600,
    REPEAT: 0x2901,
    CLAMP: 0x2900,
    VENDOR: 0x1F00,
    RENDERER: 0x1F01,
    VERSION: 0x1F02,
    EXTENSIONS: 0x1F03,
    NO_ERROR: 0x0,
    INVALID_ENUM: 0x0500,
    INVALID_VALUE: 0x0501,
    INVALID_OPERATION: 0x0502,
    STACK_OVERFLOW: 0x0503,
    STACK_UNDERFLOW: 0x0504,
    OUT_OF_MEMORY: 0x0505,
    CURRENT_BIT: 0x00000001,
    POINT_BIT: 0x00000002,
    LINE_BIT: 0x00000004,
    POLYGON_BIT: 0x00000008,
    POLYGON_STIPPLE_BIT: 0x00000010,
    PIXEL_MODE_BIT: 0x00000020,
    LIGHTING_BIT: 0x00000040,
    FOG_BIT: 0x00000080,
    DEPTH_BUFFER_BIT: 0x00000100,
    ACCUM_BUFFER_BIT: 0x00000200,
    STENCIL_BUFFER_BIT: 0x00000400,
    VIEWPORT_BIT: 0x00000800,
    TRANSFORM_BIT: 0x00001000,
    ENABLE_BIT: 0x00002000,
    COLOR_BUFFER_BIT: 0x00004000,
    HINT_BIT: 0x00008000,
    EVAL_BIT: 0x00010000,
    LIST_BIT: 0x00020000,
    TEXTURE_BIT: 0x00040000,
    SCISSOR_BIT: 0x00080000,
    ALL_ATTRIB_BITS: 0x000FFFFF,
    PROXY_TEXTURE_1D: 0x8063,
    PROXY_TEXTURE_2D: 0x8064,
    TEXTURE_PRIORITY: 0x8066,
    TEXTURE_RESIDENT: 0x8067,
    TEXTURE_BINDING_1D: 0x8068,
    TEXTURE_BINDING_2D: 0x8069,
    TEXTURE_INTERNAL_FORMAT: 0x1003,
    ALPHA4: 0x803B,
    ALPHA8: 0x803C,
    ALPHA12: 0x803D,
    ALPHA16: 0x803E,
    LUMINANCE4: 0x803F,
    LUMINANCE8: 0x8040,
    LUMINANCE12: 0x8041,
    LUMINANCE16: 0x8042,
    LUMINANCE4_ALPHA4: 0x8043,
    LUMINANCE6_ALPHA2: 0x8044,
    LUMINANCE8_ALPHA8: 0x8045,
    LUMINANCE12_ALPHA4: 0x8046,
    LUMINANCE12_ALPHA12: 0x8047,
    LUMINANCE16_ALPHA16: 0x8048,
    INTENSITY: 0x8049,
    INTENSITY4: 0x804A,
    INTENSITY8: 0x804B,
    INTENSITY12: 0x804C,
    INTENSITY16: 0x804D,
    R3_G3_B2: 0x2A10,
    RGB4: 0x804F,
    RGB5: 0x8050,
    RGB8: 0x8051,
    RGB10: 0x8052,
    RGB12: 0x8053,
    RGB16: 0x8054,
    RGBA2: 0x8055,
    RGBA4: 0x8056,
    RGB5_A1: 0x8057,
    RGBA8: 0x8058,
    RGB10_A2: 0x8059,
    RGBA12: 0x805A,
    RGBA16: 0x805B,
    CLIENT_PIXEL_STORE_BIT: 0x00000001,
    CLIENT_VERTEX_ARRAY_BIT: 0x00000002,
    ALL_CLIENT_ATTRIB_BITS: 0xFFFFFFFF,
    CLIENT_ALL_ATTRIB_BITS: 0xFFFFFFFF,
    RESCALE_NORMAL: 0x803A,
    CLAMP_TO_EDGE: 0x812F,
    MAX_ELEMENTS_VERTICES: 0x80E8,
    MAX_ELEMENTS_INDICES: 0x80E9,
    BGR: 0x80E0,
    BGRA: 0x80E1,
    UNSIGNED_BYTE_3_3_2: 0x8032,
    UNSIGNED_BYTE_2_3_3_REV: 0x8362,
    UNSIGNED_SHORT_5_6_5: 0x8363,
    UNSIGNED_SHORT_5_6_5_REV: 0x8364,
    UNSIGNED_SHORT_4_4_4_4: 0x8033,
    UNSIGNED_SHORT_4_4_4_4_REV: 0x8365,
    UNSIGNED_SHORT_5_5_5_1: 0x8034,
    UNSIGNED_SHORT_1_5_5_5_REV: 0x8366,
    UNSIGNED_INT_8_8_8_8: 0x8035,
    UNSIGNED_INT_8_8_8_8_REV: 0x8367,
    UNSIGNED_INT_10_10_10_2: 0x8036,
    UNSIGNED_INT_2_10_10_10_REV: 0x8368,
    LIGHT_MODEL_COLOR_CONTROL: 0x81F8,
    SINGLE_COLOR: 0x81F9,
    SEPARATE_SPECULAR_COLOR: 0x81FA,
    TEXTURE_MIN_LOD: 0x813A,
    TEXTURE_MAX_LOD: 0x813B,
    TEXTURE_BASE_LEVEL: 0x813C,
    TEXTURE_MAX_LEVEL: 0x813D,
    SMOOTH_POINT_SIZE_RANGE: 0x0B12,
    SMOOTH_POINT_SIZE_GRANULARITY: 0x0B13,
    SMOOTH_LINE_WIDTH_RANGE: 0x0B22,
    SMOOTH_LINE_WIDTH_GRANULARITY: 0x0B23,
    ALIASED_POINT_SIZE_RANGE: 0x846D,
    ALIASED_LINE_WIDTH_RANGE: 0x846E,
    PACK_SKIP_IMAGES: 0x806B,
    PACK_IMAGE_HEIGHT: 0x806C,
    UNPACK_SKIP_IMAGES: 0x806D,
    UNPACK_IMAGE_HEIGHT: 0x806E,
    TEXTURE_3D: 0x806F,
    PROXY_TEXTURE_3D: 0x8070,
    TEXTURE_DEPTH: 0x8071,
    TEXTURE_WRAP_R: 0x8072,
    MAX_3D_TEXTURE_SIZE: 0x8073,
    TEXTURE_BINDING_3D: 0x806A,
    CONSTANT_COLOR: 0x8001,
    ONE_MINUS_CONSTANT_COLOR: 0x8002,
    CONSTANT_ALPHA: 0x8003,
    ONE_MINUS_CONSTANT_ALPHA: 0x8004,
    COLOR_TABLE: 0x80D0,
    POST_CONVOLUTION_COLOR_TABLE: 0x80D1,
    POST_COLOR_MATRIX_COLOR_TABLE: 0x80D2,
    PROXY_COLOR_TABLE: 0x80D3,
    PROXY_POST_CONVOLUTION_COLOR_TABLE: 0x80D4,
    PROXY_POST_COLOR_MATRIX_COLOR_TABLE: 0x80D5,
    COLOR_TABLE_SCALE: 0x80D6,
    COLOR_TABLE_BIAS: 0x80D7,
    COLOR_TABLE_FORMAT: 0x80D8,
    COLOR_TABLE_WIDTH: 0x80D9,
    COLOR_TABLE_RED_SIZE: 0x80DA,
    COLOR_TABLE_GREEN_SIZE: 0x80DB,
    COLOR_TABLE_BLUE_SIZE: 0x80DC,
    COLOR_TABLE_ALPHA_SIZE: 0x80DD,
    COLOR_TABLE_LUMINANCE_SIZE: 0x80DE,
    COLOR_TABLE_INTENSITY_SIZE: 0x80DF,
    CONVOLUTION_1D: 0x8010,
    CONVOLUTION_2D: 0x8011,
    SEPARABLE_2D: 0x8012,
    CONVOLUTION_BORDER_MODE: 0x8013,
    CONVOLUTION_FILTER_SCALE: 0x8014,
    CONVOLUTION_FILTER_BIAS: 0x8015,
    REDUCE: 0x8016,
    CONVOLUTION_FORMAT: 0x8017,
    CONVOLUTION_WIDTH: 0x8018,
    CONVOLUTION_HEIGHT: 0x8019,
    MAX_CONVOLUTION_WIDTH: 0x801A,
    MAX_CONVOLUTION_HEIGHT: 0x801B,
    POST_CONVOLUTION_RED_SCALE: 0x801C,
    POST_CONVOLUTION_GREEN_SCALE: 0x801D,
    POST_CONVOLUTION_BLUE_SCALE: 0x801E,
    POST_CONVOLUTION_ALPHA_SCALE: 0x801F,
    POST_CONVOLUTION_RED_BIAS: 0x8020,
    POST_CONVOLUTION_GREEN_BIAS: 0x8021,
    POST_CONVOLUTION_BLUE_BIAS: 0x8022,
    POST_CONVOLUTION_ALPHA_BIAS: 0x8023,
    CONSTANT_BORDER: 0x8151,
    REPLICATE_BORDER: 0x8153,
    CONVOLUTION_BORDER_COLOR: 0x8154,
    COLOR_MATRIX: 0x80B1,
    COLOR_MATRIX_STACK_DEPTH: 0x80B2,
    MAX_COLOR_MATRIX_STACK_DEPTH: 0x80B3,
    POST_COLOR_MATRIX_RED_SCALE: 0x80B4,
    POST_COLOR_MATRIX_GREEN_SCALE: 0x80B5,
    POST_COLOR_MATRIX_BLUE_SCALE: 0x80B6,
    POST_COLOR_MATRIX_ALPHA_SCALE: 0x80B7,
    POST_COLOR_MATRIX_RED_BIAS: 0x80B8,
    POST_COLOR_MATRIX_GREEN_BIAS: 0x80B9,
    POST_COLOR_MATRIX_BLUE_BIAS: 0x80BA,
    POST_COLOR_MATRIX_ALPHA_BIAS: 0x80BB,
    HISTOGRAM: 0x8024,
    PROXY_HISTOGRAM: 0x8025,
    HISTOGRAM_WIDTH: 0x8026,
    HISTOGRAM_FORMAT: 0x8027,
    HISTOGRAM_RED_SIZE: 0x8028,
    HISTOGRAM_GREEN_SIZE: 0x8029,
    HISTOGRAM_BLUE_SIZE: 0x802A,
    HISTOGRAM_ALPHA_SIZE: 0x802B,
    HISTOGRAM_LUMINANCE_SIZE: 0x802C,
    HISTOGRAM_SINK: 0x802D,
    MINMAX: 0x802E,
    MINMAX_FORMAT: 0x802F,
    MINMAX_SINK: 0x8030,
    TABLE_TOO_LARGE: 0x8031,
    BLEND_EQUATION: 0x8009,
    MIN: 0x8007,
    MAX: 0x8008,
    FUNC_ADD: 0x8006,
    FUNC_SUBTRACT: 0x800A,
    FUNC_REVERSE_SUBTRACT: 0x800B,
    BLEND_COLOR: 0x8005,
    TEXTURE0: 0x84C0,
    TEXTURE1: 0x84C1,
    TEXTURE2: 0x84C2,
    TEXTURE3: 0x84C3,
    TEXTURE4: 0x84C4,
    TEXTURE5: 0x84C5,
    TEXTURE6: 0x84C6,
    TEXTURE7: 0x84C7,
    TEXTURE8: 0x84C8,
    TEXTURE9: 0x84C9,
    TEXTURE10: 0x84CA,
    TEXTURE11: 0x84CB,
    TEXTURE12: 0x84CC,
    TEXTURE13: 0x84CD,
    TEXTURE14: 0x84CE,
    TEXTURE15: 0x84CF,
    TEXTURE16: 0x84D0,
    TEXTURE17: 0x84D1,
    TEXTURE18: 0x84D2,
    TEXTURE19: 0x84D3,
    TEXTURE20: 0x84D4,
    TEXTURE21: 0x84D5,
    TEXTURE22: 0x84D6,
    TEXTURE23: 0x84D7,
    TEXTURE24: 0x84D8,
    TEXTURE25: 0x84D9,
    TEXTURE26: 0x84DA,
    TEXTURE27: 0x84DB,
    TEXTURE28: 0x84DC,
    TEXTURE29: 0x84DD,
    TEXTURE30: 0x84DE,
    TEXTURE31: 0x84DF,
    ACTIVE_TEXTURE: 0x84E0,
    CLIENT_ACTIVE_TEXTURE: 0x84E1,
    MAX_TEXTURE_UNITS: 0x84E2,
    NORMAL_MAP: 0x8511,
    REFLECTION_MAP: 0x8512,
    TEXTURE_CUBE_MAP: 0x8513,
    TEXTURE_BINDING_CUBE_MAP: 0x8514,
    TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515,
    TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516,
    TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517,
    TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518,
    TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519,
    TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851A,
    PROXY_TEXTURE_CUBE_MAP: 0x851B,
    MAX_CUBE_MAP_TEXTURE_SIZE: 0x851C,
    COMPRESSED_ALPHA: 0x84E9,
    COMPRESSED_LUMINANCE: 0x84EA,
    COMPRESSED_LUMINANCE_ALPHA: 0x84EB,
    COMPRESSED_INTENSITY: 0x84EC,
    COMPRESSED_RGB: 0x84ED,
    COMPRESSED_RGBA: 0x84EE,
    TEXTURE_COMPRESSION_HINT: 0x84EF,
    TEXTURE_COMPRESSED_IMAGE_SIZE: 0x86A0,
    TEXTURE_COMPRESSED: 0x86A1,
    NUM_COMPRESSED_TEXTURE_FORMATS: 0x86A2,
    COMPRESSED_TEXTURE_FORMATS: 0x86A3,
    MULTISAMPLE: 0x809D,
    SAMPLE_ALPHA_TO_COVERAGE: 0x809E,
    SAMPLE_ALPHA_TO_ONE: 0x809F,
    SAMPLE_COVERAGE: 0x80A0,
    SAMPLE_BUFFERS: 0x80A8,
    SAMPLES: 0x80A9,
    SAMPLE_COVERAGE_VALUE: 0x80AA,
    SAMPLE_COVERAGE_INVERT: 0x80AB,
    MULTISAMPLE_BIT: 0x20000000,
    TRANSPOSE_MODELVIEW_MATRIX: 0x84E3,
    TRANSPOSE_PROJECTION_MATRIX: 0x84E4,
    TRANSPOSE_TEXTURE_MATRIX: 0x84E5,
    TRANSPOSE_COLOR_MATRIX: 0x84E6,
    COMBINE: 0x8570,
    COMBINE_RGB: 0x8571,
    COMBINE_ALPHA: 0x8572,
    SOURCE0_RGB: 0x8580,
    SOURCE1_RGB: 0x8581,
    SOURCE2_RGB: 0x8582,
    SOURCE0_ALPHA: 0x8588,
    SOURCE1_ALPHA: 0x8589,
    SOURCE2_ALPHA: 0x858A,
    OPERAND0_RGB: 0x8590,
    OPERAND1_RGB: 0x8591,
    OPERAND2_RGB: 0x8592,
    OPERAND0_ALPHA: 0x8598,
    OPERAND1_ALPHA: 0x8599,
    OPERAND2_ALPHA: 0x859A,
    RGB_SCALE: 0x8573,
    ADD_SIGNED: 0x8574,
    INTERPOLATE: 0x8575,
    SUBTRACT: 0x84E7,
    CONSTANT: 0x8576,
    PRIMARY_COLOR: 0x8577,
    PREVIOUS: 0x8578,
    DOT3_RGB: 0x86AE,
    DOT3_RGBA: 0x86AF,
    CLAMP_TO_BORDER: 0x812D,
    TEXTURE0_ARB: 0x84C0,
    TEXTURE1_ARB: 0x84C1,
    TEXTURE2_ARB: 0x84C2,
    TEXTURE3_ARB: 0x84C3,
    TEXTURE4_ARB: 0x84C4,
    TEXTURE5_ARB: 0x84C5,
    TEXTURE6_ARB: 0x84C6,
    TEXTURE7_ARB: 0x84C7,
    TEXTURE8_ARB: 0x84C8,
    TEXTURE9_ARB: 0x84C9,
    TEXTURE10_ARB: 0x84CA,
    TEXTURE11_ARB: 0x84CB,
    TEXTURE12_ARB: 0x84CC,
    TEXTURE13_ARB: 0x84CD,
    TEXTURE14_ARB: 0x84CE,
    TEXTURE15_ARB: 0x84CF,
    TEXTURE16_ARB: 0x84D0,
    TEXTURE17_ARB: 0x84D1,
    TEXTURE18_ARB: 0x84D2,
    TEXTURE19_ARB: 0x84D3,
    TEXTURE20_ARB: 0x84D4,
    TEXTURE21_ARB: 0x84D5,
    TEXTURE22_ARB: 0x84D6,
    TEXTURE23_ARB: 0x84D7,
    TEXTURE24_ARB: 0x84D8,
    TEXTURE25_ARB: 0x84D9,
    TEXTURE26_ARB: 0x84DA,
    TEXTURE27_ARB: 0x84DB,
    TEXTURE28_ARB: 0x84DC,
    TEXTURE29_ARB: 0x84DD,
    TEXTURE30_ARB: 0x84DE,
    TEXTURE31_ARB: 0x84DF,
    ACTIVE_TEXTURE_ARB: 0x84E0,
    CLIENT_ACTIVE_TEXTURE_ARB: 0x84E1,
    MAX_TEXTURE_UNITS_ARB: 0x84E2,
    DEBUG_OBJECT_MESA: 0x8759,
    DEBUG_PRINT_MESA: 0x875A,
    DEBUG_ASSERT_MESA: 0x875B,
    DEPTH_STENCIL_MESA: 0x8750,
    UNSIGNED_INT_24_8_MESA: 0x8751,
    UNSIGNED_INT_8_24_REV_MESA: 0x8752,
    UNSIGNED_SHORT_15_1_MESA: 0x8753,
    UNSIGNED_SHORT_1_15_REV_MESA: 0x8754,
    FRAGMENT_PROGRAM_POSITION_MESA: 0x8bb0,
    FRAGMENT_PROGRAM_CALLBACK_MESA: 0x8bb1,
    FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA: 0x8bb2,
    FRAGMENT_PROGRAM_CALLBACK_DATA_MESA: 0x8bb3,
    VERTEX_PROGRAM_POSITION_MESA: 0x8bb4,
    VERTEX_PROGRAM_CALLBACK_MESA: 0x8bb5,
    VERTEX_PROGRAM_CALLBACK_FUNC_MESA: 0x8bb6,
    VERTEX_PROGRAM_CALLBACK_DATA_MESA: 0x8bb7,
    TEXTURE_1D_ARRAY_EXT: 0x8C18,
    PROXY_TEXTURE_1D_ARRAY_EXT: 0x8C19,
    TEXTURE_2D_ARRAY_EXT: 0x8C1A,
    PROXY_TEXTURE_2D_ARRAY_EXT: 0x8C1B,
    TEXTURE_BINDING_1D_ARRAY_EXT: 0x8C1C,
    TEXTURE_BINDING_2D_ARRAY_EXT: 0x8C1D,
    MAX_ARRAY_TEXTURE_LAYERS_EXT: 0x88FF,
    FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT: 0x8CD4,
    ALPHA_BLEND_EQUATION_ATI: 0x883D
}
};
BundleModuleCode['x11/core/ext/glx']=function (module,exports,global,process){
/*
  second extension to try
  links to get started:

  http://cgit.freedesktop.org/xcb/proto/tree/src/glx.xml?id=HEAD
  http://cgit.freedesktop.org/mesa/mesa/tree/src/glx
  http://cgit.freedesktop.org/mesa/mesa/tree/src/glx/indirect.c

  http://www.opengl.org/wiki/Tutorial:_OpenGL_3.0_Context_Creation_(GLX)

  https://github.com/xderoche/J11/blob/master/src/gnu/x11/extension/glx/GL.java


*/
var x11 = Require('x11/core/x11');
// TODO: move to templates
exports.requireExt = function(display, callback)
{
    var X = display.client;
    X.QueryExtension('GLX', function(err, ext) {
        var constants = require('./glxconstants');
        for (var i in constants)
            ext[i] = constants[i];

        if (!ext.present)
            return callback(new Error('extension not available'));

        ext.QueryVersion = function(clientMaj, clientMin, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 7, 3, clientMaj, clientMin]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('LL');
                    return res;
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.QueryServerString = function(screen, name, callback) {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 19, 3, screen, name]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var len = buf.unpack('xxxxL')[0];
                    return buf.toString().substring(24, 24+len*4);
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.CreateGLXPixmap = function(screen, visual, pixmap, glxpixmap) {
            X.seq_num++;
            X.pack_stream.pack('CCSLLLL', [ext.majorOpcode, 13, 5, screen, visual, pixmap, glxpixmap]);

            console.log('CreateGlxPix', X.seq_num);
            console.log(ext.majorOpcode, 13, 5, screen, visual, pixmap, glxpixmap);
            console.trace();


            X.pack_stream.flush();
        }

        ext.QueryExtensionsString = function(screen, callback) {
            X.seq_num++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 18, 2, screen]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var len = buf.unpack('xxxxL')[0];
                    return buf.toString().substring(24, 24+len*4);
                },
                callback
            ];
            X.pack_stream.flush();
        }

        // see __glXInitializeVisualConfigFromTags in mesa/src/glx/glxext.c
        //
        ext.GetVisualConfigs = function(screen, callback) {
            X.seq_num++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 14, 2, screen]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('LL');
                    var numConfigs = res[0];
                    var numProps = res[1];
                    var configs = new Array(numConfigs);
                    var i,j;
                    for (i=0; i < numConfigs; ++i) {
                        var props = {}; //new Array(numProps);
                        var names = 'visualID visualType rgbMode redBits greenBits blueBits alphaBits accumRedBits accumGreen accumBlueBits accumAlphaBits doubleBufferMode stereoMode rgbBits depthBits stencilBits numAuxBuffers level'.split(' ');
                        for (var j=0; j < 18 && j < numProps; ++j) {
                            props[names[j]] = buf.unpack('L', 24+(i*numProps +j)*4)[0];
                        }
                        // read tag + property
                        configs[i] = props;
                    }

                    return configs;
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.GetFBConfigs = function(screen, callback) {
            X.seq_num++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 21, 2, screen]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('LL');
                    var numConfigs = res[0];
                    var numProps = res[1];
                    var configs = new Array(numConfigs);
                    var i,j;
                    for (i=0; i < numConfigs; ++i) {
                        var props = new Array(numProps);
                        for (var j=0; j < numProps; ++j) {
                            props[j] = buf.unpack('LL', 24+(i*numProps +j)*8);
                        }
                        configs[i] = props;
                    }
                    return configs;
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.CreateContext = function(ctx, visual, screen, shareListCtx, isDirect)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLLLLCxxx', [ext.majorOpcode, 3, 6, ctx, visual, screen, shareListCtx, isDirect]);
            X.pack_stream.flush();
        }

        ext.SwapBuffers = function(ctx, drawable)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 11, 3, ctx, drawable]);
            X.pack_stream.flush();
        }

        ext.NewList = function(ctx, list, mode)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLLL', [ext.majorOpcode, 101, 4, ctx, list, mode]);
            X.pack_stream.flush();
        }

        ext.EndList = function(ctx)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 102, 2, ctx]);
            X.pack_stream.flush();
        }

        ext.GenLists = function(ctx, count, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 104, 3, ctx, count]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    return buf.unpack('L')[0];
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.GenTextures = function(ctx, count, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 145, 3, ctx, count]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var format = Buffer(count);
                    format.fill('L');
                    return buf.unpack('xxxxxxxxxxxxxxxxxxxxxxxx' + format.toString());
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.IsTexture = function(ctx, texture, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 146, 3, ctx, texture]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    return buf.unpack('CCCCCCCCCCCCCCCCCCCCCCCCCC');
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.MakeCurrent = function(drawable, ctx, oldctx, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLLL', [ext.majorOpcode, 5, 4, drawable, ctx, oldctx]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    return buf.unpack('L')[0];
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.Finish = function(ctx, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 108, 2, ctx]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    return;
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.Render = function(ctx, data) {
            X.seq_num++;
            var length = 0;
            if (Buffer.isBuffer(data))
                length = 2+data.length/4;
            else if (Array.isArray(data)) {
                length = 2;
                for (var i=0; i < data.length; ++i)
                    length += data[i].length/4;
            }
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 1, length, ctx]);
            if (Buffer.isBuffer(data))
                X.pack_stream.write_queue.push(data);
            else if (Array.isArray(data))
                for (var i=0; i < data.length; ++i)
                    X.pack_stream.write_queue.push(data[i]);
            else
                throw new Error('invalid data, expected buffer or buffers array', data);
            X.pack_stream.flush();
        }

        ext.VendorPrivate = function(ctx, code, data) {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 16, 3+data.length/4, code, ctx]);
            X.pack_stream.write_queue.push(data);
            X.pack_stream.flush();
        }

        // 1330 - X_GLXvop_BindTexImageEXT
        // 1331 - X_GLXvop_ReleaseTexImageEXT
        ext.BindTexImage = function(ctx, drawable, buffer, attribs) {
           if (!attribs)
             attribs = [];
           var data = new Buffer(12 + attribs.length*4);
           data.writeUInt32LE(drawable, 0);
           data.writeUInt32LE(buffer, 4);
           data.writeUInt32LE(attribs.length, 8);
           for (var i=0; i < attribs.length; ++i)
             data.writeUint32LE(attribs.length, 12+i*4);
           ext.VendorPrivate(ctx, 1330, data);
        }

        ext.ReleaseTexImage = function(ctx, drawable, buffer) {
           var data = new Buffer(8);
           data.writeUint32LE(drawable, 0);
           data.writeUint32LE(buffer, 4);
           ext.VendorPrivate(ctx, 1331, data);
        }

        // VendorPrivateWithReply - opcode 17

        ext.RenderLarge = function(ctx, requestNum, requestTotal, data) {
          X.seq_num++;

          //var data = Buffer.concat(data);
          var padLength = 4 - data.length % 4;
          if (padLength == 4)
            padLength = 0;
          var length = 4 + (data.length+padLength) / 4;
          X.pack_stream.pack('CCSLSSL', [ext.majorOpcode, 2, length, ctx, requestNum, requestTotal, data.length]);

          X.pack_stream.write_queue.push(data);
          var pad = new Buffer(padLength);
          pad.fill(0);
          X.pack_stream.write_queue.push(pad);
          X.pack_stream.flush();
        }

        ext.renderPipeline = function(ctx) {
            return require('./glxrender')(this, ctx);
        }

	var errors = [
	  "context",
	  "contect state",
	  "drawable",
	  "pixmap",
	  "context tag",
	  "current window",
	  "Render request",
	  "RenderLarge request",
	  "(unsupported) VendorPrivate request",
	  "FB config",
	  "pbuffer",
	  "current drawable",
	  "window"
        ];

	errors.forEach(function(message, code) {
  	  X.errorParsers[ext.firstError + code] = function(err) {
	    err.message = "GLX: Bad " + message;
	  };
	});

        callback(null, ext);
    });
}

};
BundleModuleCode['x11/core/ext/glxrender']=function (module,exports,global,process){
// see http://cgit.freedesktop.org/mesa/mesa/tree/src/mapi/glapi/gen/gl_API.xml

var constants = Require('x11/core/ext/glxconstants');

var MAX_SMALL_RENDER=65536-16;

module.exports = function(GLX, ctx) {
    buffers = [];
    var currentLength = 0;

    function commandBuffer(opcode, len) {
        if (currentLength + len > MAX_SMALL_RENDER) {
            render();
        }
        if (len > MAX_SMALL_RENDER)
            throw Error('Buffer too big. Make sure you are using RenderLarge for large commands');

        currentLength += len;
        var res = Buffer(len);
        res.writeUInt16LE(len, 0);
        res.writeUInt16LE(opcode, 2);
        return res;
    }

    function serialize0(opcode) {
        buffers.push(commandBuffer(opcode, 4));
    }

    function serialize3fv(opcode, c1, c2, c3) {
        var res = commandBuffer(opcode, 16);
        res.writeFloatLE(c1, 4);
        res.writeFloatLE(c2, 8);
        res.writeFloatLE(c3, 12);
        buffers.push(res);
    }

    function serialize4fv(opcode, c1, c2, c3, c4) {
        var res = commandBuffer(opcode, 20);
        res.writeFloatLE(c1, 4);
        res.writeFloatLE(c2, 8);
        res.writeFloatLE(c3, 12);
        res.writeFloatLE(c4, 16);
        buffers.push(res);
    }

    function serialize4i(opcode, c1, c2, c3, c4) {
        var res = commandBuffer(opcode, 20);
        res.writeInt32LE(c1, 4);
        res.writeInt32LE(c2, 8);
        res.writeInt32LE(c3, 12);
        res.writeInt32LE(c4, 16);
        buffers.push(res);
    }

    function serialize6d(opcode, d1, d2, d3, d4, d5, d6)
    {
        var res = commandBuffer(opcode, 52);
        res.writeDoubleLE(d1, 4);
        res.writeDoubleLE(d2, 12);
        res.writeDoubleLE(d3, 20);
        res.writeDoubleLE(d4, 28);
        res.writeDoubleLE(d5, 36);
        res.writeDoubleLE(d6, 44);
        buffers.push(res);
    };

    function serialize2i(opcode, value1, value2) {
       var res = commandBuffer(opcode, 12);
        res.writeUInt32LE(value1, 4);
        res.writeUInt32LE(value2, 8);
        buffers.push(res);
    }

    function serialize1i(opcode, value) {
       var res = commandBuffer(opcode, 8);
        res.writeUInt32LE(value, 4);
        buffers.push(res);
    }

    function serialize1f(opcode, value) {
       var res = commandBuffer(opcode, 8);
        res.writeFloatLE(value, 4);
        buffers.push(res);
    }

    function serialize2f(opcode, f1, f2) {
       var res = commandBuffer(opcode, 12);
        res.writeFloatLE(f1, 4);
        res.writeFloatLE(f2, 8);
        buffers.push(res);
    }

    function serialize2i(opcode, i1, i2) {
       var res = commandBuffer(opcode, 12);
        res.writeUInt32LE(i1, 4);
        res.writeUInt32LE(i2, 8);
        buffers.push(res);
    }

    function serialize3i(opcode, i1, i2, i3) {
       var res = commandBuffer(opcode, 16);
        res.writeUInt32LE(i1, 4);
        res.writeUInt32LE(i2, 8);
        res.writeUInt32LE(i3, 12);
        buffers.push(res);
    }

    function serialize2i1f(opcode, i1, i2, f1) {
       var res = commandBuffer(opcode, 16);
        res.writeUInt32LE(i1, 4);
        res.writeUInt32LE(i2, 8);
        res.writeFloatLE(f1, 12);
        buffers.push(res);
    }

    function serialize2ifv(opcode, i1, i2, fv) {
       var res = commandBuffer(opcode, 12 + fv.length*4);
        res.writeUInt32LE(i1, 4);
        res.writeUInt32LE(i2, 8);
        for (var i=0; i < fv.length; ++i)
          res.writeFloatLE(fv[i], 12+i*4);
        buffers.push(res);
    }

    function serialize2i4f(opcode, i1, i2, f1, f2, f3, f4) {
       var res = commandBuffer(opcode, 28);
        res.writeUInt32LE(i1, 4);
        res.writeUInt32LE(i2, 8);
        res.writeFloatLE(f1, 12);
        res.writeFloatLE(f2, 16);
        res.writeFloatLE(f3, 20);
        res.writeFloatLE(f4, 24);
        buffers.push(res);
    }

    function render(ctxLocal) {

        if (!ctxLocal) // ctxLocal overrides ctx passed during creation of renderContext
            ctxLocal = ctx;

        if (buffers.length == 0) {
          buffers = [];
          currentLength = 0;
          return;
        }

        GLX.Render(ctxLocal, buffers);
        buffers = [];
        currentLength = 0;
    }

    var renderContext =  {
        Render: render,
        Begin: function(what) {
            serialize1i(4, what);
        },
        End: function() {
            serialize0(23);
        },
        Ortho: function(left, right, bottom, top, znear, zfar) {
            serialize6d(182, left, right, bottom, top, znear, zfar);
        },
        Frustum: function(left, right, bottom, top, znear, zfar) {
            serialize6d(182, left, right, bottom, top, znear, zfar);
        },
        PopMatrix: function() {
            serialize0(183);

        },
        PushMatrix: function() {
            serialize0(184);
        },
        LoadIdentity: function() {
            serialize0(176);
        },
        Rotatef: function(a, x, y, z) {
            serialize4fv(186, a, x, y, z);
        },
        CallList: function(list) {
            serialize1i(1, list);
        },
        Viewport: function(x, y, w, h) {
            serialize4i(191, x, y, w, h); // TODO: x,y - signed, w,h - unsigned (currently all 4 unsigned)
        },
        Vertex3f: function(x, y, z) {
            serialize3fv(70, x, y, z);
        },
        Vertex3fv: function(v) {
            serialize3fv(70, v[0], v[1], v[2]);
        },
        Color3f: function(r, g, b) {
            serialize3fv(8, r, g, b);
        },
        Normal3f: function(x, y, z) {
            serialize3fv(30, x, y, z);
        },
        Normal3fv: function(v) {
            serialize3fv(70, v[0], v[1], v[2]);
        },
        Color4f: function(r, g, b, a) {
            serialize4fv(16, r, g, b, a);
        },
        Scalef: function(x, y, z) {
            serialize3fv(188, x, y, z);
        },
        Translatef: function(x, y, z) {
           serialize3fv(190, x, y, z);
        },
        ClearColor: function(r, g, b, a) {
            serialize4fv(0x82, r, g, b, a);
        },
        MatrixMode: function(mode) {
            serialize1i(179, mode);
        },
        Enable: function(value) {
            serialize1i(139, value);
        },
        Lightfv: function(light, name, p1, p2, p3, p4) {
            if (p1.length)
                serialize2i4f(87, light, name, p1[0], p1[1], p1[2], p1[3]);
            else
                serialize2i4f(87, light, name, p1, p2, p3, p4);
        },
        Materialfv: function(light, name, p1, p2, p3, p4) {
            if (p1.length)
                serialize2i4f(97, light, name, p1[0], p1[1], p1[2], p1[3]);
            else
                serialize2i4f(97, light, name, p1, p2, p3, p4);
        },
        Clear: function(mask) {
            serialize1i(0x7f, mask);
        },
        ShadeModel: function(model) {
            serialize1i(104, model);
        },
        BlendFunc: function(sfactor, dfactor) {
            serialize2i(160, sfactor, dfactor);
        },
        PointSize: function(r) {
            serialize1f(100, r);
        },
        Hint: function(target, mode) {
            serialize2i(85, target, mode);
        },
        BindTexture: function(target, texture) {
           serialize2i(4117, target, texture);
        },
        TexEnvf: function(target, pname, param) {
            serialize2i1f(112, target, pname, param);
        },
        TexParameterf: function(target, pname, param) {
            serialize2i1f(105, target, pname, param);
        },
        TexParameterfv: function(target, pname, param) {
            serialize2ifv(106, target, pname, param);
        },
        TexParameteri: function(target, pname, param) {
            serialize3i(107, target, pname, param);
        },
        TexImage2D: function(target, level, internalFormat, width, height, border, format, type, data) {

          render();

          var typeSize = [];
          typeSize[constants.FLOAT] = 4;
          typeSize[constants.BYTE] = 1;
          typeSize[constants.UNSIGNED_BYTE] = 1;

          var res = new Buffer(60 + data.length*typeSize[type]);
          res.writeUInt32LE(res.length, 0);
          res.writeUInt32LE(110, 4);

          res[8] = 0; // swapbytes
          res[9] = 0; // lsbfirst
          res.writeUInt16LE(0, 10);   // unused 

	/*
	defaults: (from http://stackoverflow.com/questions/21563590/glteximage2d-protocol-arguments?noredirect=1#comment32577251_21563590 )

	GL_UNPACK_SWAP_BYTES        boolean   false           true or false
	GL_UNPACK_LSB_FIRST         boolean   false           true or false
	GL_UNPACK_ROW_LENGTH        integer   0               [0,oo)
	GL_UNPACK_SKIP_ROWS         integer   0               [0,oo)
	GL_UNPACK_SKIP_PIXELS       integer   0               [0,oo)
	GL_UNPACK_ALIGNMENT         integer   4               1, 2, 4, or 8

	*/

          res.writeUInt32LE(0, 12);   // rowlength
          res.writeUInt32LE(0, 16);  // skiprows
          res.writeUInt32LE(0, 20);  // skippixels
          res.writeUInt32LE(4, 24);  // alignment

          res.writeUInt32LE(target, 28);
          res.writeUInt32LE(level, 32);
          res.writeUInt32LE(internalFormat, 36);
          res.writeUInt32LE(width, 40);
          res.writeUInt32LE(height, 44);
          res.writeUInt32LE(border, 48);
          res.writeUInt32LE(format, 52);
          res.writeUInt32LE(type, 56);

          switch(type) {
          case constants.FLOAT:
            for (var i=0; i < data.length; ++i)
              res.writeFloatLE(data[i], 60+i*typeSize[type]);
            break;
          case constants.BYTE:
          case constants.UNSIGNED_BYTE:
            for (var i=0; i < data.length; ++i)
              res[60+i] = data[i];
            break;
          default:
            throw new Error('unsupported texture type:' + type);
          }

          // bake sure buffer for glxRender request is emptied first 
          render();
          
          var dataLen = res.length;
          var maxSize = 262124;
          var totalRequests = 1 + parseInt(dataLen / maxSize) - 1;
          if (dataLen % maxSize)
            totalRequests++;

          // for some reason RenderLarge does not like everything to be sent in one go
          // add one extra buffer request for small requests
          if (dataLen < maxSize) {
            GLX.RenderLarge(ctx, 1, 2, res);
            GLX.RenderLarge(ctx, 2, 2, Buffer(0));
            return;
          }
       
          var pos = 0;
          var reqNum = 1;
          while(dataLen > 0) {
            if (dataLen < maxSize) {
              GLX.RenderLarge(ctx, reqNum, totalRequests, res.slice(pos));
              break;
            } else {
              GLX.RenderLarge(ctx, reqNum, totalRequests, res.slice(pos, pos + maxSize));
              pos += maxSize;
              dataLen -= maxSize;
              reqNum++;
            }
          }
          
        },
     
        ProgramString: function(target, format, src) {
          serialize3i(target, format, src);
          buffers.push(Buffer(src));
        },

        BindProgram: function(target, program) {
          serialize2i(target, format, src);
        },

        

        TexCoord2f: function(x, y) {
            serialize2f(54, x, y);
        }
    };

    // import all constants
    for (var c in constants)
        renderContext[c] = constants[c];

    // bind some glx functions
    'NewList EndList GenLists GenTextures IsTexture SwapBuffers Finish'.split(' ').forEach(function(name) {
        // todo: small camelCase ? to be consistent with webgl api
        //renderContext[name] = GLX[name].bind(GLX, ctx);

        // flush render buffer before glx requests
        renderContext[name] = function(p1, p2, p3, p4, p5, p6, p7, p8) {
            render();
            GLX[name](ctx, p1, p2, p3, p4, p5, p6, p7, p8);
        }
    });

    return renderContext;
}
};
BundleModuleCode['x11/core/ext/randr']=function (module,exports,global,process){
// http://www.x.org/releases/X11R7.6/doc/randrproto/randrproto.txt

var x11 = Require('x11/core/x11');
// TODO: move to templates

exports.requireExt = function(display, callback)
{
    var X = display.client;
    X.QueryExtension('RANDR', function(err, ext) {

        if (!ext.present)
            return callback(new Error('extension not available'));

        //ext.ReportLevel	= {
        //};

        ext.QueryVersion = function(clientMaj, clientMin, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 0, 3, clientMaj, clientMin]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('LL');
                    return res;
                },
                callback
            ];
            X.pack_stream.flush();
        },

        ext.events = {
            RRScreenChangeNotify: 0
        },

        ext.NotifyMask = {
            ScreenChange: 1,
            CrtcChange: 2,
            OutputChange: 4,
            OutputProperty: 8,
            All: 15
        };

        ext.Rotation = {
            Rotate_0: 1,
            Rotate_90: 2,
            Rotate_180: 4,
            Rotate_270: 8,
            Reflect_X: 16,
            Reflect_Y: 32
        };

        ext.ConfigStatus = {
            Sucess: 0,
            InvalidConfigTime: 1,
            InvalidTime: 2,
            Failed: 3
        };

        ext.ModeFlag = {
            HSyncPositive: 1,
            HSyncNegative: 2,
            VSyncPositive: 4,
            VSyncNegative: 8,
            Interlace: 16,
            DoubleScan: 32,
            CSync: 64,
            CSyncPositive: 128,
            CSyncNegative: 256,
            HSkewPresent: 512,
            BCast: 1024,
            PixelMultiplex: 2048,
            DoubleClock: 4096,
            ClockDivideBy2: 8192
        }

        ext.SetScreenConfig = function(win, ts, configTs, sizeId, rotation, rate, cb) {
            X.seq_num ++;
            X.pack_stream.pack('CCSLLLSSSS', [ext.majorOpcode, 2, 6, win, ts, configTs, sizeId, rotation, rate, 0]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('LLLSSLL');
                    return {
                        status : opt,
                        newTs : res [0],
                        configTs : res[1],
                        root : res[2],
                        subpixelOrder : res[3]
                    }
                },
                function(err, res) {
                    var err;
                    if (res.status !== 0) {
                        err = new Error('SetScreenConfig error');
                        err.code = res.status;
                    }

                    cb(err, res);
                }
            ];

            X.pack_stream.flush();
        },

        ext.SelectInput = function(win, mask)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSLSS', [ext.majorOpcode, 4, 3, win, mask, 0]);
            X.pack_stream.flush();
        },

        ext.GetScreenInfo = function(win, cb) {
            X.seq_num ++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 5, 2, win]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var i, j;
                    var res = buf.unpack('LLLSSSSSS');
                    var info = {
                        rotations : opt,
                        root : res [0],
                        timestamp : res[1],
                        config_timestamp : res[2],
                        sizeID : res[4],
                        rotation : res[5],
                        rate : res[6],
                        rates: []
                    };

                    var nSizes = res[3];
                    var nRates = res[7];

                    var screens_len = nSizes << 2;
                    var format = Array(screens_len + 1).join('S');
                    res = buf.unpack(format, 24);
                    info.screens = [];
                    for (i = 0; i < screens_len; i += 4) {
                        info.screens.push({
                            px_width : res[i],
                            px_height : res[i + 1],
                            mm_width : res[i + 2],
                            mm_height : res[i + 3]
                        });
                    }

                    format = Array(nRates + 1).join('S');
                    info.rates = buf.unpack(format, 24 + screens_len * 2);
                    return info;
                },
                cb
            ];

            X.pack_stream.flush();
        },

        ext.GetScreenResources = function(win, cb)
        {
            X.seq_num ++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 8, 2, win]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var i;
                    var pos = 0;
                    var res = buf.unpack('LLSSSSxxxxxxxx');
                    var resources = {
                        timestamp : res[0],
                        config_timestamp : res[1],
                        modeinfos : []
                    };

                    pos += 24;
                    var format = Array(res[2] + 1).join('L');
                    resources.crtcs = buf.unpack(format, pos);
                    pos +=  res[2] << 2;
                    format = Array(res[3] + 1).join('L');
                    resources.outputs = buf.unpack(format, pos);
                    pos +=  res[3] << 2;
                    format = Array(res[4] + 1).join('LSSLSSSSSSSSL');
                    res_modes = buf.unpack(format, pos);
                    pos +=  res[4] << 5;
                    for (i = 0; i < res[4]; i+= 13) {
                        resources.modeinfos.push({
                            id : res_modes[i + 0],
                            width : res_modes[i + 1],
                            height : res_modes[i + 2],
                            dot_clock : res_modes[i + 3],
                            h_sync_start : res_modes[i + 4],
                            h_sync_end : res_modes[i + 5],
                            h_total : res_modes[i + 6],
                            h_skew : res_modes[i + 7],
                            v_sync_start : res_modes[i + 8],
                            v_sync_end : res_modes[i + 9],
                            v_total : res_modes[i + 10],
                            modeflags : res_modes[i + 12],
                            name : buf.slice(pos, pos + res_modes[i + 11]).toString()
                        });

                        pos += res_modes[i + 11];
                    }

                    return resources;
                },
                cb
            ];

            X.pack_stream.flush();
        },
        ext.GetOutputInfo = function(output, ts, cb)
        {
            X.seq_num ++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 9, 3, output, ts ]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var i;
                    var pos = 0;
                    var res = buf.unpack('LLLLCCSSSSS');
                    var info = {
                        timestamp : res[0],
                        crtc : res[1],
                        mm_width : res[2],
                        mm_height : res[3],
                        connection : res[4],
                        subpixelOrder : res[5],
                        preferredModes: res[8]
                    };

                    pos += 28;
                    var format = Array(res[6] + 1).join('L');
                    info.crtcs = buf.unpack(format, pos);
                    pos +=  res[6] << 2;
                    format = Array(res[7] + 1).join('L');
                    info.modes = buf.unpack(format, pos);
                    pos +=  res[7] << 2;
                    format = Array(res[9] + 1).join('L');
                    info.clones = buf.unpack(format, pos);
                    pos +=  res[9] << 2;
                    info.name = buf.slice(pos, pos + res_modes[10]).toString('binary');
                    return info;
                },
                cb
            ];

            X.pack_stream.flush();
        },
        ext.GetCrtcInfo = function(crtc, configTs, cb) {
            X.seq_num ++;
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 20, 3, crtc, configTs ]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var pos = 0;
                    var res = buf.unpack('LssSSLSSSS');
                    var info = {
                        status : opt,
                        timestamp : res[0],
                        x : res[1],
                        y : res[2],
                        width : res[3],
                        height : res[4],
                        mode : res[5],
                        rotation : res[6],
                        rotations : res[7]
                    };

                    pos += 24;
                    var format = Array(res[8] + 1).join('L');
                    info.output = buf.unpack(format, pos);
                    format = Array(res[9] + 1).join('L');
                    info.possible = buf.unpack(format, pos);
                    return info;
                },
                cb
            ];

            X.pack_stream.flush();
        },

        X.eventParsers[ext.firstEvent + ext.events.RRScreenChangeNotify] = function(type, seq, extra, code, raw)
        {
            var event = {};
            event.raw = raw;
            event.type = type
            event.seq = seq;
            event.rotation = code;
            var values = raw.unpack('LLLSSSSSS');
            event.time = extra
            event.configtime = values[0];
            event.root = values[1];
            event.requestWindow = values[2];
            event.sizeId = values[3];
            event.subpixelOrder = values[4];
            event.width = values[5];
            event.height = values[6];
            event.physWidth = values[7];
            event.physHeight = values[8];

            event.name = 'RRScreenChangeNotify';
            return event;
        };


        ext.QueryVersion(255, 255, function(err, version) {
          if (err) return callback(err);
          ext.major_version = version[0];
          ext.minor_version = version[1];
          callback(null, ext);
        });
    });
}
};
BundleModuleCode['x11/core/ext/render']=function (module,exports,global,process){
var x11 = Require('x11/core/x11');
var xutil = Require('x11/core/xutil');

// adding XRender functions manually from
//     http://cgit.freedesktop.org/xcb/proto/tree/src/render.xml?id=HEAD
// and http://www.x.org/releases/X11R7.6/doc/renderproto/renderproto.txt
// TODO: move to templates
exports.requireExt = function(display, callback)
{

        var X = display.client;
        X.QueryExtension('RENDER', function(err, ext) {

            if (!ext.present)
            {
                return callback(new Error('extension not available'));
            }

            ext.QueryVersion = function(clientMaj, clientMin, callback)
            {
                X.seq_num++;
                X.pack_stream.pack('CCSLL', [ext.majorOpcode, 0, 3, clientMaj, clientMin]);
                X.replies[X.seq_num] = [
                    function(buf, opt) {
                        var res = buf.unpack('LL');
                        return res;
                    },
                    callback
                ];
                X.pack_stream.flush();
            }

            ext.QueryPictFormat = function(callback)
            {
                X.pack_stream.pack('CCS', [ext.majorOpcode, 1, 1]);
                X.seq_num++;
                X.replies[X.seq_num] = [
                    function (buf, opt) {
                        var res = {};
                        var res1 = buf.unpack('LLLLL');
                        var num_formats = res1[0];
                        var num_screens = res1[1];
                        var num_depths = res1[2];
                        var num_visuals = res1[3];
                        var num_subpixel = res1[4];
                        // formats list:
                        var offset = 24;
                        res.formats = [];
                        for (var i=0; i < num_formats; ++i)
                        {
                            var format = {};
                            var f = buf.unpack('LCCxxSSSSSSSSL', offset);
                            res.formats.push(f);
                            offset += 28;
                        }
                        return res;
                    },
                    callback
                ];
                X.pack_stream.flush();
            }

            ext.QueryFilters = function(callback)
            {
                X.pack_stream.pack('CCSL', [ext.majorOpcode, 29, 2, display.screen[0].root]);
                X.seq_num++;
                X.replies[X.seq_num] = [
                    function(buf, opt) {
                        var h = buf.unpack('LL');
                        var num_aliases = h[0];
                        var num_filters = h[1];
                        var aliases = [];
                        var offset = 24; // LL + 16 bytes pad
                        for (var i=0; i < num_aliases; ++i)
                        {
                            aliases.push(buf.unpack('S', offset)[0]);
                            offset+=2;
                        }
                        var filters = [];
                        for (var i=0; i < num_filters; ++i)
                        {
                            var len = buf.unpack('C', offset)[0];
                            //if (!len) break;
                            offset++;
                            filters.push(buf.toString('ascii', offset, offset+len));
                            offset+=len;
                        }
                        return [aliases, filters];
                    },
                    callback
                ];
                X.pack_stream.flush();
            }

            var valueList = [
                ['repeat', 'Cxxx'],
                ['alphaMap', 'L'],
                ['alphaXOrigin', 'sxx'],
                ['alphaYOrigin', 'sxx'],
                ['clipXOrigin', 'sxx'],
                ['clipYOrigin', 'sxx'],
                ['clipMask', 'L'],
                ['graphicsExposures', 'Cxxx'],
                ['subwindowMode', 'Cxxx'],
                ['polyEdge', 'Cxxx'],
                ['polyMode', 'Cxxx'],
                ['dither', 'L'],
                ['componentAlpha', 'Cxxx']
            ];

            var argumentLength = {
                C: 1,
                S: 2,
                s: 2,
                L: 4,
                x: 1
            };

            ext.CreatePicture = function(pid, drawable, pictformat, values)
            {
                var mask = 0;
                var reqLen = 5; // + (values + pad)/4
                var format = 'CCSLLLL';
                var params = [ext.majorOpcode, 4, reqLen, pid, drawable, pictformat, mask];

                if (values)
                {
                    var valuesLength = 0;
                    for (var i=0; i < valueList.length; ++i)
                    {
                        var name = valueList[i][0];
                        var val = values[name];
                        if (val) {
                            mask |= (1 << i);
                            params.push(val);
                            var valueFormat = valueList[i][1];
                            format += valueFormat;
                            valuesLength += 4; //argumentLength[valueFormat];
                        }
                    }
                    var pad4 = (valuesLength + 3) >> 2;
                    var toPad = (pad4 << 2) - valuesLength;
                    for (var i=0; i < toPad; ++i)
                        format += 'x';
                    reqLen += pad4;
                    params[2] = reqLen;
                    params[6] = mask;
                }
                X.pack_stream.pack(format, params);
                X.pack_stream.flush();
                X.seq_num++;
            }

            ext.FreePicture = function(pid) {
              X.pack_stream.pack('CCSL', [ext.majorOpcode, 7, 2, pid]);
              X.pack_stream.flush();
              X.seq_num++;
            };

            function floatToFix(f)
            {
                return parseInt(f*65536);
            }

            function colorToFix(f)
            {
              if (f < 0) f = 0;
              if (f > 1) f = 1;
              return parseInt(f*65535);
            }

            ext.SetPictureTransform = function(pid, matrix) {
              var format = 'CCSLLLLLLLLLL';
              if (matrix.length !== 9)
                throw 'Render.SetPictureTransform: incorrect transform matrix. Must be array of 9 numbers';
              var params = [ext.majorOpcode, 28, 11, pid];
              for (var i=0; i < 9; ++i) {
                if (typeof matrix[i] !== 'number')
                  throw 'Render.SetPictureTransform: matrix element must be a number';
                params.push(floatToFix(matrix[i]));
              }
              X.pack_stream.pack(format, params);
              X.pack_stream.flush();
              X.seq_num++;
            };

            // see example of blur filter here: https://github.com/richoH/rxvt-unicode/blob/master/src/background.C
            ext.SetPictureFilter = function(pid, name, filterParams)
            {
                if (filterParams === 0)
                  filterParams = [0];
                if (!filterParams)
                  filterParams = [];
                if (!Array.isArray(filterParams))
                  filterParams = [filterParams];

                var reqLen = 2;
                var format = 'CCSLSxxp';
                var params = [ext.majorOpcode, 30, reqLen, pid, name.length, name];
                reqLen += xutil.padded_length(name.length+3)/4 + filterParams.length;

                if (name == 'nearest' || name == 'bilinear' || name == 'fast' || name == 'good' || name == 'best') {
                  if (filterParams.length !== 0) {
                    throw 'Render.SetPictureFilter: "' + name + '" - unexpected parameters for filters';
                  }
                } else if (name == 'convolution') {
                   if (filterParams.length < 2 || ((filterParams[0]*filterParams[1] + 2) !== filterParams.length) ) {
                     throw 'Render.SetPictureFilter: "convolution" - incorrect matrix dimensions. Must be flat array [ w, h, elem1, elem2, ... ]';
                   }
                   for (var i=0; i < filterParams.length; ++i) {
                      format += 'L';
                      params.push(floatToFix(filterParams[i]));
                   }
                } else if (name == 'binomial' || name == 'gaussian') {
                   if (filterParams.length !== 1) {
                     throw 'Render.SetPictureFilter: "' + name + '" - incorrect number of parameters, must be exactly 1 number, instead got: ' + filterParams;
                   }
                  format += 'L';
                  params.push(floatToFix(filterParams[0]));
                } else {
                    throw 'Render.SetPictureFilter: unknown filter "' + name + '"';
                }
                params[2] = reqLen;
                X.pack_stream.pack(format, params);
                X.pack_stream.flush();
                X.seq_num++;
            };

            ext.CreateSolidFill = function(pid, r, g, b, a)
            {
                X.pack_stream.pack('CCSLSSSS', [ext.majorOpcode, 33, 4, pid, colorToFix(r), colorToFix(g), colorToFix(b), colorToFix(a)]);
                X.pack_stream.flush();
                X.seq_num++;
            };

            ext.RadialGradient = function(pid, p1, p2, r1, r2, stops)
            {
                var reqLen = 9+stops.length*3;  //header + params + 1xStopfix+2xColors
                var format = 'CCSLLLLLLLL';
                var params = [ext.majorOpcode, 35, reqLen, pid];
                params.push(floatToFix(p1[0])); // L
                params.push(floatToFix(p1[1]));
                params.push(floatToFix(p2[0]));
                params.push(floatToFix(p2[1])); // L
                params.push(floatToFix(r1)); // L
                params.push(floatToFix(r2)); // L
                params.push(stops.length);

                // [ [float stopDist, [float r, g, b, a] ], ...]
                // stop distances
                for (var i=0; i < stops.length; ++i)
                {
                    format += 'L';
                    // TODO: we know total params length in advance. ? params[index] =
                    params.push(floatToFix(stops[i][0]))
                }
                // colors
                for (var i=0; i < stops.length; ++i)
                {
                    format += 'SSSS';
                    for (var j=0; j < 4; ++j)
                        params.push(colorToFix(stops[i][1][j]));
                }
                X.pack_stream.pack(format, params);
                X.pack_stream.flush();
                X.seq_num++;
            };

            ext.LinearGradient = function(pid, p1, p2, stops)
            {
                var reqLen = 7+stops.length*3;  //header + params + 1xStopfix+2xColors
                var format = 'CCSLLLLLL';
                var params = [ext.majorOpcode, 34, reqLen, pid];
                params.push(floatToFix(p1[0])); // L
                params.push(floatToFix(p1[1]));
                params.push(floatToFix(p2[0]));
                params.push(floatToFix(p2[1])); // L

                params.push(stops.length);

                // [ [float stopDist, [float r, g, b, a] ], ...]
                // stop distances
                for (var i=0; i < stops.length; ++i)
                {
                    format += 'L';
                    // TODO: we know total params length in advance. ? params[index] =
                    params.push(floatToFix(stops[i][0]))
                }
                // colors
                for (var i=0; i < stops.length; ++i)
                {
                    format += 'SSSS';
                    for (var j=0; j < 4; ++j)
                        params.push(colorToFix(stops[i][1][j]));
                }
                X.pack_stream.pack(format, params);
                X.pack_stream.flush();
                X.seq_num++;
            }

            ext.ConicalGradient = function(pid, center, angle, stops)
            {
                var reqLen = 6+stops.length*3;  //header + params + 1xStopfix+2xColors
                var format = 'CCSLLLLL';
                var params = [ext.majorOpcode, 36, reqLen, pid];
                params.push(floatToFix(center[0])); // L
                params.push(floatToFix(center[1]));
                params.push(floatToFix(angle)); // L

                params.push(stops.length);

                // [ [float stopDist, [float r, g, b, a] ], ...]
                // stop distances
                for (var i=0; i < stops.length; ++i)
                {
                    format += 'L';
                    // TODO: we know total params length in advance. ? params[index] =
                    params.push(floatToFix(stops[i][0]))
                }
                // colors
                for (var i=0; i < stops.length; ++i)
                {
                    format += 'SSSS';
                    for (var j=0; j < 4; ++j)
                        params.push(colorToFix(stops[i][1][j]));
                }
                X.pack_stream.pack(format, params);
                X.pack_stream.flush();
                X.seq_num++;
            }

            ext.FillRectangles = function(op, pid, color, rects)
            {
                var reqLen = 5+rects.length/2;
                var format = 'CCSCxxxLSSSS';
                var params = [ext.majorOpcode, 26, reqLen, op, pid];
                for (var j=0; j < 4; ++j)
                    params.push(colorToFix(color[j]));
                for (var i=0; i < rects.length; i+=4)
                {
                    format += 'ssSS';
                    params.push(rects[i*4]);
                    params.push(rects[i*4 + 1]);
                    params.push(rects[i*4 + 2]);
                    params.push(rects[i*4 + 3]);
                }
                X.pack_stream.pack(format, params);
                X.pack_stream.flush();
                X.seq_num++;
            }

            ext.Composite = function(op, src, mask, dst, srcX, srcY, maskX, maskY, dstX, dstY, width, height)
            {
                X.pack_stream.pack(
                    'CCSCxxxLLLssssssSS',
                    [ext.majorOpcode, 8, 9, op, src, mask, dst, srcX, srcY, maskX, maskY, dstX, dstY, width, height]
                )
                .flush();
                X.seq_num++;
            }

            // note that Trapezoids is considered deprecated by Render extension
            ext.Trapezoids = function(op, src, srcX, srcY, dst, maskFormat, trapz)
            {
                var format = 'CCSCxxxLLLss';
                var params = [ext.majorOpcode, 10, 6+trapz.length, op, src, dst, maskFormat, srcX, srcY];
                for (var i=0; i < trapz.length; i++)
                {
                    format += 'llllllllll';
                    for (var j=0; j < 10; ++j)
                        params.push(floatToFix(trapz[i*10 + j]));
                }
                X.pack_stream.pack(format, params);
                X.pack_stream.flush();
                X.seq_num++;
            };

            ext.AddTraps = function(pic, offX, offY, trapList) {
              var format = 'CCSLss';
              var params = [ext.majorOpcode, 32, 3+trapList.length, pic, offX, offY];
              for (var i=0; i < trapList.length; i++)
              {
                format += 'l';
                params.push(floatToFix(trapList[i]));
              }
              X.pack_stream.pack(format, params);
              X.pack_stream.flush();
              X.seq_num++;
            };

            ext.Triangles = function(op, src, srcX, srcY, dst, maskFormat, tris)
            {
                var format = 'CCSCxxxLLLss';
                var params = [ext.majorOpcode, 11, 6+tris.length, op, src, dst, maskFormat, srcX, srcY];
                for (var i=0; i < tris.length; i+=6)
                {
                    format += 'llllll';
                    //TODO: Array.copy
                    params.push(floatToFix(tris[i + 0])); // x1
                    params.push(floatToFix(tris[i + 1])); // y1
                    params.push(floatToFix(tris[i + 2])); // x2
                    params.push(floatToFix(tris[i + 3])); // y2
                    params.push(floatToFix(tris[i + 4])); // x3
                    params.push(floatToFix(tris[i + 5])); // y3
                }
                X.pack_stream.pack(format, params);
                X.pack_stream.flush();
                X.seq_num++;
            }

            ext.CreateGlyphSet = function(gsid, format) {
                X.pack_stream.pack('CCSLL', [ext.majorOpcode, 17, 3, gsid, format]);
                X.pack_stream.flush();
                X.seq_num++;
            }

            ext.ReferenceGlyphSet = function(gsid, existing) {
                X.pack_stream.pack('CCSLL', [ext.majorOpcode, 18, 3, gsid, existing]);
                X.pack_stream.flush();
                X.seq_num++;
            }

            ext.FreeGlyphSet = function(gsid) {
                X.pack_stream.pack('CCSL', [ext.majorOpcode, 19, 2, gsid]);
                X.pack_stream.flush();
                X.seq_num++;
            }

            ext.AddGlyphs = function(gsid, glyphs) {
                var numGlyphs = glyphs.length;
                var imageBytes = 0;
                var glyphPaddedLength;
                var glyphLength;
                var stride;
                var glyph;
                for (var i = 0; i < numGlyphs; i++) {
                  glyph = glyphs[i];
                  if (glyph.width % 4 !== 0) {
                    var stride = (glyph.width+3)&~3;
                    var res = new Buffer(glyph.height*stride);
                    res.fill(0);
                    for (var y=0; y < glyph.height; ++y) {
                      glyph.image.copy(res, y*stride, y*glyph.width, y*glyph.width + glyph.width);
                    }
                    glyph.image = res;
                    glyph.width = stride;
                  }
                  glyphLength = glyphs[i].image.length;
                  imageBytes += glyphLength;
                  glyph.offX = glyph.offX / 64;
                  glyph.offY = glyph.offY / 64;
                }
                var len = numGlyphs * 4 + imageBytes/4 + 3;
                // TODO: check length, use bigReq
                // X.pack_stream.pack('CCSLL', [ext.majorOpcode, 20, len, gsid, glyphs.length]);

                // BigReq: S + [ length ] replaced with SL + [ 0, length+1 ]
                X.pack_stream.pack('CCSLLL', [ext.majorOpcode, 20, 0, len+1, gsid, glyphs.length]);

                // glyph ids
                for (i = 0; i < numGlyphs; i++) {
                  X.pack_stream.pack('L', [glyphs[i].id]);
                }
                // width + heiht + origin xy + advance xy
                for (i = 0; i < numGlyphs; i++) {
                  X.pack_stream.pack('SSssss', [glyphs[i].width, glyphs[i].height, -glyphs[i].x, glyphs[i].y, glyphs[i].offX, glyphs[i].offY]);
                }
                // image
                for (i = 0; i < numGlyphs; i++) {
                  X.pack_stream.write_queue.push(glyphs[i].image);
                }
                X.pack_stream.flush();
                X.seq_num++;
            }

            //AddGlyphsFromPicture, opcode=21 (not in spec)
            // FreeGlyps - opcode 22
            // gsid(L) , glyphs.length (L) + each glyph id (L)
            //

            // each GlyphEle:
            // 1 byte - number of glyphs
            // xxx
            // int16 deltax, deltay
            // + list of 8/16/32 byte indexesext.CompositeGlyphs
            //  OR
            //  255 + 0 + 0 + glyphsetId / font:
            //  CxxxssL, [255, 0, 0, glyphable]
            //
            //  Each GlyphEle must be padded to 4 byte boundary
            //
            // glyphs as input:
            // [ "just string (0,0) offset is used", [ 10, 10, "string offseted 10,10 from previous pen position" ], 1234567 ] 1234567 is glypfset id or FONT


            // TODO: pre-process input so strings larger than 254 chars are supported
            // (split them into multiple entries with 0,0 offset)

            var formatFromBits = [,,,,,,,,'C',,,,,,,,'S',,,,,,,,,,,,,,,,'L'];
            var bufferWriteBits = [,,,,,,,,'writeUInt8',,,,,,,,'writeUInt16LE',,,,,,,,,,,,,,,,'writeUInt32LE'];

            // 8/16/32 bit string + 4-byte pad
            function wstring(bits, s) {
              var charLength = bits / 8;
              var dataLength = s.length*charLength;
              var res = new Buffer(xutil.padded_length(dataLength));
              debugger;
              var write = res[bufferWriteBits[bits]]
              res.fill(0);
              for(var i=0; i < s.length; i++)
                write.call(res, s.charCodeAt(i), i*charLength);
              return res;
            }

            var compositeGlyphsOpcodeFromBits = [,,,,,,,,23,,,,,,,,24,,,,,,,,,,,,,,,,25];
            ext.CompositeGlyphs = function(glyphBits, op, src, dst, maskFormat, gsid, srcX, srcY, glyphs)
            {
                var opcode = compositeGlyphsOpcodeFromBits[glyphBits];
                var charFormat = formatFromBits[glyphBits];
                var charLength = glyphBits / 8;
                var length = 7;
                var glyphs_length_split = [];
                for (var i=0; i < glyphs.length; ++i) {
                  var g = glyphs[i];
                  switch (typeof g) {
                    case 'string':
                      length += xutil.padded_length(g.length*charLength)/4 + 2;
                      break;
                    case 'object':
                      length += xutil.padded_length(g[2].length*charLength)/4 + 2;
                      break;
                    case 'number': // glyphset id
                      length += 3;
                      break;
                  }
                }
                X.pack_stream.pack(
                    'CCSCxxxLLLLss',
                    [ext.majorOpcode, opcode, length, op, src, dst, maskFormat, gsid, srcX, srcY]
                );
                for (var i=0; i < glyphs.length; ++i) {
                  var g = glyphs[i];
                  switch (typeof g) {
                    case 'string':
                      X.pack_stream.pack('Cxxxssa', [g.length, 0, 0, wstring(glyphBits, g)]);
                      break;
                    case 'object': // array
                      X.pack_stream.pack('Cxxxssa', [g[2].length, g[0], g[1], wstring(glyphBits, g[2])]);
                      break;
                    case 'number': // glyphset id
                      X.pack_stream.pack('CxxxSSL', [0xff, 0, 0, g]);
                      break;
                  }
                }
                X.pack_stream.flush();
                X.seq_num++;
            };

      ext.CompositeGlyphs8 = function(op, src, dst, maskFormat, gsid, srcX, srcY, glyphs)
      {
         return ext.CompositeGlyphs(8, op, src, dst, maskFormat, gsid, srcX, srcY, glyphs);
      };

      ext.CompositeGlyphs16 = function(op, src, dst, maskFormat, gsid, srcX, srcY, glyphs)
      {
         return ext.CompositeGlyphs(16, op, src, dst, maskFormat, gsid, srcX, srcY, glyphs);
      };

      ext.CompositeGlyphs32 = function(op, src, dst, maskFormat, gsid, srcX, srcY, glyphs)
      {
         return ext.CompositeGlyphs(32, op, src, dst, maskFormat, gsid, srcX, srcY, glyphs);
      };

            // TODO: implement xutil-like code https://github.com/alexer/python-xlib-render/blob/master/xutil.py

            // TODO: name format fields
            // 0 - id
            // 1 - type ( direct / ? /)
            // 2 - depth
            //
            // 3 - red shift
            // 4 - red mask
            // 5 - green shift
            // 6 - green mask
            // 7 - blue shift
            // 8 - blue mask
            // 9 - alpha shift
            // 10 - alpha mask

            // 11 - colormap or none

            ext.QueryPictFormat(function(err, formats) {
                if (err)
                    return callback(err);
                for (var i=0; i < formats.formats.length; ++i) {
                    var f = formats.formats[i];
                    if (f[2] == 1 && f[10] == 1)
                        ext.mono1 = f[0] ;
                    if (f[2] == 24 && f[3] == 16 && f[5] == 8 && f[7] == 0)
                        ext.rgb24 = f[0];
                    // 1, 32, 16, 255, 8, 255, 0, 255, 24, 255, 0
                    if (f[2] == 32 && f[3] == 16 && f[4] == 255 && f[5] == 8 && f[6] == 255 && f[7] == 0 && f[9] == 24)
                        ext.rgba32 = f[0] ;
                    if (f[2] == 8 && f[10] == 255)
                        ext.a8 = f[0];
                }
                callback(null, ext);
            });

            [
              "PICTFORMAT argument does not name a defined PICTFORMAT",
              "PICTURE argument does not name a defined PICTURE",
              "PICTOP argument does not name a defined PICTOP",
              "GLYPHSET argument does not name a defined GLYPHSET",
              "GLYPH argument does not name a defined GLYPH in the glyphset"
            ].forEach(function(desc, code) {
              X.errorParsers[ext.firstError + code] = function(err) {
                err.message = "XRender: a value for a " + desc;
              };
            });

            ext.PictOp = {
              Minimum:    0,
              Clear:    0,
              Src:    1,
              Dst:    2,
              Over:    3,
              OverReverse:   4,
              In:    5,
              InReverse:    6,
              Out:    7,
              OutReverse:    8,
              Atop:    9,
              AtopReverse:    10,
              Xor:    11,
              Add:    12,
              Saturate:    13,
              Maximum:    13,

            /*,
             * Operators only available in version 0.2,
             */
              DisjointMinimum:    0x10,
              DisjointClear:    0x10,
              DisjointSrc:    0x11,
              DisjointDst:    0x12,
              DisjointOver:    0x13,
              DisjointOverReverse:    0x14,
              DisjointIn:    0x15,
              DisjointInReverse:    0x16,
              DisjointOut:    0x17,
              DisjointOutReverse:    0x18,
              DisjointAtop:    0x19,
              DisjointAtopReverse:    0x1a,
              DisjointXor:    0x1b,
              DisjointMaximum:    0x1b,

              ConjointMinimum:    0x20,
              ConjointClear:    0x20,
              ConjointSrc:    0x21,
              ConjointDst:    0x22,
              ConjointOver:    0x23,
              ConjointOverReverse:    0x24,
              ConjointIn:    0x25,
              ConjointInReverse:    0x26,
              ConjointOut:    0x27,
              ConjointOutReverse:    0x28,
              ConjointAtop:    0x29,
              ConjointAtopReverse:    0x2a,
              ConjointXor:    0x2b,
              ConjointMaximum:    0x2b,

            /*,
             * Operators only available in version 0.11,
             */
              BlendMinimum :    0x30,
              Multiply     :    0x30,
              Screen       :    0x31,
              Overlay      :    0x32,
              Darken       :    0x33,
              Lighten      :    0x34,
              ColorDodge   :    0x35,
              ColorBurn    :    0x36,
              HardLight    :    0x37,
              SoftLight    :    0x38,
              Difference   :    0x39,
              Exclusion    :    0x3a,
              HSLHue       :    0x3b,
              HSLSaturation:    0x3c,
              HSLColor     :    0x3d,
              HSLLuminosity:    0x3e,
              BlendMaximum :    0x3e
            };

          ext.PolyEdge = {
            Sharp: 0,
            Smooth: 1
          };

          ext.PolyMode = {
            Precise: 0,
            Imprecise: 1
          };

          ext.Repeat = {
            None: 0,
            Normal: 1,
            Pad: 2,
            Reflect: 3
          };

          ext.Subpixel = {
            Unknown:       0,
            HorizontalRGB: 1,
            HorizontalBGR: 2,
            VerticalRGB  : 3,
            VerticalBGR  : 4,
            None         : 5
          };

          ext.Filters = {
            Nearest: 'nearest',
            Bilinear: 'bilinear',
            Convolution: 'convolution',
            Fast: 'fast',
            Good: 'good',
            Best: 'best'
          };
      });
}
};
BundleModuleCode['x11/core/ext/screen-saver']=function (module,exports,global,process){
// http://www.x.org/releases/X11R7.6/doc/scrnsaverproto/saver.pdf

var x11 = Require('x11/core/x11');
// TODO: move to templates

exports.requireExt = function(display, callback)
{
    var X = display.client;
    X.QueryExtension('MIT-SCREEN-SAVER', function(err, ext) {

        if (!ext.present)
            return callback(new Error('extension not available'));


        ext.QueryVersion = function(clientMaj, clientMin, cb)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSCCxx', [ext.majorOpcode, 0, 2, clientMaj, clientMin]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('CC');
                    return res;
                },
                cb
            ];
            X.pack_stream.flush();
        }

        ext.State = {
            Off: 0,
	    On: 1,
            Disabled: 2
        };

        ext.Kind = {
            Blanked: 0,
	    Internal: 1,
            External: 2
        };

        ext.QueryInfo = function(drawable, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 1, 2, drawable]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var info = {};
                    info.state = opt;
                    var res = buf.unpack('LLLLC');
                    info.window = res[0];
                    info.until = res[1];
                    info.idle = res[2];
                    info.eventMask = res[3];
                    info.kind = res[4]
                    return info;
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.eventMask = {
            Notify: 1,
            Cycle: 2
        };

        ext.SelectInput = function( drawable, eventMask )
        {
            X.seq_num++;
            console.log('CCSLL', [ext.majorOpcode, 2, 3, drawable, eventMask]);
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 2, 3, drawable, eventMask]);
            X.pack_stream.flush();
        }

        ext.QueryVersion(1, 1, function(err, vers) {
            if (err)
                return callback(err);
            ext.major = vers[0];
            ext.minor = vers[1];
            callback(null, ext);
        });

        ext.events = {
            ScreenSaverNotify: 0
        }

        ext.NotifyState = {
            Off: 0,
            On: 1,
            Cycle: 2
        }

        X.eventParsers[ext.firstEvent + ext.events.ScreenSaverNotify] = function(type, seq, extra, code, raw)
        {
            var event = {};
            event.state = code;
            event.seq = seq;
            event.time = extra;
            // CCSL = type, code, seq, extra
            var values = raw.unpack('LLCC');
            event.root = values[0];
            event.saverWindow = values[1];
            event.kind = values[2];
            event.forced = values[1];
            event.name = 'ScreenSaverNotify';
            return event;
        };
    });
}
};
BundleModuleCode['x11/core/ext/shape']=function (module,exports,global,process){
// http://www.x.org/releases/X11R7.6/doc/xextproto/shape.pdf

var x11 = Require('x11/core/x11');
// TODO: move to templates

exports.requireExt = function(display, callback)
{
        function captureStack()
        {
            var err = new Error;
            //err.name = reqName;
            Error.captureStackTrace(err, arguments.callee);
            display.client.seq2stack[display.client.seq_num] = err.stack;
        }

    var X = display.client;
    X.QueryExtension('SHAPE', function(err, ext) {

        if (!ext.present)
            return callback(new Error('extension not available'));

        ext.Kind = {
            Bounding: 0,
            Clip: 1,
            Input: 2
        };

        ext.Op = {
            Set: 0,
            Union: 1,
            Intersect: 2,
            Subtract: 3,
            Invert: 4
        };

        ext.Ordering = {
            Unsorted: 0,
            YSorted: 1,
            YXSorted: 2,
            YXBanded: 3
        };

        ext.QueryVersion = function(cb)
        {
            X.seq_num++;
//            captureStack();
            X.pack_stream.pack('CCSLL', [ext.majorOpcode, 0, 1]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('SS');
                    return res;
                },
                cb
            ];
            X.pack_stream.flush();
        }

        // Accepts rectangles as [[x, y, width, height]]
        ext.Rectangles = function( op, kind, window, x, y, rectangles, ordering /* = Ordering.Unsorted */ )
        {
            if (ordering === undefined)
                ordering = ext.Ordering.Unsorted;

            var length = 4 + rectangles.length * 2;

            X.seq_num++;
//            captureStack();
            X.pack_stream.pack('CCSCCCxLss', [ext.majorOpcode, 1, length, op, kind, ordering, window, x, y]);
            for (var i = 0; i < rectangles.length; ++i) {
                var r = rectangles[i];
                X.pack_stream.pack('ssSS', r);
            }
            X.pack_stream.flush();
        }

        ext.Mask = function( op, kind, window, x, y, bitmap )
        {
            X.seq_num++;
//            captureStack();
            X.pack_stream.pack('CCSCCxxLssL', [ext.majorOpcode, 2, 5, op, kind, window, x, y, bitmap]);
            X.pack_stream.flush();
        }

        ext.SelectInput = function( window, enable )
        {
            X.seq_num++;
//            captureStack();
            X.pack_stream.pack('CCSLCxxx', [ext.majorOpcode, 6, 3, window, enable ]);
            X.pack_stream.flush();
        }

        ext.InputSelected = function( window, cb )
        {
            X.seq_num++;
//            captureStack();
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 7, 2, window ]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    return opt;
                },
                cb
            ];
            X.pack_stream.flush();
        }

        callback(null, ext);

        /*
        ext.QueryVersion(function(err, version) {
            ext.major = version[0];
            ext.minor = version[1];
            callback(null, ext);
        });
        */

        ext.events = {
            ShapeNotify: 0
        }

        X.eventParsers[ext.firstEvent + ext.events.ShapeNotify] = function(type, seq, extra, code, raw)
        {
            var event = {};
            event.type = type;
            event.kind = code;
            event.seq = seq;

            event.window = extra;

            var values = raw.unpack('ssSSLC');

            event.x = values[0];
            event.y = values[1];
            event.width = values[2];
            event.height = values[3];
            event.time = values[4];
            event.shaped = values[5];
            event.name = 'ShapeNotify';

            return event;
        };
    });
}
};
BundleModuleCode['x11/core/ext/xc-misc']=function (module,exports,global,process){
// http://www.x.org/releases/X11R7.6/doc/xcmiscproto/xc-misc.pdf

var x11 = Require('x11/core/x11');
// TODO: move to templates

exports.requireExt = function(display, callback)
{
    var X = display.client;
    X.QueryExtension('XC-MISC', function(err, ext) {

        if (!ext.present)
            return callback(new Error('extension not available'));

        ext.QueryVersion = function(clientMaj, clientMin, cb)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSSS', [ext.majorOpcode, 0, 2, clientMaj, clientMin]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('SS');
                    return res;
                },
                cb
            ];
            X.pack_stream.flush();
        }

        ext.GetXIDRange = function(cb)
        {
            X.seq_num++;
            X.pack_stream.pack('CCS', [ext.majorOpcode, 1, 1]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('LL');
                    return {
                        startId: res[0],
                        count: res[1]
                    };
                },
                cb
            ];
            X.pack_stream.flush();
        }

        ext.GetXIDList = function( count, cb )
        {
            X.seq_num++;
            X.pack_stream.pack('CCSL', [ext.majorOpcode, 2, 2, count]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var numIds = buf.unpack('L')[0];
                    var res = [];
                    for (var i = 0; i < numIds; ++i)
                        res.push(buf.unpack('L', 24+i*4));
                    return res;
                },
                cb
            ];
            X.pack_stream.flush();
        }

        ext.QueryVersion(1, 1, function(err, vers) {
            if (err)
                return callback(err);
            ext.major = vers[0];
            ext.minor = vers[1];
            callback(null, ext);
        });
    });
}
};
BundleModuleCode['x11/core/ext/xtest']=function (module,exports,global,process){
// http://www.x.org/releases/X11R7.6/doc/xextproto/xtest.pdf

var x11 = Require('x11/core/x11');
// TODO: move to templates
exports.requireExt = function(display, callback)
{
    var X = display.client;
    X.QueryExtension('XTEST', function(err, ext) {

        if (!ext.present)
            return callback(new Error('extension not available'));

        ext.GetVersion = function(clientMaj, clientMin, callback)
        {
            X.seq_num++;
            X.pack_stream.pack('CCSCxS', [ext.majorOpcode, 0, 2, clientMaj, clientMin]);
            X.replies[X.seq_num] = [
                function(buf, opt) {
                    var res = buf.unpack('S');
                    // Major version is in byte 1 of Reply Header
                    // Minor version is in the body of the reply
                    return [ opt, res[0] ];
                },
                callback
            ];
            X.pack_stream.flush();
        }

        ext.KeyPress = 2;
        ext.KeyRelease = 3;
        ext.ButtonPress = 4;
        ext.ButtonRelease = 5;
        ext.MotionNotify = 6;

        ext.FakeInput = function( type, keycode, time, wid, x, y )
        {
            X.seq_num++;
            X.pack_stream.pack('CCSCCxxLLxxxxxxxxssxxxxxxxx', [ext.majorOpcode, 2, 9, type, keycode, time, wid, x, y]);
            X.pack_stream.flush();
        }

        callback(null, ext);
    });
}

};
BundleModuleCode['x11/core/keysyms']=function (module,exports,global,process){

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\

   This file is automatically translated from X.Org's xproto/keysymdef.h
   Please, do not update this file with your hands, run keysyms.update.sh.

\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

module.exports = {

/***********************************************************
Copyright 1987, 1994, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.


Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

/*
 * The "X11 Window System Protocol" standard defines in Appendix A the
 * keysym codes. These 29-bit integer values identify characters or
 * functions associated with each key (e.g., via the visible
 * engraving) of a keyboard layout. This file assigns mnemonic macro
 * names for these keysyms.
 *
 * This file is also compiled (by src/util/makekeys.c in libX11) into
 * hash tables that can be accessed with X11 library functions such as
 * XStringToKeysym() and XKeysymToString().
 *
 * Where a keysym corresponds one-to-one to an ISO 10646 / Unicode
 * character, this is noted in a comment that provides both the U+xxxx
 * Unicode position, as well as the official Unicode name of the
 * character.
 *
 * Where the correspondence is either not one-to-one or semantically
 * unclear, the Unicode position and name are enclosed in
 * parentheses. Such legacy keysyms should be considered deprecated
 * and are not recommended for use in future keyboard mappings.
 *
 * For any future extension of the keysyms with characters already
 * found in ISO 10646 / Unicode, the following algorithm shall be
 * used. The new keysym code position will simply be the character's
 * Unicode number plus 0x01000000. The keysym values in the range
 * 0x01000100 to 0x0110ffff are reserved to represent Unicode
 * characters in the range (\u0100) to U+10FFFF.
 * 
 * While most newer Unicode-based X11 clients do already accept
 * Unicode-mapped keysyms in the range 0x01000100 to 0x0110ffff, it
 * will remain necessary for clients -- in the interest of
 * compatibility with existing servers -- to also understand the
 * existing legacy keysym values in the range 0x0100 to 0x20ff.
 *
 * Where several mnemonic names are defined for the same keysym in this
 * file, all but the first one listed should be considered deprecated.
 *
 * Mnemonic names for keysyms are defined in this file with lines
 * that match one of these Perl regular expressions:
 *
 *    /^\  XK_([a-zA-Z_0-9]+)\s+0x([0-9a-f]+)\s*\/\*: { code: U+([0-9A-F]{4,6}), description: null }, (.*) \*\/\s*$/
 *    /^\  XK_([a-zA-Z_0-9]+)\s+0x([0-9a-f]+)\s*\/\*\(U+([0-9A-F]{4,6}): { code: (.*)\)\*\/\s*$/, description: null },
 *    /^\#define XK_([a-zA-Z_0-9]+)\s+0x([0-9a-f]+)\s*(\/\*\s*(.*)\s*\*\/)?\s*$/
 *
 * Before adding new keysyms, please do consider the following: In
 * addition to the keysym names defined in this file, the
 * XStringToKeysym() and XKeysymToString() functions will also handle
 * any keysym string of the form "U0020" to "U007E" and "U00A0" to
 * "U10FFFF" for all possible Unicode characters. In other words,
 * every possible Unicode character has already a keysym string
 * defined algorithmically, even if it is not listed here. Therefore,
 * defining an additional keysym macro is only necessary where a
 * non-hexadecimal mnemonic name is needed, or where the new keysym
 * does not represent any existing Unicode character.
 *
 * When adding new keysyms to this file, do not forget to also update the
 * following as needed:
 *
 *   - the mappings in src/KeyBind.c in the repo
 *     git://anongit.freedesktop.org/xorg/lib/libX11.git
 *
 *   - the protocol specification in specs/keysyms.xml
 *     in the repo git://anongit.freedesktop.org/xorg/proto/x11proto.git
 *
 */

  XK_VoidSymbol:                  { code: 0xffffff, description: "Void symbol" },

// Group XK_MISCELLANY
/*
 * TTY function keys, cleverly chosen to map to ASCII, for convenience of
 * programming, but could have been arbitrary (at the cost of lookup
 * tables in client code).
 */

  XK_BackSpace:                     { code: 0xff08, description: "Back space, back char" },
  XK_Tab:                           { code: 0xff09, description: null },
  XK_Linefeed:                      { code: 0xff0a, description: "Linefeed, LF" },
  XK_Clear:                         { code: 0xff0b, description: null },
  XK_Return:                        { code: 0xff0d, description: "Return, enter" },
  XK_Pause:                         { code: 0xff13, description: "Pause, hold" },
  XK_Scroll_Lock:                   { code: 0xff14, description: null },
  XK_Sys_Req:                       { code: 0xff15, description: null },
  XK_Escape:                        { code: 0xff1b, description: null },
  XK_Delete:                        { code: 0xffff, description: "Delete, rubout" },



/* International & multi-key character composition */

  XK_Multi_key:                     { code: 0xff20, description: "Multi-key character compose" },
  XK_Codeinput:                     { code: 0xff37, description: null },
  XK_SingleCandidate:               { code: 0xff3c, description: null },
  XK_MultipleCandidate:             { code: 0xff3d, description: null },
  XK_PreviousCandidate:             { code: 0xff3e, description: null },

/* Japanese keyboard support */

  XK_Kanji:                         { code: 0xff21, description: "Kanji, Kanji convert" },
  XK_Muhenkan:                      { code: 0xff22, description: "Cancel Conversion" },
  XK_Henkan_Mode:                   { code: 0xff23, description: "Start/Stop Conversion" },
  XK_Henkan:                        { code: 0xff23, description: "Alias for Henkan_Mode" },
  XK_Romaji:                        { code: 0xff24, description: "to Romaji" },
  XK_Hiragana:                      { code: 0xff25, description: "to Hiragana" },
  XK_Katakana:                      { code: 0xff26, description: "to Katakana" },
  XK_Hiragana_Katakana:             { code: 0xff27, description: "Hiragana/Katakana toggle" },
  XK_Zenkaku:                       { code: 0xff28, description: "to Zenkaku" },
  XK_Hankaku:                       { code: 0xff29, description: "to Hankaku" },
  XK_Zenkaku_Hankaku:               { code: 0xff2a, description: "Zenkaku/Hankaku toggle" },
  XK_Touroku:                       { code: 0xff2b, description: "Add to Dictionary" },
  XK_Massyo:                        { code: 0xff2c, description: "Delete from Dictionary" },
  XK_Kana_Lock:                     { code: 0xff2d, description: "Kana Lock" },
  XK_Kana_Shift:                    { code: 0xff2e, description: "Kana Shift" },
  XK_Eisu_Shift:                    { code: 0xff2f, description: "Alphanumeric Shift" },
  XK_Eisu_toggle:                   { code: 0xff30, description: "Alphanumeric toggle" },
  XK_Kanji_Bangou:                  { code: 0xff37, description: "Codeinput" },
  XK_Zen_Koho:                      { code: 0xff3d, description: "Multiple/All Candidate(s)" },
  XK_Mae_Koho:                      { code: 0xff3e, description: "Previous Candidate" },

/* 0xff31 thru 0xff3f are under XK_KOREAN */

/* Cursor control & motion */

  XK_Home:                          { code: 0xff50, description: null },
  XK_Left:                          { code: 0xff51, description: "Move left, left arrow" },
  XK_Up:                            { code: 0xff52, description: "Move up, up arrow" },
  XK_Right:                         { code: 0xff53, description: "Move right, right arrow" },
  XK_Down:                          { code: 0xff54, description: "Move down, down arrow" },
  XK_Prior:                         { code: 0xff55, description: "Prior, previous" },
  XK_Page_Up:                       { code: 0xff55, description: null },
  XK_Next:                          { code: 0xff56, description: "Next" },
  XK_Page_Down:                     { code: 0xff56, description: null },
  XK_End:                           { code: 0xff57, description: "EOL" },
  XK_Begin:                         { code: 0xff58, description: "BOL" },


/* Misc functions */

  XK_Select:                        { code: 0xff60, description: "Select, mark" },
  XK_Print:                         { code: 0xff61, description: null },
  XK_Execute:                       { code: 0xff62, description: "Execute, run, do" },
  XK_Insert:                        { code: 0xff63, description: "Insert, insert here" },
  XK_Undo:                          { code: 0xff65, description: null },
  XK_Redo:                          { code: 0xff66, description: "Redo, again" },
  XK_Menu:                          { code: 0xff67, description: null },
  XK_Find:                          { code: 0xff68, description: "Find, search" },
  XK_Cancel:                        { code: 0xff69, description: "Cancel, stop, abort, exit" },
  XK_Help:                          { code: 0xff6a, description: "Help" },
  XK_Break:                         { code: 0xff6b, description: null },
  XK_Mode_switch:                   { code: 0xff7e, description: "Character set switch" },
  XK_script_switch:                 { code: 0xff7e, description: "Alias for mode_switch" },
  XK_Num_Lock:                      { code: 0xff7f, description: null },

/* Keypad functions, keypad numbers cleverly chosen to map to ASCII */

  XK_KP_Space:                      { code: 0xff80, description: "Space" },
  XK_KP_Tab:                        { code: 0xff89, description: null },
  XK_KP_Enter:                      { code: 0xff8d, description: "Enter" },
  XK_KP_F1:                         { code: 0xff91, description: "PF1, KP_A, ..." },
  XK_KP_F2:                         { code: 0xff92, description: null },
  XK_KP_F3:                         { code: 0xff93, description: null },
  XK_KP_F4:                         { code: 0xff94, description: null },
  XK_KP_Home:                       { code: 0xff95, description: null },
  XK_KP_Left:                       { code: 0xff96, description: null },
  XK_KP_Up:                         { code: 0xff97, description: null },
  XK_KP_Right:                      { code: 0xff98, description: null },
  XK_KP_Down:                       { code: 0xff99, description: null },
  XK_KP_Prior:                      { code: 0xff9a, description: null },
  XK_KP_Page_Up:                    { code: 0xff9a, description: null },
  XK_KP_Next:                       { code: 0xff9b, description: null },
  XK_KP_Page_Down:                  { code: 0xff9b, description: null },
  XK_KP_End:                        { code: 0xff9c, description: null },
  XK_KP_Begin:                      { code: 0xff9d, description: null },
  XK_KP_Insert:                     { code: 0xff9e, description: null },
  XK_KP_Delete:                     { code: 0xff9f, description: null },
  XK_KP_Equal:                      { code: 0xffbd, description: "Equals" },
  XK_KP_Multiply:                   { code: 0xffaa, description: null },
  XK_KP_Add:                        { code: 0xffab, description: null },
  XK_KP_Separator:                  { code: 0xffac, description: "Separator, often comma" },
  XK_KP_Subtract:                   { code: 0xffad, description: null },
  XK_KP_Decimal:                    { code: 0xffae, description: null },
  XK_KP_Divide:                     { code: 0xffaf, description: null },

  XK_KP_0:                          { code: 0xffb0, description: null },
  XK_KP_1:                          { code: 0xffb1, description: null },
  XK_KP_2:                          { code: 0xffb2, description: null },
  XK_KP_3:                          { code: 0xffb3, description: null },
  XK_KP_4:                          { code: 0xffb4, description: null },
  XK_KP_5:                          { code: 0xffb5, description: null },
  XK_KP_6:                          { code: 0xffb6, description: null },
  XK_KP_7:                          { code: 0xffb7, description: null },
  XK_KP_8:                          { code: 0xffb8, description: null },
  XK_KP_9:                          { code: 0xffb9, description: null },



/*
 * Auxiliary functions; note the duplicate definitions for left and right
 * function keys;  Sun keyboards and a few other manufacturers have such
 * function key groups on the left and/or right sides of the keyboard.
 * We've not found a keyboard with more than 35 function keys total.
 */

  XK_F1:                            { code: 0xffbe, description: null },
  XK_F2:                            { code: 0xffbf, description: null },
  XK_F3:                            { code: 0xffc0, description: null },
  XK_F4:                            { code: 0xffc1, description: null },
  XK_F5:                            { code: 0xffc2, description: null },
  XK_F6:                            { code: 0xffc3, description: null },
  XK_F7:                            { code: 0xffc4, description: null },
  XK_F8:                            { code: 0xffc5, description: null },
  XK_F9:                            { code: 0xffc6, description: null },
  XK_F10:                           { code: 0xffc7, description: null },
  XK_F11:                           { code: 0xffc8, description: null },
  XK_L1:                            { code: 0xffc8, description: null },
  XK_F12:                           { code: 0xffc9, description: null },
  XK_L2:                            { code: 0xffc9, description: null },
  XK_F13:                           { code: 0xffca, description: null },
  XK_L3:                            { code: 0xffca, description: null },
  XK_F14:                           { code: 0xffcb, description: null },
  XK_L4:                            { code: 0xffcb, description: null },
  XK_F15:                           { code: 0xffcc, description: null },
  XK_L5:                            { code: 0xffcc, description: null },
  XK_F16:                           { code: 0xffcd, description: null },
  XK_L6:                            { code: 0xffcd, description: null },
  XK_F17:                           { code: 0xffce, description: null },
  XK_L7:                            { code: 0xffce, description: null },
  XK_F18:                           { code: 0xffcf, description: null },
  XK_L8:                            { code: 0xffcf, description: null },
  XK_F19:                           { code: 0xffd0, description: null },
  XK_L9:                            { code: 0xffd0, description: null },
  XK_F20:                           { code: 0xffd1, description: null },
  XK_L10:                           { code: 0xffd1, description: null },
  XK_F21:                           { code: 0xffd2, description: null },
  XK_R1:                            { code: 0xffd2, description: null },
  XK_F22:                           { code: 0xffd3, description: null },
  XK_R2:                            { code: 0xffd3, description: null },
  XK_F23:                           { code: 0xffd4, description: null },
  XK_R3:                            { code: 0xffd4, description: null },
  XK_F24:                           { code: 0xffd5, description: null },
  XK_R4:                            { code: 0xffd5, description: null },
  XK_F25:                           { code: 0xffd6, description: null },
  XK_R5:                            { code: 0xffd6, description: null },
  XK_F26:                           { code: 0xffd7, description: null },
  XK_R6:                            { code: 0xffd7, description: null },
  XK_F27:                           { code: 0xffd8, description: null },
  XK_R7:                            { code: 0xffd8, description: null },
  XK_F28:                           { code: 0xffd9, description: null },
  XK_R8:                            { code: 0xffd9, description: null },
  XK_F29:                           { code: 0xffda, description: null },
  XK_R9:                            { code: 0xffda, description: null },
  XK_F30:                           { code: 0xffdb, description: null },
  XK_R10:                           { code: 0xffdb, description: null },
  XK_F31:                           { code: 0xffdc, description: null },
  XK_R11:                           { code: 0xffdc, description: null },
  XK_F32:                           { code: 0xffdd, description: null },
  XK_R12:                           { code: 0xffdd, description: null },
  XK_F33:                           { code: 0xffde, description: null },
  XK_R13:                           { code: 0xffde, description: null },
  XK_F34:                           { code: 0xffdf, description: null },
  XK_R14:                           { code: 0xffdf, description: null },
  XK_F35:                           { code: 0xffe0, description: null },
  XK_R15:                           { code: 0xffe0, description: null },

/* Modifiers */

  XK_Shift_L:                       { code: 0xffe1, description: "Left shift" },
  XK_Shift_R:                       { code: 0xffe2, description: "Right shift" },
  XK_Control_L:                     { code: 0xffe3, description: "Left control" },
  XK_Control_R:                     { code: 0xffe4, description: "Right control" },
  XK_Caps_Lock:                     { code: 0xffe5, description: "Caps lock" },
  XK_Shift_Lock:                    { code: 0xffe6, description: "Shift lock" },

  XK_Meta_L:                        { code: 0xffe7, description: "Left meta" },
  XK_Meta_R:                        { code: 0xffe8, description: "Right meta" },
  XK_Alt_L:                         { code: 0xffe9, description: "Left alt" },
  XK_Alt_R:                         { code: 0xffea, description: "Right alt" },
  XK_Super_L:                       { code: 0xffeb, description: "Left super" },
  XK_Super_R:                       { code: 0xffec, description: "Right super" },
  XK_Hyper_L:                       { code: 0xffed, description: "Left hyper" },
  XK_Hyper_R:                       { code: 0xffee, description: "Right hyper" },


/*
 * Keyboard (XKB) Extension function and modifier keys
 * (from Appendix C of "The X Keyboard Extension: Protocol Specification")
 * Byte 3 = 0xfe
 */

// Group XK_XKB_KEYS
  XK_ISO_Lock:                      { code: 0xfe01, description: null },
  XK_ISO_Level2_Latch:              { code: 0xfe02, description: null },
  XK_ISO_Level3_Shift:              { code: 0xfe03, description: null },
  XK_ISO_Level3_Latch:              { code: 0xfe04, description: null },
  XK_ISO_Level3_Lock:               { code: 0xfe05, description: null },
  XK_ISO_Level5_Shift:              { code: 0xfe11, description: null },
  XK_ISO_Level5_Latch:              { code: 0xfe12, description: null },
  XK_ISO_Level5_Lock:               { code: 0xfe13, description: null },
  XK_ISO_Group_Shift:               { code: 0xff7e, description: "Alias for mode_switch" },
  XK_ISO_Group_Latch:               { code: 0xfe06, description: null },
  XK_ISO_Group_Lock:                { code: 0xfe07, description: null },
  XK_ISO_Next_Group:                { code: 0xfe08, description: null },
  XK_ISO_Next_Group_Lock:           { code: 0xfe09, description: null },
  XK_ISO_Prev_Group:                { code: 0xfe0a, description: null },
  XK_ISO_Prev_Group_Lock:           { code: 0xfe0b, description: null },
  XK_ISO_First_Group:               { code: 0xfe0c, description: null },
  XK_ISO_First_Group_Lock:          { code: 0xfe0d, description: null },
  XK_ISO_Last_Group:                { code: 0xfe0e, description: null },
  XK_ISO_Last_Group_Lock:           { code: 0xfe0f, description: null },

  XK_ISO_Left_Tab:                  { code: 0xfe20, description: null },
  XK_ISO_Move_Line_Up:              { code: 0xfe21, description: null },
  XK_ISO_Move_Line_Down:            { code: 0xfe22, description: null },
  XK_ISO_Partial_Line_Up:           { code: 0xfe23, description: null },
  XK_ISO_Partial_Line_Down:         { code: 0xfe24, description: null },
  XK_ISO_Partial_Space_Left:        { code: 0xfe25, description: null },
  XK_ISO_Partial_Space_Right:       { code: 0xfe26, description: null },
  XK_ISO_Set_Margin_Left:           { code: 0xfe27, description: null },
  XK_ISO_Set_Margin_Right:          { code: 0xfe28, description: null },
  XK_ISO_Release_Margin_Left:       { code: 0xfe29, description: null },
  XK_ISO_Release_Margin_Right:      { code: 0xfe2a, description: null },
  XK_ISO_Release_Both_Margins:      { code: 0xfe2b, description: null },
  XK_ISO_Fast_Cursor_Left:          { code: 0xfe2c, description: null },
  XK_ISO_Fast_Cursor_Right:         { code: 0xfe2d, description: null },
  XK_ISO_Fast_Cursor_Up:            { code: 0xfe2e, description: null },
  XK_ISO_Fast_Cursor_Down:          { code: 0xfe2f, description: null },
  XK_ISO_Continuous_Underline:      { code: 0xfe30, description: null },
  XK_ISO_Discontinuous_Underline:   { code: 0xfe31, description: null },
  XK_ISO_Emphasize:                 { code: 0xfe32, description: null },
  XK_ISO_Center_Object:             { code: 0xfe33, description: null },
  XK_ISO_Enter:                     { code: 0xfe34, description: null },

  XK_dead_grave:                    { code: 0xfe50, description: null },
  XK_dead_acute:                    { code: 0xfe51, description: null },
  XK_dead_circumflex:               { code: 0xfe52, description: null },
  XK_dead_tilde:                    { code: 0xfe53, description: null },
  XK_dead_perispomeni:              { code: 0xfe53, description: "alias for dead_tilde" },
  XK_dead_macron:                   { code: 0xfe54, description: null },
  XK_dead_breve:                    { code: 0xfe55, description: null },
  XK_dead_abovedot:                 { code: 0xfe56, description: null },
  XK_dead_diaeresis:                { code: 0xfe57, description: null },
  XK_dead_abovering:                { code: 0xfe58, description: null },
  XK_dead_doubleacute:              { code: 0xfe59, description: null },
  XK_dead_caron:                    { code: 0xfe5a, description: null },
  XK_dead_cedilla:                  { code: 0xfe5b, description: null },
  XK_dead_ogonek:                   { code: 0xfe5c, description: null },
  XK_dead_iota:                     { code: 0xfe5d, description: null },
  XK_dead_voiced_sound:             { code: 0xfe5e, description: null },
  XK_dead_semivoiced_sound:         { code: 0xfe5f, description: null },
  XK_dead_belowdot:                 { code: 0xfe60, description: null },
  XK_dead_hook:                     { code: 0xfe61, description: null },
  XK_dead_horn:                     { code: 0xfe62, description: null },
  XK_dead_stroke:                   { code: 0xfe63, description: null },
  XK_dead_abovecomma:               { code: 0xfe64, description: null },
  XK_dead_psili:                    { code: 0xfe64, description: "alias for dead_abovecomma" },
  XK_dead_abovereversedcomma:       { code: 0xfe65, description: null },
  XK_dead_dasia:                    { code: 0xfe65, description: "alias for dead_abovereversedcomma" },
  XK_dead_doublegrave:              { code: 0xfe66, description: null },
  XK_dead_belowring:                { code: 0xfe67, description: null },
  XK_dead_belowmacron:              { code: 0xfe68, description: null },
  XK_dead_belowcircumflex:          { code: 0xfe69, description: null },
  XK_dead_belowtilde:               { code: 0xfe6a, description: null },
  XK_dead_belowbreve:               { code: 0xfe6b, description: null },
  XK_dead_belowdiaeresis:           { code: 0xfe6c, description: null },
  XK_dead_invertedbreve:            { code: 0xfe6d, description: null },
  XK_dead_belowcomma:               { code: 0xfe6e, description: null },
  XK_dead_currency:                 { code: 0xfe6f, description: null },

/* extra dead elements for German T3 layout */
  XK_dead_lowline:                  { code: 0xfe90, description: null },
  XK_dead_aboveverticalline:        { code: 0xfe91, description: null },
  XK_dead_belowverticalline:        { code: 0xfe92, description: null },
  XK_dead_longsolidusoverlay:       { code: 0xfe93, description: null },

/* dead vowels for universal syllable entry */
  XK_dead_a:                        { code: 0xfe80, description: null },
  XK_dead_A:                        { code: 0xfe81, description: null },
  XK_dead_e:                        { code: 0xfe82, description: null },
  XK_dead_E:                        { code: 0xfe83, description: null },
  XK_dead_i:                        { code: 0xfe84, description: null },
  XK_dead_I:                        { code: 0xfe85, description: null },
  XK_dead_o:                        { code: 0xfe86, description: null },
  XK_dead_O:                        { code: 0xfe87, description: null },
  XK_dead_u:                        { code: 0xfe88, description: null },
  XK_dead_U:                        { code: 0xfe89, description: null },
  XK_dead_small_schwa:              { code: 0xfe8a, description: null },
  XK_dead_capital_schwa:            { code: 0xfe8b, description: null },

  XK_dead_greek:                    { code: 0xfe8c, description: null },

  XK_First_Virtual_Screen:          { code: 0xfed0, description: null },
  XK_Prev_Virtual_Screen:           { code: 0xfed1, description: null },
  XK_Next_Virtual_Screen:           { code: 0xfed2, description: null },
  XK_Last_Virtual_Screen:           { code: 0xfed4, description: null },
  XK_Terminate_Server:              { code: 0xfed5, description: null },

  XK_AccessX_Enable:                { code: 0xfe70, description: null },
  XK_AccessX_Feedback_Enable:       { code: 0xfe71, description: null },
  XK_RepeatKeys_Enable:             { code: 0xfe72, description: null },
  XK_SlowKeys_Enable:               { code: 0xfe73, description: null },
  XK_BounceKeys_Enable:             { code: 0xfe74, description: null },
  XK_StickyKeys_Enable:             { code: 0xfe75, description: null },
  XK_MouseKeys_Enable:              { code: 0xfe76, description: null },
  XK_MouseKeys_Accel_Enable:        { code: 0xfe77, description: null },
  XK_Overlay1_Enable:               { code: 0xfe78, description: null },
  XK_Overlay2_Enable:               { code: 0xfe79, description: null },
  XK_AudibleBell_Enable:            { code: 0xfe7a, description: null },

  XK_Pointer_Left:                  { code: 0xfee0, description: null },
  XK_Pointer_Right:                 { code: 0xfee1, description: null },
  XK_Pointer_Up:                    { code: 0xfee2, description: null },
  XK_Pointer_Down:                  { code: 0xfee3, description: null },
  XK_Pointer_UpLeft:                { code: 0xfee4, description: null },
  XK_Pointer_UpRight:               { code: 0xfee5, description: null },
  XK_Pointer_DownLeft:              { code: 0xfee6, description: null },
  XK_Pointer_DownRight:             { code: 0xfee7, description: null },
  XK_Pointer_Button_Dflt:           { code: 0xfee8, description: null },
  XK_Pointer_Button1:               { code: 0xfee9, description: null },
  XK_Pointer_Button2:               { code: 0xfeea, description: null },
  XK_Pointer_Button3:               { code: 0xfeeb, description: null },
  XK_Pointer_Button4:               { code: 0xfeec, description: null },
  XK_Pointer_Button5:               { code: 0xfeed, description: null },
  XK_Pointer_DblClick_Dflt:         { code: 0xfeee, description: null },
  XK_Pointer_DblClick1:             { code: 0xfeef, description: null },
  XK_Pointer_DblClick2:             { code: 0xfef0, description: null },
  XK_Pointer_DblClick3:             { code: 0xfef1, description: null },
  XK_Pointer_DblClick4:             { code: 0xfef2, description: null },
  XK_Pointer_DblClick5:             { code: 0xfef3, description: null },
  XK_Pointer_Drag_Dflt:             { code: 0xfef4, description: null },
  XK_Pointer_Drag1:                 { code: 0xfef5, description: null },
  XK_Pointer_Drag2:                 { code: 0xfef6, description: null },
  XK_Pointer_Drag3:                 { code: 0xfef7, description: null },
  XK_Pointer_Drag4:                 { code: 0xfef8, description: null },
  XK_Pointer_Drag5:                 { code: 0xfefd, description: null },

  XK_Pointer_EnableKeys:            { code: 0xfef9, description: null },
  XK_Pointer_Accelerate:            { code: 0xfefa, description: null },
  XK_Pointer_DfltBtnNext:           { code: 0xfefb, description: null },
  XK_Pointer_DfltBtnPrev:           { code: 0xfefc, description: null },

/* Single-Stroke Multiple-Character N-Graph Keysyms For The X Input Method */

  XK_ch:                            { code: 0xfea0, description: null },
  XK_Ch:                            { code: 0xfea1, description: null },
  XK_CH:                            { code: 0xfea2, description: null },
  XK_c_h:                           { code: 0xfea3, description: null },
  XK_C_h:                           { code: 0xfea4, description: null },
  XK_C_H:                           { code: 0xfea5, description: null },



/*
 * 3270 Terminal Keys
 * Byte 3 = 0xfd
 */

// Group XK_3270
  XK_3270_Duplicate:                { code: 0xfd01, description: null },
  XK_3270_FieldMark:                { code: 0xfd02, description: null },
  XK_3270_Right2:                   { code: 0xfd03, description: null },
  XK_3270_Left2:                    { code: 0xfd04, description: null },
  XK_3270_BackTab:                  { code: 0xfd05, description: null },
  XK_3270_EraseEOF:                 { code: 0xfd06, description: null },
  XK_3270_EraseInput:               { code: 0xfd07, description: null },
  XK_3270_Reset:                    { code: 0xfd08, description: null },
  XK_3270_Quit:                     { code: 0xfd09, description: null },
  XK_3270_PA1:                      { code: 0xfd0a, description: null },
  XK_3270_PA2:                      { code: 0xfd0b, description: null },
  XK_3270_PA3:                      { code: 0xfd0c, description: null },
  XK_3270_Test:                     { code: 0xfd0d, description: null },
  XK_3270_Attn:                     { code: 0xfd0e, description: null },
  XK_3270_CursorBlink:              { code: 0xfd0f, description: null },
  XK_3270_AltCursor:                { code: 0xfd10, description: null },
  XK_3270_KeyClick:                 { code: 0xfd11, description: null },
  XK_3270_Jump:                     { code: 0xfd12, description: null },
  XK_3270_Ident:                    { code: 0xfd13, description: null },
  XK_3270_Rule:                     { code: 0xfd14, description: null },
  XK_3270_Copy:                     { code: 0xfd15, description: null },
  XK_3270_Play:                     { code: 0xfd16, description: null },
  XK_3270_Setup:                    { code: 0xfd17, description: null },
  XK_3270_Record:                   { code: 0xfd18, description: null },
  XK_3270_ChangeScreen:             { code: 0xfd19, description: null },
  XK_3270_DeleteWord:               { code: 0xfd1a, description: null },
  XK_3270_ExSelect:                 { code: 0xfd1b, description: null },
  XK_3270_CursorSelect:             { code: 0xfd1c, description: null },
  XK_3270_PrintScreen:              { code: 0xfd1d, description: null },
  XK_3270_Enter:                    { code: 0xfd1e, description: null },


/*
 * Latin 1
 * (ISO/IEC 8859-1 = Unicode (\u0020)..U+00FF)
 * Byte 3 = 0
 */
// Group XK_LATIN1
  XK_space:                         { code: 0x0020, description: "(\u0020) SPACE" },
  XK_exclam:                        { code: 0x0021, description: "(\u0021) EXCLAMATION MARK" },
  XK_quotedbl:                      { code: 0x0022, description: "(\u0022) QUOTATION MARK" },
  XK_numbersign:                    { code: 0x0023, description: "(\u0023) NUMBER SIGN" },
  XK_dollar:                        { code: 0x0024, description: "(\u0024) DOLLAR SIGN" },
  XK_percent:                       { code: 0x0025, description: "(\u0025) PERCENT SIGN" },
  XK_ampersand:                     { code: 0x0026, description: "(\u0026) AMPERSAND" },
  XK_apostrophe:                    { code: 0x0027, description: "(\u0027) APOSTROPHE" },
  XK_quoteright:                    { code: 0x0027, description: "deprecated" },
  XK_parenleft:                     { code: 0x0028, description: "(\u0028) LEFT PARENTHESIS" },
  XK_parenright:                    { code: 0x0029, description: "(\u0029) RIGHT PARENTHESIS" },
  XK_asterisk:                      { code: 0x002a, description: "(\u002A) ASTERISK" },
  XK_plus:                          { code: 0x002b, description: "(\u002B) PLUS SIGN" },
  XK_comma:                         { code: 0x002c, description: "(\u002C) COMMA" },
  XK_minus:                         { code: 0x002d, description: "(\u002D) HYPHEN-MINUS" },
  XK_period:                        { code: 0x002e, description: "(\u002E) FULL STOP" },
  XK_slash:                         { code: 0x002f, description: "(\u002F) SOLIDUS" },
  XK_0:                             { code: 0x0030, description: "(\u0030) DIGIT ZERO" },
  XK_1:                             { code: 0x0031, description: "(\u0031) DIGIT ONE" },
  XK_2:                             { code: 0x0032, description: "(\u0032) DIGIT TWO" },
  XK_3:                             { code: 0x0033, description: "(\u0033) DIGIT THREE" },
  XK_4:                             { code: 0x0034, description: "(\u0034) DIGIT FOUR" },
  XK_5:                             { code: 0x0035, description: "(\u0035) DIGIT FIVE" },
  XK_6:                             { code: 0x0036, description: "(\u0036) DIGIT SIX" },
  XK_7:                             { code: 0x0037, description: "(\u0037) DIGIT SEVEN" },
  XK_8:                             { code: 0x0038, description: "(\u0038) DIGIT EIGHT" },
  XK_9:                             { code: 0x0039, description: "(\u0039) DIGIT NINE" },
  XK_colon:                         { code: 0x003a, description: "(\u003A) COLON" },
  XK_semicolon:                     { code: 0x003b, description: "(\u003B) SEMICOLON" },
  XK_less:                          { code: 0x003c, description: "(\u003C) LESS-THAN SIGN" },
  XK_equal:                         { code: 0x003d, description: "(\u003D) EQUALS SIGN" },
  XK_greater:                       { code: 0x003e, description: "(\u003E) GREATER-THAN SIGN" },
  XK_question:                      { code: 0x003f, description: "(\u003F) QUESTION MARK" },
  XK_at:                            { code: 0x0040, description: "(\u0040) COMMERCIAL AT" },
  XK_A:                             { code: 0x0041, description: "(\u0041) LATIN CAPITAL LETTER A" },
  XK_B:                             { code: 0x0042, description: "(\u0042) LATIN CAPITAL LETTER B" },
  XK_C:                             { code: 0x0043, description: "(\u0043) LATIN CAPITAL LETTER C" },
  XK_D:                             { code: 0x0044, description: "(\u0044) LATIN CAPITAL LETTER D" },
  XK_E:                             { code: 0x0045, description: "(\u0045) LATIN CAPITAL LETTER E" },
  XK_F:                             { code: 0x0046, description: "(\u0046) LATIN CAPITAL LETTER F" },
  XK_G:                             { code: 0x0047, description: "(\u0047) LATIN CAPITAL LETTER G" },
  XK_H:                             { code: 0x0048, description: "(\u0048) LATIN CAPITAL LETTER H" },
  XK_I:                             { code: 0x0049, description: "(\u0049) LATIN CAPITAL LETTER I" },
  XK_J:                             { code: 0x004a, description: "(\u004A) LATIN CAPITAL LETTER J" },
  XK_K:                             { code: 0x004b, description: "(\u004B) LATIN CAPITAL LETTER K" },
  XK_L:                             { code: 0x004c, description: "(\u004C) LATIN CAPITAL LETTER L" },
  XK_M:                             { code: 0x004d, description: "(\u004D) LATIN CAPITAL LETTER M" },
  XK_N:                             { code: 0x004e, description: "(\u004E) LATIN CAPITAL LETTER N" },
  XK_O:                             { code: 0x004f, description: "(\u004F) LATIN CAPITAL LETTER O" },
  XK_P:                             { code: 0x0050, description: "(\u0050) LATIN CAPITAL LETTER P" },
  XK_Q:                             { code: 0x0051, description: "(\u0051) LATIN CAPITAL LETTER Q" },
  XK_R:                             { code: 0x0052, description: "(\u0052) LATIN CAPITAL LETTER R" },
  XK_S:                             { code: 0x0053, description: "(\u0053) LATIN CAPITAL LETTER S" },
  XK_T:                             { code: 0x0054, description: "(\u0054) LATIN CAPITAL LETTER T" },
  XK_U:                             { code: 0x0055, description: "(\u0055) LATIN CAPITAL LETTER U" },
  XK_V:                             { code: 0x0056, description: "(\u0056) LATIN CAPITAL LETTER V" },
  XK_W:                             { code: 0x0057, description: "(\u0057) LATIN CAPITAL LETTER W" },
  XK_X:                             { code: 0x0058, description: "(\u0058) LATIN CAPITAL LETTER X" },
  XK_Y:                             { code: 0x0059, description: "(\u0059) LATIN CAPITAL LETTER Y" },
  XK_Z:                             { code: 0x005a, description: "(\u005A) LATIN CAPITAL LETTER Z" },
  XK_bracketleft:                   { code: 0x005b, description: "(\u005B) LEFT SQUARE BRACKET" },
  XK_backslash:                     { code: 0x005c, description: "(\u005C) REVERSE SOLIDUS" },
  XK_bracketright:                  { code: 0x005d, description: "(\u005D) RIGHT SQUARE BRACKET" },
  XK_asciicircum:                   { code: 0x005e, description: "(\u005E) CIRCUMFLEX ACCENT" },
  XK_underscore:                    { code: 0x005f, description: "(\u005F) LOW LINE" },
  XK_grave:                         { code: 0x0060, description: "(\u0060) GRAVE ACCENT" },
  XK_quoteleft:                     { code: 0x0060, description: "deprecated" },
  XK_a:                             { code: 0x0061, description: "(\u0061) LATIN SMALL LETTER A" },
  XK_b:                             { code: 0x0062, description: "(\u0062) LATIN SMALL LETTER B" },
  XK_c:                             { code: 0x0063, description: "(\u0063) LATIN SMALL LETTER C" },
  XK_d:                             { code: 0x0064, description: "(\u0064) LATIN SMALL LETTER D" },
  XK_e:                             { code: 0x0065, description: "(\u0065) LATIN SMALL LETTER E" },
  XK_f:                             { code: 0x0066, description: "(\u0066) LATIN SMALL LETTER F" },
  XK_g:                             { code: 0x0067, description: "(\u0067) LATIN SMALL LETTER G" },
  XK_h:                             { code: 0x0068, description: "(\u0068) LATIN SMALL LETTER H" },
  XK_i:                             { code: 0x0069, description: "(\u0069) LATIN SMALL LETTER I" },
  XK_j:                             { code: 0x006a, description: "(\u006A) LATIN SMALL LETTER J" },
  XK_k:                             { code: 0x006b, description: "(\u006B) LATIN SMALL LETTER K" },
  XK_l:                             { code: 0x006c, description: "(\u006C) LATIN SMALL LETTER L" },
  XK_m:                             { code: 0x006d, description: "(\u006D) LATIN SMALL LETTER M" },
  XK_n:                             { code: 0x006e, description: "(\u006E) LATIN SMALL LETTER N" },
  XK_o:                             { code: 0x006f, description: "(\u006F) LATIN SMALL LETTER O" },
  XK_p:                             { code: 0x0070, description: "(\u0070) LATIN SMALL LETTER P" },
  XK_q:                             { code: 0x0071, description: "(\u0071) LATIN SMALL LETTER Q" },
  XK_r:                             { code: 0x0072, description: "(\u0072) LATIN SMALL LETTER R" },
  XK_s:                             { code: 0x0073, description: "(\u0073) LATIN SMALL LETTER S" },
  XK_t:                             { code: 0x0074, description: "(\u0074) LATIN SMALL LETTER T" },
  XK_u:                             { code: 0x0075, description: "(\u0075) LATIN SMALL LETTER U" },
  XK_v:                             { code: 0x0076, description: "(\u0076) LATIN SMALL LETTER V" },
  XK_w:                             { code: 0x0077, description: "(\u0077) LATIN SMALL LETTER W" },
  XK_x:                             { code: 0x0078, description: "(\u0078) LATIN SMALL LETTER X" },
  XK_y:                             { code: 0x0079, description: "(\u0079) LATIN SMALL LETTER Y" },
  XK_z:                             { code: 0x007a, description: "(\u007A) LATIN SMALL LETTER Z" },
  XK_braceleft:                     { code: 0x007b, description: "(\u007B) LEFT CURLY BRACKET" },
  XK_bar:                           { code: 0x007c, description: "(\u007C) VERTICAL LINE" },
  XK_braceright:                    { code: 0x007d, description: "(\u007D) RIGHT CURLY BRACKET" },
  XK_asciitilde:                    { code: 0x007e, description: "(\u007E) TILDE" },

  XK_nobreakspace:                  { code: 0x00a0, description: "(\u00A0) NO-BREAK SPACE" },
  XK_exclamdown:                    { code: 0x00a1, description: "(\u00A1) INVERTED EXCLAMATION MARK" },
  XK_cent:                          { code: 0x00a2, description: "(\u00A2) CENT SIGN" },
  XK_sterling:                      { code: 0x00a3, description: "(\u00A3) POUND SIGN" },
  XK_currency:                      { code: 0x00a4, description: "(\u00A4) CURRENCY SIGN" },
  XK_yen:                           { code: 0x00a5, description: "(\u00A5) YEN SIGN" },
  XK_brokenbar:                     { code: 0x00a6, description: "(\u00A6) BROKEN BAR" },
  XK_section:                       { code: 0x00a7, description: "(\u00A7) SECTION SIGN" },
  XK_diaeresis:                     { code: 0x00a8, description: "(\u00A8) DIAERESIS" },
  XK_copyright:                     { code: 0x00a9, description: "(\u00A9) COPYRIGHT SIGN" },
  XK_ordfeminine:                   { code: 0x00aa, description: "(\u00AA) FEMININE ORDINAL INDICATOR" },
  XK_guillemotleft:                 { code: 0x00ab, description: "(\u00AB) LEFT-POINTING DOUBLE ANGLE QUOTATION MARK" },
  XK_notsign:                       { code: 0x00ac, description: "(\u00AC) NOT SIGN" },
  XK_hyphen:                        { code: 0x00ad, description: "(\u00AD) SOFT HYPHEN" },
  XK_registered:                    { code: 0x00ae, description: "(\u00AE) REGISTERED SIGN" },
  XK_macron:                        { code: 0x00af, description: "(\u00AF) MACRON" },
  XK_degree:                        { code: 0x00b0, description: "(\u00B0) DEGREE SIGN" },
  XK_plusminus:                     { code: 0x00b1, description: "(\u00B1) PLUS-MINUS SIGN" },
  XK_twosuperior:                   { code: 0x00b2, description: "(\u00B2) SUPERSCRIPT TWO" },
  XK_threesuperior:                 { code: 0x00b3, description: "(\u00B3) SUPERSCRIPT THREE" },
  XK_acute:                         { code: 0x00b4, description: "(\u00B4) ACUTE ACCENT" },
  XK_mu:                            { code: 0x00b5, description: "(\u00B5) MICRO SIGN" },
  XK_paragraph:                     { code: 0x00b6, description: "(\u00B6) PILCROW SIGN" },
  XK_periodcentered:                { code: 0x00b7, description: "(\u00B7) MIDDLE DOT" },
  XK_cedilla:                       { code: 0x00b8, description: "(\u00B8) CEDILLA" },
  XK_onesuperior:                   { code: 0x00b9, description: "(\u00B9) SUPERSCRIPT ONE" },
  XK_masculine:                     { code: 0x00ba, description: "(\u00BA) MASCULINE ORDINAL INDICATOR" },
  XK_guillemotright:                { code: 0x00bb, description: "(\u00BB) RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK" },
  XK_onequarter:                    { code: 0x00bc, description: "(\u00BC) VULGAR FRACTION ONE QUARTER" },
  XK_onehalf:                       { code: 0x00bd, description: "(\u00BD) VULGAR FRACTION ONE HALF" },
  XK_threequarters:                 { code: 0x00be, description: "(\u00BE) VULGAR FRACTION THREE QUARTERS" },
  XK_questiondown:                  { code: 0x00bf, description: "(\u00BF) INVERTED QUESTION MARK" },
  XK_Agrave:                        { code: 0x00c0, description: "(\u00C0) LATIN CAPITAL LETTER A WITH GRAVE" },
  XK_Aacute:                        { code: 0x00c1, description: "(\u00C1) LATIN CAPITAL LETTER A WITH ACUTE" },
  XK_Acircumflex:                   { code: 0x00c2, description: "(\u00C2) LATIN CAPITAL LETTER A WITH CIRCUMFLEX" },
  XK_Atilde:                        { code: 0x00c3, description: "(\u00C3) LATIN CAPITAL LETTER A WITH TILDE" },
  XK_Adiaeresis:                    { code: 0x00c4, description: "(\u00C4) LATIN CAPITAL LETTER A WITH DIAERESIS" },
  XK_Aring:                         { code: 0x00c5, description: "(\u00C5) LATIN CAPITAL LETTER A WITH RING ABOVE" },
  XK_AE:                            { code: 0x00c6, description: "(\u00C6) LATIN CAPITAL LETTER AE" },
  XK_Ccedilla:                      { code: 0x00c7, description: "(\u00C7) LATIN CAPITAL LETTER C WITH CEDILLA" },
  XK_Egrave:                        { code: 0x00c8, description: "(\u00C8) LATIN CAPITAL LETTER E WITH GRAVE" },
  XK_Eacute:                        { code: 0x00c9, description: "(\u00C9) LATIN CAPITAL LETTER E WITH ACUTE" },
  XK_Ecircumflex:                   { code: 0x00ca, description: "(\u00CA) LATIN CAPITAL LETTER E WITH CIRCUMFLEX" },
  XK_Ediaeresis:                    { code: 0x00cb, description: "(\u00CB) LATIN CAPITAL LETTER E WITH DIAERESIS" },
  XK_Igrave:                        { code: 0x00cc, description: "(\u00CC) LATIN CAPITAL LETTER I WITH GRAVE" },
  XK_Iacute:                        { code: 0x00cd, description: "(\u00CD) LATIN CAPITAL LETTER I WITH ACUTE" },
  XK_Icircumflex:                   { code: 0x00ce, description: "(\u00CE) LATIN CAPITAL LETTER I WITH CIRCUMFLEX" },
  XK_Idiaeresis:                    { code: 0x00cf, description: "(\u00CF) LATIN CAPITAL LETTER I WITH DIAERESIS" },
  XK_ETH:                           { code: 0x00d0, description: "(\u00D0) LATIN CAPITAL LETTER ETH" },
  XK_Eth:                           { code: 0x00d0, description: "deprecated" },
  XK_Ntilde:                        { code: 0x00d1, description: "(\u00D1) LATIN CAPITAL LETTER N WITH TILDE" },
  XK_Ograve:                        { code: 0x00d2, description: "(\u00D2) LATIN CAPITAL LETTER O WITH GRAVE" },
  XK_Oacute:                        { code: 0x00d3, description: "(\u00D3) LATIN CAPITAL LETTER O WITH ACUTE" },
  XK_Ocircumflex:                   { code: 0x00d4, description: "(\u00D4) LATIN CAPITAL LETTER O WITH CIRCUMFLEX" },
  XK_Otilde:                        { code: 0x00d5, description: "(\u00D5) LATIN CAPITAL LETTER O WITH TILDE" },
  XK_Odiaeresis:                    { code: 0x00d6, description: "(\u00D6) LATIN CAPITAL LETTER O WITH DIAERESIS" },
  XK_multiply:                      { code: 0x00d7, description: "(\u00D7) MULTIPLICATION SIGN" },
  XK_Oslash:                        { code: 0x00d8, description: "(\u00D8) LATIN CAPITAL LETTER O WITH STROKE" },
  XK_Ooblique:                      { code: 0x00d8, description: "(\u00D8) LATIN CAPITAL LETTER O WITH STROKE" },
  XK_Ugrave:                        { code: 0x00d9, description: "(\u00D9) LATIN CAPITAL LETTER U WITH GRAVE" },
  XK_Uacute:                        { code: 0x00da, description: "(\u00DA) LATIN CAPITAL LETTER U WITH ACUTE" },
  XK_Ucircumflex:                   { code: 0x00db, description: "(\u00DB) LATIN CAPITAL LETTER U WITH CIRCUMFLEX" },
  XK_Udiaeresis:                    { code: 0x00dc, description: "(\u00DC) LATIN CAPITAL LETTER U WITH DIAERESIS" },
  XK_Yacute:                        { code: 0x00dd, description: "(\u00DD) LATIN CAPITAL LETTER Y WITH ACUTE" },
  XK_THORN:                         { code: 0x00de, description: "(\u00DE) LATIN CAPITAL LETTER THORN" },
  XK_Thorn:                         { code: 0x00de, description: "deprecated" },
  XK_ssharp:                        { code: 0x00df, description: "(\u00DF) LATIN SMALL LETTER SHARP S" },
  XK_agrave:                        { code: 0x00e0, description: "(\u00E0) LATIN SMALL LETTER A WITH GRAVE" },
  XK_aacute:                        { code: 0x00e1, description: "(\u00E1) LATIN SMALL LETTER A WITH ACUTE" },
  XK_acircumflex:                   { code: 0x00e2, description: "(\u00E2) LATIN SMALL LETTER A WITH CIRCUMFLEX" },
  XK_atilde:                        { code: 0x00e3, description: "(\u00E3) LATIN SMALL LETTER A WITH TILDE" },
  XK_adiaeresis:                    { code: 0x00e4, description: "(\u00E4) LATIN SMALL LETTER A WITH DIAERESIS" },
  XK_aring:                         { code: 0x00e5, description: "(\u00E5) LATIN SMALL LETTER A WITH RING ABOVE" },
  XK_ae:                            { code: 0x00e6, description: "(\u00E6) LATIN SMALL LETTER AE" },
  XK_ccedilla:                      { code: 0x00e7, description: "(\u00E7) LATIN SMALL LETTER C WITH CEDILLA" },
  XK_egrave:                        { code: 0x00e8, description: "(\u00E8) LATIN SMALL LETTER E WITH GRAVE" },
  XK_eacute:                        { code: 0x00e9, description: "(\u00E9) LATIN SMALL LETTER E WITH ACUTE" },
  XK_ecircumflex:                   { code: 0x00ea, description: "(\u00EA) LATIN SMALL LETTER E WITH CIRCUMFLEX" },
  XK_ediaeresis:                    { code: 0x00eb, description: "(\u00EB) LATIN SMALL LETTER E WITH DIAERESIS" },
  XK_igrave:                        { code: 0x00ec, description: "(\u00EC) LATIN SMALL LETTER I WITH GRAVE" },
  XK_iacute:                        { code: 0x00ed, description: "(\u00ED) LATIN SMALL LETTER I WITH ACUTE" },
  XK_icircumflex:                   { code: 0x00ee, description: "(\u00EE) LATIN SMALL LETTER I WITH CIRCUMFLEX" },
  XK_idiaeresis:                    { code: 0x00ef, description: "(\u00EF) LATIN SMALL LETTER I WITH DIAERESIS" },
  XK_eth:                           { code: 0x00f0, description: "(\u00F0) LATIN SMALL LETTER ETH" },
  XK_ntilde:                        { code: 0x00f1, description: "(\u00F1) LATIN SMALL LETTER N WITH TILDE" },
  XK_ograve:                        { code: 0x00f2, description: "(\u00F2) LATIN SMALL LETTER O WITH GRAVE" },
  XK_oacute:                        { code: 0x00f3, description: "(\u00F3) LATIN SMALL LETTER O WITH ACUTE" },
  XK_ocircumflex:                   { code: 0x00f4, description: "(\u00F4) LATIN SMALL LETTER O WITH CIRCUMFLEX" },
  XK_otilde:                        { code: 0x00f5, description: "(\u00F5) LATIN SMALL LETTER O WITH TILDE" },
  XK_odiaeresis:                    { code: 0x00f6, description: "(\u00F6) LATIN SMALL LETTER O WITH DIAERESIS" },
  XK_division:                      { code: 0x00f7, description: "(\u00F7) DIVISION SIGN" },
  XK_oslash:                        { code: 0x00f8, description: "(\u00F8) LATIN SMALL LETTER O WITH STROKE" },
  XK_ooblique:                      { code: 0x00f8, description: "(\u00F8) LATIN SMALL LETTER O WITH STROKE" },
  XK_ugrave:                        { code: 0x00f9, description: "(\u00F9) LATIN SMALL LETTER U WITH GRAVE" },
  XK_uacute:                        { code: 0x00fa, description: "(\u00FA) LATIN SMALL LETTER U WITH ACUTE" },
  XK_ucircumflex:                   { code: 0x00fb, description: "(\u00FB) LATIN SMALL LETTER U WITH CIRCUMFLEX" },
  XK_udiaeresis:                    { code: 0x00fc, description: "(\u00FC) LATIN SMALL LETTER U WITH DIAERESIS" },
  XK_yacute:                        { code: 0x00fd, description: "(\u00FD) LATIN SMALL LETTER Y WITH ACUTE" },
  XK_thorn:                         { code: 0x00fe, description: "(\u00FE) LATIN SMALL LETTER THORN" },
  XK_ydiaeresis:                    { code: 0x00ff, description: "(\u00FF) LATIN SMALL LETTER Y WITH DIAERESIS" },


/*
 * Latin 2
 * Byte 3 = 1
 */

// Group XK_LATIN2
  XK_Aogonek:                       { code: 0x01a1, description: "(\u0104) LATIN CAPITAL LETTER A WITH OGONEK" },
  XK_breve:                         { code: 0x01a2, description: "(\u02D8) BREVE" },
  XK_Lstroke:                       { code: 0x01a3, description: "(\u0141) LATIN CAPITAL LETTER L WITH STROKE" },
  XK_Lcaron:                        { code: 0x01a5, description: "(\u013D) LATIN CAPITAL LETTER L WITH CARON" },
  XK_Sacute:                        { code: 0x01a6, description: "(\u015A) LATIN CAPITAL LETTER S WITH ACUTE" },
  XK_Scaron:                        { code: 0x01a9, description: "(\u0160) LATIN CAPITAL LETTER S WITH CARON" },
  XK_Scedilla:                      { code: 0x01aa, description: "(\u015E) LATIN CAPITAL LETTER S WITH CEDILLA" },
  XK_Tcaron:                        { code: 0x01ab, description: "(\u0164) LATIN CAPITAL LETTER T WITH CARON" },
  XK_Zacute:                        { code: 0x01ac, description: "(\u0179) LATIN CAPITAL LETTER Z WITH ACUTE" },
  XK_Zcaron:                        { code: 0x01ae, description: "(\u017D) LATIN CAPITAL LETTER Z WITH CARON" },
  XK_Zabovedot:                     { code: 0x01af, description: "(\u017B) LATIN CAPITAL LETTER Z WITH DOT ABOVE" },
  XK_aogonek:                       { code: 0x01b1, description: "(\u0105) LATIN SMALL LETTER A WITH OGONEK" },
  XK_ogonek:                        { code: 0x01b2, description: "(\u02DB) OGONEK" },
  XK_lstroke:                       { code: 0x01b3, description: "(\u0142) LATIN SMALL LETTER L WITH STROKE" },
  XK_lcaron:                        { code: 0x01b5, description: "(\u013E) LATIN SMALL LETTER L WITH CARON" },
  XK_sacute:                        { code: 0x01b6, description: "(\u015B) LATIN SMALL LETTER S WITH ACUTE" },
  XK_caron:                         { code: 0x01b7, description: "(\u02C7) CARON" },
  XK_scaron:                        { code: 0x01b9, description: "(\u0161) LATIN SMALL LETTER S WITH CARON" },
  XK_scedilla:                      { code: 0x01ba, description: "(\u015F) LATIN SMALL LETTER S WITH CEDILLA" },
  XK_tcaron:                        { code: 0x01bb, description: "(\u0165) LATIN SMALL LETTER T WITH CARON" },
  XK_zacute:                        { code: 0x01bc, description: "(\u017A) LATIN SMALL LETTER Z WITH ACUTE" },
  XK_doubleacute:                   { code: 0x01bd, description: "(\u02DD) DOUBLE ACUTE ACCENT" },
  XK_zcaron:                        { code: 0x01be, description: "(\u017E) LATIN SMALL LETTER Z WITH CARON" },
  XK_zabovedot:                     { code: 0x01bf, description: "(\u017C) LATIN SMALL LETTER Z WITH DOT ABOVE" },
  XK_Racute:                        { code: 0x01c0, description: "(\u0154) LATIN CAPITAL LETTER R WITH ACUTE" },
  XK_Abreve:                        { code: 0x01c3, description: "(\u0102) LATIN CAPITAL LETTER A WITH BREVE" },
  XK_Lacute:                        { code: 0x01c5, description: "(\u0139) LATIN CAPITAL LETTER L WITH ACUTE" },
  XK_Cacute:                        { code: 0x01c6, description: "(\u0106) LATIN CAPITAL LETTER C WITH ACUTE" },
  XK_Ccaron:                        { code: 0x01c8, description: "(\u010C) LATIN CAPITAL LETTER C WITH CARON" },
  XK_Eogonek:                       { code: 0x01ca, description: "(\u0118) LATIN CAPITAL LETTER E WITH OGONEK" },
  XK_Ecaron:                        { code: 0x01cc, description: "(\u011A) LATIN CAPITAL LETTER E WITH CARON" },
  XK_Dcaron:                        { code: 0x01cf, description: "(\u010E) LATIN CAPITAL LETTER D WITH CARON" },
  XK_Dstroke:                       { code: 0x01d0, description: "(\u0110) LATIN CAPITAL LETTER D WITH STROKE" },
  XK_Nacute:                        { code: 0x01d1, description: "(\u0143) LATIN CAPITAL LETTER N WITH ACUTE" },
  XK_Ncaron:                        { code: 0x01d2, description: "(\u0147) LATIN CAPITAL LETTER N WITH CARON" },
  XK_Odoubleacute:                  { code: 0x01d5, description: "(\u0150) LATIN CAPITAL LETTER O WITH DOUBLE ACUTE" },
  XK_Rcaron:                        { code: 0x01d8, description: "(\u0158) LATIN CAPITAL LETTER R WITH CARON" },
  XK_Uring:                         { code: 0x01d9, description: "(\u016E) LATIN CAPITAL LETTER U WITH RING ABOVE" },
  XK_Udoubleacute:                  { code: 0x01db, description: "(\u0170) LATIN CAPITAL LETTER U WITH DOUBLE ACUTE" },
  XK_Tcedilla:                      { code: 0x01de, description: "(\u0162) LATIN CAPITAL LETTER T WITH CEDILLA" },
  XK_racute:                        { code: 0x01e0, description: "(\u0155) LATIN SMALL LETTER R WITH ACUTE" },
  XK_abreve:                        { code: 0x01e3, description: "(\u0103) LATIN SMALL LETTER A WITH BREVE" },
  XK_lacute:                        { code: 0x01e5, description: "(\u013A) LATIN SMALL LETTER L WITH ACUTE" },
  XK_cacute:                        { code: 0x01e6, description: "(\u0107) LATIN SMALL LETTER C WITH ACUTE" },
  XK_ccaron:                        { code: 0x01e8, description: "(\u010D) LATIN SMALL LETTER C WITH CARON" },
  XK_eogonek:                       { code: 0x01ea, description: "(\u0119) LATIN SMALL LETTER E WITH OGONEK" },
  XK_ecaron:                        { code: 0x01ec, description: "(\u011B) LATIN SMALL LETTER E WITH CARON" },
  XK_dcaron:                        { code: 0x01ef, description: "(\u010F) LATIN SMALL LETTER D WITH CARON" },
  XK_dstroke:                       { code: 0x01f0, description: "(\u0111) LATIN SMALL LETTER D WITH STROKE" },
  XK_nacute:                        { code: 0x01f1, description: "(\u0144) LATIN SMALL LETTER N WITH ACUTE" },
  XK_ncaron:                        { code: 0x01f2, description: "(\u0148) LATIN SMALL LETTER N WITH CARON" },
  XK_odoubleacute:                  { code: 0x01f5, description: "(\u0151) LATIN SMALL LETTER O WITH DOUBLE ACUTE" },
  XK_rcaron:                        { code: 0x01f8, description: "(\u0159) LATIN SMALL LETTER R WITH CARON" },
  XK_uring:                         { code: 0x01f9, description: "(\u016F) LATIN SMALL LETTER U WITH RING ABOVE" },
  XK_udoubleacute:                  { code: 0x01fb, description: "(\u0171) LATIN SMALL LETTER U WITH DOUBLE ACUTE" },
  XK_tcedilla:                      { code: 0x01fe, description: "(\u0163) LATIN SMALL LETTER T WITH CEDILLA" },
  XK_abovedot:                      { code: 0x01ff, description: "(\u02D9) DOT ABOVE" },


/*
 * Latin 3
 * Byte 3 = 2
 */

// Group XK_LATIN3
  XK_Hstroke:                       { code: 0x02a1, description: "(\u0126) LATIN CAPITAL LETTER H WITH STROKE" },
  XK_Hcircumflex:                   { code: 0x02a6, description: "(\u0124) LATIN CAPITAL LETTER H WITH CIRCUMFLEX" },
  XK_Iabovedot:                     { code: 0x02a9, description: "(\u0130) LATIN CAPITAL LETTER I WITH DOT ABOVE" },
  XK_Gbreve:                        { code: 0x02ab, description: "(\u011E) LATIN CAPITAL LETTER G WITH BREVE" },
  XK_Jcircumflex:                   { code: 0x02ac, description: "(\u0134) LATIN CAPITAL LETTER J WITH CIRCUMFLEX" },
  XK_hstroke:                       { code: 0x02b1, description: "(\u0127) LATIN SMALL LETTER H WITH STROKE" },
  XK_hcircumflex:                   { code: 0x02b6, description: "(\u0125) LATIN SMALL LETTER H WITH CIRCUMFLEX" },
  XK_idotless:                      { code: 0x02b9, description: "(\u0131) LATIN SMALL LETTER DOTLESS I" },
  XK_gbreve:                        { code: 0x02bb, description: "(\u011F) LATIN SMALL LETTER G WITH BREVE" },
  XK_jcircumflex:                   { code: 0x02bc, description: "(\u0135) LATIN SMALL LETTER J WITH CIRCUMFLEX" },
  XK_Cabovedot:                     { code: 0x02c5, description: "(\u010A) LATIN CAPITAL LETTER C WITH DOT ABOVE" },
  XK_Ccircumflex:                   { code: 0x02c6, description: "(\u0108) LATIN CAPITAL LETTER C WITH CIRCUMFLEX" },
  XK_Gabovedot:                     { code: 0x02d5, description: "(\u0120) LATIN CAPITAL LETTER G WITH DOT ABOVE" },
  XK_Gcircumflex:                   { code: 0x02d8, description: "(\u011C) LATIN CAPITAL LETTER G WITH CIRCUMFLEX" },
  XK_Ubreve:                        { code: 0x02dd, description: "(\u016C) LATIN CAPITAL LETTER U WITH BREVE" },
  XK_Scircumflex:                   { code: 0x02de, description: "(\u015C) LATIN CAPITAL LETTER S WITH CIRCUMFLEX" },
  XK_cabovedot:                     { code: 0x02e5, description: "(\u010B) LATIN SMALL LETTER C WITH DOT ABOVE" },
  XK_ccircumflex:                   { code: 0x02e6, description: "(\u0109) LATIN SMALL LETTER C WITH CIRCUMFLEX" },
  XK_gabovedot:                     { code: 0x02f5, description: "(\u0121) LATIN SMALL LETTER G WITH DOT ABOVE" },
  XK_gcircumflex:                   { code: 0x02f8, description: "(\u011D) LATIN SMALL LETTER G WITH CIRCUMFLEX" },
  XK_ubreve:                        { code: 0x02fd, description: "(\u016D) LATIN SMALL LETTER U WITH BREVE" },
  XK_scircumflex:                   { code: 0x02fe, description: "(\u015D) LATIN SMALL LETTER S WITH CIRCUMFLEX" },



/*
 * Latin 4
 * Byte 3 = 3
 */

// Group XK_LATIN4
  XK_kra:                           { code: 0x03a2, description: "(\u0138) LATIN SMALL LETTER KRA" },
  XK_kappa:                         { code: 0x03a2, description: "deprecated" },
  XK_Rcedilla:                      { code: 0x03a3, description: "(\u0156) LATIN CAPITAL LETTER R WITH CEDILLA" },
  XK_Itilde:                        { code: 0x03a5, description: "(\u0128) LATIN CAPITAL LETTER I WITH TILDE" },
  XK_Lcedilla:                      { code: 0x03a6, description: "(\u013B) LATIN CAPITAL LETTER L WITH CEDILLA" },
  XK_Emacron:                       { code: 0x03aa, description: "(\u0112) LATIN CAPITAL LETTER E WITH MACRON" },
  XK_Gcedilla:                      { code: 0x03ab, description: "(\u0122) LATIN CAPITAL LETTER G WITH CEDILLA" },
  XK_Tslash:                        { code: 0x03ac, description: "(\u0166) LATIN CAPITAL LETTER T WITH STROKE" },
  XK_rcedilla:                      { code: 0x03b3, description: "(\u0157) LATIN SMALL LETTER R WITH CEDILLA" },
  XK_itilde:                        { code: 0x03b5, description: "(\u0129) LATIN SMALL LETTER I WITH TILDE" },
  XK_lcedilla:                      { code: 0x03b6, description: "(\u013C) LATIN SMALL LETTER L WITH CEDILLA" },
  XK_emacron:                       { code: 0x03ba, description: "(\u0113) LATIN SMALL LETTER E WITH MACRON" },
  XK_gcedilla:                      { code: 0x03bb, description: "(\u0123) LATIN SMALL LETTER G WITH CEDILLA" },
  XK_tslash:                        { code: 0x03bc, description: "(\u0167) LATIN SMALL LETTER T WITH STROKE" },
  XK_ENG:                           { code: 0x03bd, description: "(\u014A) LATIN CAPITAL LETTER ENG" },
  XK_eng:                           { code: 0x03bf, description: "(\u014B) LATIN SMALL LETTER ENG" },
  XK_Amacron:                       { code: 0x03c0, description: "(\u0100) LATIN CAPITAL LETTER A WITH MACRON" },
  XK_Iogonek:                       { code: 0x03c7, description: "(\u012E) LATIN CAPITAL LETTER I WITH OGONEK" },
  XK_Eabovedot:                     { code: 0x03cc, description: "(\u0116) LATIN CAPITAL LETTER E WITH DOT ABOVE" },
  XK_Imacron:                       { code: 0x03cf, description: "(\u012A) LATIN CAPITAL LETTER I WITH MACRON" },
  XK_Ncedilla:                      { code: 0x03d1, description: "(\u0145) LATIN CAPITAL LETTER N WITH CEDILLA" },
  XK_Omacron:                       { code: 0x03d2, description: "(\u014C) LATIN CAPITAL LETTER O WITH MACRON" },
  XK_Kcedilla:                      { code: 0x03d3, description: "(\u0136) LATIN CAPITAL LETTER K WITH CEDILLA" },
  XK_Uogonek:                       { code: 0x03d9, description: "(\u0172) LATIN CAPITAL LETTER U WITH OGONEK" },
  XK_Utilde:                        { code: 0x03dd, description: "(\u0168) LATIN CAPITAL LETTER U WITH TILDE" },
  XK_Umacron:                       { code: 0x03de, description: "(\u016A) LATIN CAPITAL LETTER U WITH MACRON" },
  XK_amacron:                       { code: 0x03e0, description: "(\u0101) LATIN SMALL LETTER A WITH MACRON" },
  XK_iogonek:                       { code: 0x03e7, description: "(\u012F) LATIN SMALL LETTER I WITH OGONEK" },
  XK_eabovedot:                     { code: 0x03ec, description: "(\u0117) LATIN SMALL LETTER E WITH DOT ABOVE" },
  XK_imacron:                       { code: 0x03ef, description: "(\u012B) LATIN SMALL LETTER I WITH MACRON" },
  XK_ncedilla:                      { code: 0x03f1, description: "(\u0146) LATIN SMALL LETTER N WITH CEDILLA" },
  XK_omacron:                       { code: 0x03f2, description: "(\u014D) LATIN SMALL LETTER O WITH MACRON" },
  XK_kcedilla:                      { code: 0x03f3, description: "(\u0137) LATIN SMALL LETTER K WITH CEDILLA" },
  XK_uogonek:                       { code: 0x03f9, description: "(\u0173) LATIN SMALL LETTER U WITH OGONEK" },
  XK_utilde:                        { code: 0x03fd, description: "(\u0169) LATIN SMALL LETTER U WITH TILDE" },
  XK_umacron:                       { code: 0x03fe, description: "(\u016B) LATIN SMALL LETTER U WITH MACRON" },


/*
 * Latin 8
 */
// Group XK_LATIN8
  XK_Wcircumflex:                { code: 0x1000174, description: "(\u0174) LATIN CAPITAL LETTER W WITH CIRCUMFLEX" },
  XK_wcircumflex:                { code: 0x1000175, description: "(\u0175) LATIN SMALL LETTER W WITH CIRCUMFLEX" },
  XK_Ycircumflex:                { code: 0x1000176, description: "(\u0176) LATIN CAPITAL LETTER Y WITH CIRCUMFLEX" },
  XK_ycircumflex:                { code: 0x1000177, description: "(\u0177) LATIN SMALL LETTER Y WITH CIRCUMFLEX" },
  XK_Babovedot:                  { code: 0x1001e02, description: "(\u1E02) LATIN CAPITAL LETTER B WITH DOT ABOVE" },
  XK_babovedot:                  { code: 0x1001e03, description: "(\u1E03) LATIN SMALL LETTER B WITH DOT ABOVE" },
  XK_Dabovedot:                  { code: 0x1001e0a, description: "(\u1E0A) LATIN CAPITAL LETTER D WITH DOT ABOVE" },
  XK_dabovedot:                  { code: 0x1001e0b, description: "(\u1E0B) LATIN SMALL LETTER D WITH DOT ABOVE" },
  XK_Fabovedot:                  { code: 0x1001e1e, description: "(\u1E1E) LATIN CAPITAL LETTER F WITH DOT ABOVE" },
  XK_fabovedot:                  { code: 0x1001e1f, description: "(\u1E1F) LATIN SMALL LETTER F WITH DOT ABOVE" },
  XK_Mabovedot:                  { code: 0x1001e40, description: "(\u1E40) LATIN CAPITAL LETTER M WITH DOT ABOVE" },
  XK_mabovedot:                  { code: 0x1001e41, description: "(\u1E41) LATIN SMALL LETTER M WITH DOT ABOVE" },
  XK_Pabovedot:                  { code: 0x1001e56, description: "(\u1E56) LATIN CAPITAL LETTER P WITH DOT ABOVE" },
  XK_pabovedot:                  { code: 0x1001e57, description: "(\u1E57) LATIN SMALL LETTER P WITH DOT ABOVE" },
  XK_Sabovedot:                  { code: 0x1001e60, description: "(\u1E60) LATIN CAPITAL LETTER S WITH DOT ABOVE" },
  XK_sabovedot:                  { code: 0x1001e61, description: "(\u1E61) LATIN SMALL LETTER S WITH DOT ABOVE" },
  XK_Tabovedot:                  { code: 0x1001e6a, description: "(\u1E6A) LATIN CAPITAL LETTER T WITH DOT ABOVE" },
  XK_tabovedot:                  { code: 0x1001e6b, description: "(\u1E6B) LATIN SMALL LETTER T WITH DOT ABOVE" },
  XK_Wgrave:                     { code: 0x1001e80, description: "(\u1E80) LATIN CAPITAL LETTER W WITH GRAVE" },
  XK_wgrave:                     { code: 0x1001e81, description: "(\u1E81) LATIN SMALL LETTER W WITH GRAVE" },
  XK_Wacute:                     { code: 0x1001e82, description: "(\u1E82) LATIN CAPITAL LETTER W WITH ACUTE" },
  XK_wacute:                     { code: 0x1001e83, description: "(\u1E83) LATIN SMALL LETTER W WITH ACUTE" },
  XK_Wdiaeresis:                 { code: 0x1001e84, description: "(\u1E84) LATIN CAPITAL LETTER W WITH DIAERESIS" },
  XK_wdiaeresis:                 { code: 0x1001e85, description: "(\u1E85) LATIN SMALL LETTER W WITH DIAERESIS" },
  XK_Ygrave:                     { code: 0x1001ef2, description: "(\u1EF2) LATIN CAPITAL LETTER Y WITH GRAVE" },
  XK_ygrave:                     { code: 0x1001ef3, description: "(\u1EF3) LATIN SMALL LETTER Y WITH GRAVE" },


/*
 * Latin 9
 * Byte 3 = 0x13
 */

// Group XK_LATIN9
  XK_OE:                            { code: 0x13bc, description: "(\u0152) LATIN CAPITAL LIGATURE OE" },
  XK_oe:                            { code: 0x13bd, description: "(\u0153) LATIN SMALL LIGATURE OE" },
  XK_Ydiaeresis:                    { code: 0x13be, description: "(\u0178) LATIN CAPITAL LETTER Y WITH DIAERESIS" },


/*
 * Katakana
 * Byte 3 = 4
 */

// Group XK_KATAKANA
  XK_overline:                      { code: 0x047e, description: "(\u203E) OVERLINE" },
  XK_kana_fullstop:                 { code: 0x04a1, description: "(\u3002) IDEOGRAPHIC FULL STOP" },
  XK_kana_openingbracket:           { code: 0x04a2, description: "(\u300C) LEFT CORNER BRACKET" },
  XK_kana_closingbracket:           { code: 0x04a3, description: "(\u300D) RIGHT CORNER BRACKET" },
  XK_kana_comma:                    { code: 0x04a4, description: "(\u3001) IDEOGRAPHIC COMMA" },
  XK_kana_conjunctive:              { code: 0x04a5, description: "(\u30FB) KATAKANA MIDDLE DOT" },
  XK_kana_middledot:                { code: 0x04a5, description: "deprecated" },
  XK_kana_WO:                       { code: 0x04a6, description: "(\u30F2) KATAKANA LETTER WO" },
  XK_kana_a:                        { code: 0x04a7, description: "(\u30A1) KATAKANA LETTER SMALL A" },
  XK_kana_i:                        { code: 0x04a8, description: "(\u30A3) KATAKANA LETTER SMALL I" },
  XK_kana_u:                        { code: 0x04a9, description: "(\u30A5) KATAKANA LETTER SMALL U" },
  XK_kana_e:                        { code: 0x04aa, description: "(\u30A7) KATAKANA LETTER SMALL E" },
  XK_kana_o:                        { code: 0x04ab, description: "(\u30A9) KATAKANA LETTER SMALL O" },
  XK_kana_ya:                       { code: 0x04ac, description: "(\u30E3) KATAKANA LETTER SMALL YA" },
  XK_kana_yu:                       { code: 0x04ad, description: "(\u30E5) KATAKANA LETTER SMALL YU" },
  XK_kana_yo:                       { code: 0x04ae, description: "(\u30E7) KATAKANA LETTER SMALL YO" },
  XK_kana_tsu:                      { code: 0x04af, description: "(\u30C3) KATAKANA LETTER SMALL TU" },
  XK_kana_tu:                       { code: 0x04af, description: "deprecated" },
  XK_prolongedsound:                { code: 0x04b0, description: "(\u30FC) KATAKANA-HIRAGANA PROLONGED SOUND MARK" },
  XK_kana_A:                        { code: 0x04b1, description: "(\u30A2) KATAKANA LETTER A" },
  XK_kana_I:                        { code: 0x04b2, description: "(\u30A4) KATAKANA LETTER I" },
  XK_kana_U:                        { code: 0x04b3, description: "(\u30A6) KATAKANA LETTER U" },
  XK_kana_E:                        { code: 0x04b4, description: "(\u30A8) KATAKANA LETTER E" },
  XK_kana_O:                        { code: 0x04b5, description: "(\u30AA) KATAKANA LETTER O" },
  XK_kana_KA:                       { code: 0x04b6, description: "(\u30AB) KATAKANA LETTER KA" },
  XK_kana_KI:                       { code: 0x04b7, description: "(\u30AD) KATAKANA LETTER KI" },
  XK_kana_KU:                       { code: 0x04b8, description: "(\u30AF) KATAKANA LETTER KU" },
  XK_kana_KE:                       { code: 0x04b9, description: "(\u30B1) KATAKANA LETTER KE" },
  XK_kana_KO:                       { code: 0x04ba, description: "(\u30B3) KATAKANA LETTER KO" },
  XK_kana_SA:                       { code: 0x04bb, description: "(\u30B5) KATAKANA LETTER SA" },
  XK_kana_SHI:                      { code: 0x04bc, description: "(\u30B7) KATAKANA LETTER SI" },
  XK_kana_SU:                       { code: 0x04bd, description: "(\u30B9) KATAKANA LETTER SU" },
  XK_kana_SE:                       { code: 0x04be, description: "(\u30BB) KATAKANA LETTER SE" },
  XK_kana_SO:                       { code: 0x04bf, description: "(\u30BD) KATAKANA LETTER SO" },
  XK_kana_TA:                       { code: 0x04c0, description: "(\u30BF) KATAKANA LETTER TA" },
  XK_kana_CHI:                      { code: 0x04c1, description: "(\u30C1) KATAKANA LETTER TI" },
  XK_kana_TI:                       { code: 0x04c1, description: "deprecated" },
  XK_kana_TSU:                      { code: 0x04c2, description: "(\u30C4) KATAKANA LETTER TU" },
  XK_kana_TU:                       { code: 0x04c2, description: "deprecated" },
  XK_kana_TE:                       { code: 0x04c3, description: "(\u30C6) KATAKANA LETTER TE" },
  XK_kana_TO:                       { code: 0x04c4, description: "(\u30C8) KATAKANA LETTER TO" },
  XK_kana_NA:                       { code: 0x04c5, description: "(\u30CA) KATAKANA LETTER NA" },
  XK_kana_NI:                       { code: 0x04c6, description: "(\u30CB) KATAKANA LETTER NI" },
  XK_kana_NU:                       { code: 0x04c7, description: "(\u30CC) KATAKANA LETTER NU" },
  XK_kana_NE:                       { code: 0x04c8, description: "(\u30CD) KATAKANA LETTER NE" },
  XK_kana_NO:                       { code: 0x04c9, description: "(\u30CE) KATAKANA LETTER NO" },
  XK_kana_HA:                       { code: 0x04ca, description: "(\u30CF) KATAKANA LETTER HA" },
  XK_kana_HI:                       { code: 0x04cb, description: "(\u30D2) KATAKANA LETTER HI" },
  XK_kana_FU:                       { code: 0x04cc, description: "(\u30D5) KATAKANA LETTER HU" },
  XK_kana_HU:                       { code: 0x04cc, description: "deprecated" },
  XK_kana_HE:                       { code: 0x04cd, description: "(\u30D8) KATAKANA LETTER HE" },
  XK_kana_HO:                       { code: 0x04ce, description: "(\u30DB) KATAKANA LETTER HO" },
  XK_kana_MA:                       { code: 0x04cf, description: "(\u30DE) KATAKANA LETTER MA" },
  XK_kana_MI:                       { code: 0x04d0, description: "(\u30DF) KATAKANA LETTER MI" },
  XK_kana_MU:                       { code: 0x04d1, description: "(\u30E0) KATAKANA LETTER MU" },
  XK_kana_ME:                       { code: 0x04d2, description: "(\u30E1) KATAKANA LETTER ME" },
  XK_kana_MO:                       { code: 0x04d3, description: "(\u30E2) KATAKANA LETTER MO" },
  XK_kana_YA:                       { code: 0x04d4, description: "(\u30E4) KATAKANA LETTER YA" },
  XK_kana_YU:                       { code: 0x04d5, description: "(\u30E6) KATAKANA LETTER YU" },
  XK_kana_YO:                       { code: 0x04d6, description: "(\u30E8) KATAKANA LETTER YO" },
  XK_kana_RA:                       { code: 0x04d7, description: "(\u30E9) KATAKANA LETTER RA" },
  XK_kana_RI:                       { code: 0x04d8, description: "(\u30EA) KATAKANA LETTER RI" },
  XK_kana_RU:                       { code: 0x04d9, description: "(\u30EB) KATAKANA LETTER RU" },
  XK_kana_RE:                       { code: 0x04da, description: "(\u30EC) KATAKANA LETTER RE" },
  XK_kana_RO:                       { code: 0x04db, description: "(\u30ED) KATAKANA LETTER RO" },
  XK_kana_WA:                       { code: 0x04dc, description: "(\u30EF) KATAKANA LETTER WA" },
  XK_kana_N:                        { code: 0x04dd, description: "(\u30F3) KATAKANA LETTER N" },
  XK_voicedsound:                   { code: 0x04de, description: "(\u309B) KATAKANA-HIRAGANA VOICED SOUND MARK" },
  XK_semivoicedsound:               { code: 0x04df, description: "(\u309C) KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK" },
  XK_kana_switch:                   { code: 0xff7e, description: "Alias for mode_switch" },


/*
 * Arabic
 * Byte 3 = 5
 */

// Group XK_ARABIC
  XK_Farsi_0:                    { code: 0x10006f0, description: "(\u06F0) EXTENDED ARABIC-INDIC DIGIT ZERO" },
  XK_Farsi_1:                    { code: 0x10006f1, description: "(\u06F1) EXTENDED ARABIC-INDIC DIGIT ONE" },
  XK_Farsi_2:                    { code: 0x10006f2, description: "(\u06F2) EXTENDED ARABIC-INDIC DIGIT TWO" },
  XK_Farsi_3:                    { code: 0x10006f3, description: "(\u06F3) EXTENDED ARABIC-INDIC DIGIT THREE" },
  XK_Farsi_4:                    { code: 0x10006f4, description: "(\u06F4) EXTENDED ARABIC-INDIC DIGIT FOUR" },
  XK_Farsi_5:                    { code: 0x10006f5, description: "(\u06F5) EXTENDED ARABIC-INDIC DIGIT FIVE" },
  XK_Farsi_6:                    { code: 0x10006f6, description: "(\u06F6) EXTENDED ARABIC-INDIC DIGIT SIX" },
  XK_Farsi_7:                    { code: 0x10006f7, description: "(\u06F7) EXTENDED ARABIC-INDIC DIGIT SEVEN" },
  XK_Farsi_8:                    { code: 0x10006f8, description: "(\u06F8) EXTENDED ARABIC-INDIC DIGIT EIGHT" },
  XK_Farsi_9:                    { code: 0x10006f9, description: "(\u06F9) EXTENDED ARABIC-INDIC DIGIT NINE" },
  XK_Arabic_percent:             { code: 0x100066a, description: "(\u066A) ARABIC PERCENT SIGN" },
  XK_Arabic_superscript_alef:    { code: 0x1000670, description: "(\u0670) ARABIC LETTER SUPERSCRIPT ALEF" },
  XK_Arabic_tteh:                { code: 0x1000679, description: "(\u0679) ARABIC LETTER TTEH" },
  XK_Arabic_peh:                 { code: 0x100067e, description: "(\u067E) ARABIC LETTER PEH" },
  XK_Arabic_tcheh:               { code: 0x1000686, description: "(\u0686) ARABIC LETTER TCHEH" },
  XK_Arabic_ddal:                { code: 0x1000688, description: "(\u0688) ARABIC LETTER DDAL" },
  XK_Arabic_rreh:                { code: 0x1000691, description: "(\u0691) ARABIC LETTER RREH" },
  XK_Arabic_comma:                  { code: 0x05ac, description: "(\u060C) ARABIC COMMA" },
  XK_Arabic_fullstop:            { code: 0x10006d4, description: "(\u06D4) ARABIC FULL STOP" },
  XK_Arabic_0:                   { code: 0x1000660, description: "(\u0660) ARABIC-INDIC DIGIT ZERO" },
  XK_Arabic_1:                   { code: 0x1000661, description: "(\u0661) ARABIC-INDIC DIGIT ONE" },
  XK_Arabic_2:                   { code: 0x1000662, description: "(\u0662) ARABIC-INDIC DIGIT TWO" },
  XK_Arabic_3:                   { code: 0x1000663, description: "(\u0663) ARABIC-INDIC DIGIT THREE" },
  XK_Arabic_4:                   { code: 0x1000664, description: "(\u0664) ARABIC-INDIC DIGIT FOUR" },
  XK_Arabic_5:                   { code: 0x1000665, description: "(\u0665) ARABIC-INDIC DIGIT FIVE" },
  XK_Arabic_6:                   { code: 0x1000666, description: "(\u0666) ARABIC-INDIC DIGIT SIX" },
  XK_Arabic_7:                   { code: 0x1000667, description: "(\u0667) ARABIC-INDIC DIGIT SEVEN" },
  XK_Arabic_8:                   { code: 0x1000668, description: "(\u0668) ARABIC-INDIC DIGIT EIGHT" },
  XK_Arabic_9:                   { code: 0x1000669, description: "(\u0669) ARABIC-INDIC DIGIT NINE" },
  XK_Arabic_semicolon:              { code: 0x05bb, description: "(\u061B) ARABIC SEMICOLON" },
  XK_Arabic_question_mark:          { code: 0x05bf, description: "(\u061F) ARABIC QUESTION MARK" },
  XK_Arabic_hamza:                  { code: 0x05c1, description: "(\u0621) ARABIC LETTER HAMZA" },
  XK_Arabic_maddaonalef:            { code: 0x05c2, description: "(\u0622) ARABIC LETTER ALEF WITH MADDA ABOVE" },
  XK_Arabic_hamzaonalef:            { code: 0x05c3, description: "(\u0623) ARABIC LETTER ALEF WITH HAMZA ABOVE" },
  XK_Arabic_hamzaonwaw:             { code: 0x05c4, description: "(\u0624) ARABIC LETTER WAW WITH HAMZA ABOVE" },
  XK_Arabic_hamzaunderalef:         { code: 0x05c5, description: "(\u0625) ARABIC LETTER ALEF WITH HAMZA BELOW" },
  XK_Arabic_hamzaonyeh:             { code: 0x05c6, description: "(\u0626) ARABIC LETTER YEH WITH HAMZA ABOVE" },
  XK_Arabic_alef:                   { code: 0x05c7, description: "(\u0627) ARABIC LETTER ALEF" },
  XK_Arabic_beh:                    { code: 0x05c8, description: "(\u0628) ARABIC LETTER BEH" },
  XK_Arabic_tehmarbuta:             { code: 0x05c9, description: "(\u0629) ARABIC LETTER TEH MARBUTA" },
  XK_Arabic_teh:                    { code: 0x05ca, description: "(\u062A) ARABIC LETTER TEH" },
  XK_Arabic_theh:                   { code: 0x05cb, description: "(\u062B) ARABIC LETTER THEH" },
  XK_Arabic_jeem:                   { code: 0x05cc, description: "(\u062C) ARABIC LETTER JEEM" },
  XK_Arabic_hah:                    { code: 0x05cd, description: "(\u062D) ARABIC LETTER HAH" },
  XK_Arabic_khah:                   { code: 0x05ce, description: "(\u062E) ARABIC LETTER KHAH" },
  XK_Arabic_dal:                    { code: 0x05cf, description: "(\u062F) ARABIC LETTER DAL" },
  XK_Arabic_thal:                   { code: 0x05d0, description: "(\u0630) ARABIC LETTER THAL" },
  XK_Arabic_ra:                     { code: 0x05d1, description: "(\u0631) ARABIC LETTER REH" },
  XK_Arabic_zain:                   { code: 0x05d2, description: "(\u0632) ARABIC LETTER ZAIN" },
  XK_Arabic_seen:                   { code: 0x05d3, description: "(\u0633) ARABIC LETTER SEEN" },
  XK_Arabic_sheen:                  { code: 0x05d4, description: "(\u0634) ARABIC LETTER SHEEN" },
  XK_Arabic_sad:                    { code: 0x05d5, description: "(\u0635) ARABIC LETTER SAD" },
  XK_Arabic_dad:                    { code: 0x05d6, description: "(\u0636) ARABIC LETTER DAD" },
  XK_Arabic_tah:                    { code: 0x05d7, description: "(\u0637) ARABIC LETTER TAH" },
  XK_Arabic_zah:                    { code: 0x05d8, description: "(\u0638) ARABIC LETTER ZAH" },
  XK_Arabic_ain:                    { code: 0x05d9, description: "(\u0639) ARABIC LETTER AIN" },
  XK_Arabic_ghain:                  { code: 0x05da, description: "(\u063A) ARABIC LETTER GHAIN" },
  XK_Arabic_tatweel:                { code: 0x05e0, description: "(\u0640) ARABIC TATWEEL" },
  XK_Arabic_feh:                    { code: 0x05e1, description: "(\u0641) ARABIC LETTER FEH" },
  XK_Arabic_qaf:                    { code: 0x05e2, description: "(\u0642) ARABIC LETTER QAF" },
  XK_Arabic_kaf:                    { code: 0x05e3, description: "(\u0643) ARABIC LETTER KAF" },
  XK_Arabic_lam:                    { code: 0x05e4, description: "(\u0644) ARABIC LETTER LAM" },
  XK_Arabic_meem:                   { code: 0x05e5, description: "(\u0645) ARABIC LETTER MEEM" },
  XK_Arabic_noon:                   { code: 0x05e6, description: "(\u0646) ARABIC LETTER NOON" },
  XK_Arabic_ha:                     { code: 0x05e7, description: "(\u0647) ARABIC LETTER HEH" },
  XK_Arabic_heh:                    { code: 0x05e7, description: "deprecated" },
  XK_Arabic_waw:                    { code: 0x05e8, description: "(\u0648) ARABIC LETTER WAW" },
  XK_Arabic_alefmaksura:            { code: 0x05e9, description: "(\u0649) ARABIC LETTER ALEF MAKSURA" },
  XK_Arabic_yeh:                    { code: 0x05ea, description: "(\u064A) ARABIC LETTER YEH" },
  XK_Arabic_fathatan:               { code: 0x05eb, description: "(\u064B) ARABIC FATHATAN" },
  XK_Arabic_dammatan:               { code: 0x05ec, description: "(\u064C) ARABIC DAMMATAN" },
  XK_Arabic_kasratan:               { code: 0x05ed, description: "(\u064D) ARABIC KASRATAN" },
  XK_Arabic_fatha:                  { code: 0x05ee, description: "(\u064E) ARABIC FATHA" },
  XK_Arabic_damma:                  { code: 0x05ef, description: "(\u064F) ARABIC DAMMA" },
  XK_Arabic_kasra:                  { code: 0x05f0, description: "(\u0650) ARABIC KASRA" },
  XK_Arabic_shadda:                 { code: 0x05f1, description: "(\u0651) ARABIC SHADDA" },
  XK_Arabic_sukun:                  { code: 0x05f2, description: "(\u0652) ARABIC SUKUN" },
  XK_Arabic_madda_above:         { code: 0x1000653, description: "(\u0653) ARABIC MADDAH ABOVE" },
  XK_Arabic_hamza_above:         { code: 0x1000654, description: "(\u0654) ARABIC HAMZA ABOVE" },
  XK_Arabic_hamza_below:         { code: 0x1000655, description: "(\u0655) ARABIC HAMZA BELOW" },
  XK_Arabic_jeh:                 { code: 0x1000698, description: "(\u0698) ARABIC LETTER JEH" },
  XK_Arabic_veh:                 { code: 0x10006a4, description: "(\u06A4) ARABIC LETTER VEH" },
  XK_Arabic_keheh:               { code: 0x10006a9, description: "(\u06A9) ARABIC LETTER KEHEH" },
  XK_Arabic_gaf:                 { code: 0x10006af, description: "(\u06AF) ARABIC LETTER GAF" },
  XK_Arabic_noon_ghunna:         { code: 0x10006ba, description: "(\u06BA) ARABIC LETTER NOON GHUNNA" },
  XK_Arabic_heh_doachashmee:     { code: 0x10006be, description: "(\u06BE) ARABIC LETTER HEH DOACHASHMEE" },
  XK_Farsi_yeh:                  { code: 0x10006cc, description: "(\u06CC) ARABIC LETTER FARSI YEH" },
  XK_Arabic_farsi_yeh:           { code: 0x10006cc, description: "(\u06CC) ARABIC LETTER FARSI YEH" },
  XK_Arabic_yeh_baree:           { code: 0x10006d2, description: "(\u06D2) ARABIC LETTER YEH BARREE" },
  XK_Arabic_heh_goal:            { code: 0x10006c1, description: "(\u06C1) ARABIC LETTER HEH GOAL" },
  XK_Arabic_switch:                 { code: 0xff7e, description: "Alias for mode_switch" },


/*
 * Cyrillic
 * Byte 3 = 6
 */
// Group XK_CYRILLIC
  XK_Cyrillic_GHE_bar:           { code: 0x1000492, description: "(\u0492) CYRILLIC CAPITAL LETTER GHE WITH STROKE" },
  XK_Cyrillic_ghe_bar:           { code: 0x1000493, description: "(\u0493) CYRILLIC SMALL LETTER GHE WITH STROKE" },
  XK_Cyrillic_ZHE_descender:     { code: 0x1000496, description: "(\u0496) CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER" },
  XK_Cyrillic_zhe_descender:     { code: 0x1000497, description: "(\u0497) CYRILLIC SMALL LETTER ZHE WITH DESCENDER" },
  XK_Cyrillic_KA_descender:      { code: 0x100049a, description: "(\u049A) CYRILLIC CAPITAL LETTER KA WITH DESCENDER" },
  XK_Cyrillic_ka_descender:      { code: 0x100049b, description: "(\u049B) CYRILLIC SMALL LETTER KA WITH DESCENDER" },
  XK_Cyrillic_KA_vertstroke:     { code: 0x100049c, description: "(\u049C) CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE" },
  XK_Cyrillic_ka_vertstroke:     { code: 0x100049d, description: "(\u049D) CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE" },
  XK_Cyrillic_EN_descender:      { code: 0x10004a2, description: "(\u04A2) CYRILLIC CAPITAL LETTER EN WITH DESCENDER" },
  XK_Cyrillic_en_descender:      { code: 0x10004a3, description: "(\u04A3) CYRILLIC SMALL LETTER EN WITH DESCENDER" },
  XK_Cyrillic_U_straight:        { code: 0x10004ae, description: "(\u04AE) CYRILLIC CAPITAL LETTER STRAIGHT U" },
  XK_Cyrillic_u_straight:        { code: 0x10004af, description: "(\u04AF) CYRILLIC SMALL LETTER STRAIGHT U" },
  XK_Cyrillic_U_straight_bar:    { code: 0x10004b0, description: "(\u04B0) CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE" },
  XK_Cyrillic_u_straight_bar:    { code: 0x10004b1, description: "(\u04B1) CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE" },
  XK_Cyrillic_HA_descender:      { code: 0x10004b2, description: "(\u04B2) CYRILLIC CAPITAL LETTER HA WITH DESCENDER" },
  XK_Cyrillic_ha_descender:      { code: 0x10004b3, description: "(\u04B3) CYRILLIC SMALL LETTER HA WITH DESCENDER" },
  XK_Cyrillic_CHE_descender:     { code: 0x10004b6, description: "(\u04B6) CYRILLIC CAPITAL LETTER CHE WITH DESCENDER" },
  XK_Cyrillic_che_descender:     { code: 0x10004b7, description: "(\u04B7) CYRILLIC SMALL LETTER CHE WITH DESCENDER" },
  XK_Cyrillic_CHE_vertstroke:    { code: 0x10004b8, description: "(\u04B8) CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE" },
  XK_Cyrillic_che_vertstroke:    { code: 0x10004b9, description: "(\u04B9) CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE" },
  XK_Cyrillic_SHHA:              { code: 0x10004ba, description: "(\u04BA) CYRILLIC CAPITAL LETTER SHHA" },
  XK_Cyrillic_shha:              { code: 0x10004bb, description: "(\u04BB) CYRILLIC SMALL LETTER SHHA" },

  XK_Cyrillic_SCHWA:             { code: 0x10004d8, description: "(\u04D8) CYRILLIC CAPITAL LETTER SCHWA" },
  XK_Cyrillic_schwa:             { code: 0x10004d9, description: "(\u04D9) CYRILLIC SMALL LETTER SCHWA" },
  XK_Cyrillic_I_macron:          { code: 0x10004e2, description: "(\u04E2) CYRILLIC CAPITAL LETTER I WITH MACRON" },
  XK_Cyrillic_i_macron:          { code: 0x10004e3, description: "(\u04E3) CYRILLIC SMALL LETTER I WITH MACRON" },
  XK_Cyrillic_O_bar:             { code: 0x10004e8, description: "(\u04E8) CYRILLIC CAPITAL LETTER BARRED O" },
  XK_Cyrillic_o_bar:             { code: 0x10004e9, description: "(\u04E9) CYRILLIC SMALL LETTER BARRED O" },
  XK_Cyrillic_U_macron:          { code: 0x10004ee, description: "(\u04EE) CYRILLIC CAPITAL LETTER U WITH MACRON" },
  XK_Cyrillic_u_macron:          { code: 0x10004ef, description: "(\u04EF) CYRILLIC SMALL LETTER U WITH MACRON" },

  XK_Serbian_dje:                   { code: 0x06a1, description: "(\u0452) CYRILLIC SMALL LETTER DJE" },
  XK_Macedonia_gje:                 { code: 0x06a2, description: "(\u0453) CYRILLIC SMALL LETTER GJE" },
  XK_Cyrillic_io:                   { code: 0x06a3, description: "(\u0451) CYRILLIC SMALL LETTER IO" },
  XK_Ukrainian_ie:                  { code: 0x06a4, description: "(\u0454) CYRILLIC SMALL LETTER UKRAINIAN IE" },
  XK_Ukranian_je:                   { code: 0x06a4, description: "deprecated" },
  XK_Macedonia_dse:                 { code: 0x06a5, description: "(\u0455) CYRILLIC SMALL LETTER DZE" },
  XK_Ukrainian_i:                   { code: 0x06a6, description: "(\u0456) CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I" },
  XK_Ukranian_i:                    { code: 0x06a6, description: "deprecated" },
  XK_Ukrainian_yi:                  { code: 0x06a7, description: "(\u0457) CYRILLIC SMALL LETTER YI" },
  XK_Ukranian_yi:                   { code: 0x06a7, description: "deprecated" },
  XK_Cyrillic_je:                   { code: 0x06a8, description: "(\u0458) CYRILLIC SMALL LETTER JE" },
  XK_Serbian_je:                    { code: 0x06a8, description: "deprecated" },
  XK_Cyrillic_lje:                  { code: 0x06a9, description: "(\u0459) CYRILLIC SMALL LETTER LJE" },
  XK_Serbian_lje:                   { code: 0x06a9, description: "deprecated" },
  XK_Cyrillic_nje:                  { code: 0x06aa, description: "(\u045A) CYRILLIC SMALL LETTER NJE" },
  XK_Serbian_nje:                   { code: 0x06aa, description: "deprecated" },
  XK_Serbian_tshe:                  { code: 0x06ab, description: "(\u045B) CYRILLIC SMALL LETTER TSHE" },
  XK_Macedonia_kje:                 { code: 0x06ac, description: "(\u045C) CYRILLIC SMALL LETTER KJE" },
  XK_Ukrainian_ghe_with_upturn:     { code: 0x06ad, description: "(\u0491) CYRILLIC SMALL LETTER GHE WITH UPTURN" },
  XK_Byelorussian_shortu:           { code: 0x06ae, description: "(\u045E) CYRILLIC SMALL LETTER SHORT U" },
  XK_Cyrillic_dzhe:                 { code: 0x06af, description: "(\u045F) CYRILLIC SMALL LETTER DZHE" },
  XK_Serbian_dze:                   { code: 0x06af, description: "deprecated" },
  XK_numerosign:                    { code: 0x06b0, description: "(\u2116) NUMERO SIGN" },
  XK_Serbian_DJE:                   { code: 0x06b1, description: "(\u0402) CYRILLIC CAPITAL LETTER DJE" },
  XK_Macedonia_GJE:                 { code: 0x06b2, description: "(\u0403) CYRILLIC CAPITAL LETTER GJE" },
  XK_Cyrillic_IO:                   { code: 0x06b3, description: "(\u0401) CYRILLIC CAPITAL LETTER IO" },
  XK_Ukrainian_IE:                  { code: 0x06b4, description: "(\u0404) CYRILLIC CAPITAL LETTER UKRAINIAN IE" },
  XK_Ukranian_JE:                   { code: 0x06b4, description: "deprecated" },
  XK_Macedonia_DSE:                 { code: 0x06b5, description: "(\u0405) CYRILLIC CAPITAL LETTER DZE" },
  XK_Ukrainian_I:                   { code: 0x06b6, description: "(\u0406) CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I" },
  XK_Ukranian_I:                    { code: 0x06b6, description: "deprecated" },
  XK_Ukrainian_YI:                  { code: 0x06b7, description: "(\u0407) CYRILLIC CAPITAL LETTER YI" },
  XK_Ukranian_YI:                   { code: 0x06b7, description: "deprecated" },
  XK_Cyrillic_JE:                   { code: 0x06b8, description: "(\u0408) CYRILLIC CAPITAL LETTER JE" },
  XK_Serbian_JE:                    { code: 0x06b8, description: "deprecated" },
  XK_Cyrillic_LJE:                  { code: 0x06b9, description: "(\u0409) CYRILLIC CAPITAL LETTER LJE" },
  XK_Serbian_LJE:                   { code: 0x06b9, description: "deprecated" },
  XK_Cyrillic_NJE:                  { code: 0x06ba, description: "(\u040A) CYRILLIC CAPITAL LETTER NJE" },
  XK_Serbian_NJE:                   { code: 0x06ba, description: "deprecated" },
  XK_Serbian_TSHE:                  { code: 0x06bb, description: "(\u040B) CYRILLIC CAPITAL LETTER TSHE" },
  XK_Macedonia_KJE:                 { code: 0x06bc, description: "(\u040C) CYRILLIC CAPITAL LETTER KJE" },
  XK_Ukrainian_GHE_WITH_UPTURN:     { code: 0x06bd, description: "(\u0490) CYRILLIC CAPITAL LETTER GHE WITH UPTURN" },
  XK_Byelorussian_SHORTU:           { code: 0x06be, description: "(\u040E) CYRILLIC CAPITAL LETTER SHORT U" },
  XK_Cyrillic_DZHE:                 { code: 0x06bf, description: "(\u040F) CYRILLIC CAPITAL LETTER DZHE" },
  XK_Serbian_DZE:                   { code: 0x06bf, description: "deprecated" },
  XK_Cyrillic_yu:                   { code: 0x06c0, description: "(\u044E) CYRILLIC SMALL LETTER YU" },
  XK_Cyrillic_a:                    { code: 0x06c1, description: "(\u0430) CYRILLIC SMALL LETTER A" },
  XK_Cyrillic_be:                   { code: 0x06c2, description: "(\u0431) CYRILLIC SMALL LETTER BE" },
  XK_Cyrillic_tse:                  { code: 0x06c3, description: "(\u0446) CYRILLIC SMALL LETTER TSE" },
  XK_Cyrillic_de:                   { code: 0x06c4, description: "(\u0434) CYRILLIC SMALL LETTER DE" },
  XK_Cyrillic_ie:                   { code: 0x06c5, description: "(\u0435) CYRILLIC SMALL LETTER IE" },
  XK_Cyrillic_ef:                   { code: 0x06c6, description: "(\u0444) CYRILLIC SMALL LETTER EF" },
  XK_Cyrillic_ghe:                  { code: 0x06c7, description: "(\u0433) CYRILLIC SMALL LETTER GHE" },
  XK_Cyrillic_ha:                   { code: 0x06c8, description: "(\u0445) CYRILLIC SMALL LETTER HA" },
  XK_Cyrillic_i:                    { code: 0x06c9, description: "(\u0438) CYRILLIC SMALL LETTER I" },
  XK_Cyrillic_shorti:               { code: 0x06ca, description: "(\u0439) CYRILLIC SMALL LETTER SHORT I" },
  XK_Cyrillic_ka:                   { code: 0x06cb, description: "(\u043A) CYRILLIC SMALL LETTER KA" },
  XK_Cyrillic_el:                   { code: 0x06cc, description: "(\u043B) CYRILLIC SMALL LETTER EL" },
  XK_Cyrillic_em:                   { code: 0x06cd, description: "(\u043C) CYRILLIC SMALL LETTER EM" },
  XK_Cyrillic_en:                   { code: 0x06ce, description: "(\u043D) CYRILLIC SMALL LETTER EN" },
  XK_Cyrillic_o:                    { code: 0x06cf, description: "(\u043E) CYRILLIC SMALL LETTER O" },
  XK_Cyrillic_pe:                   { code: 0x06d0, description: "(\u043F) CYRILLIC SMALL LETTER PE" },
  XK_Cyrillic_ya:                   { code: 0x06d1, description: "(\u044F) CYRILLIC SMALL LETTER YA" },
  XK_Cyrillic_er:                   { code: 0x06d2, description: "(\u0440) CYRILLIC SMALL LETTER ER" },
  XK_Cyrillic_es:                   { code: 0x06d3, description: "(\u0441) CYRILLIC SMALL LETTER ES" },
  XK_Cyrillic_te:                   { code: 0x06d4, description: "(\u0442) CYRILLIC SMALL LETTER TE" },
  XK_Cyrillic_u:                    { code: 0x06d5, description: "(\u0443) CYRILLIC SMALL LETTER U" },
  XK_Cyrillic_zhe:                  { code: 0x06d6, description: "(\u0436) CYRILLIC SMALL LETTER ZHE" },
  XK_Cyrillic_ve:                   { code: 0x06d7, description: "(\u0432) CYRILLIC SMALL LETTER VE" },
  XK_Cyrillic_softsign:             { code: 0x06d8, description: "(\u044C) CYRILLIC SMALL LETTER SOFT SIGN" },
  XK_Cyrillic_yeru:                 { code: 0x06d9, description: "(\u044B) CYRILLIC SMALL LETTER YERU" },
  XK_Cyrillic_ze:                   { code: 0x06da, description: "(\u0437) CYRILLIC SMALL LETTER ZE" },
  XK_Cyrillic_sha:                  { code: 0x06db, description: "(\u0448) CYRILLIC SMALL LETTER SHA" },
  XK_Cyrillic_e:                    { code: 0x06dc, description: "(\u044D) CYRILLIC SMALL LETTER E" },
  XK_Cyrillic_shcha:                { code: 0x06dd, description: "(\u0449) CYRILLIC SMALL LETTER SHCHA" },
  XK_Cyrillic_che:                  { code: 0x06de, description: "(\u0447) CYRILLIC SMALL LETTER CHE" },
  XK_Cyrillic_hardsign:             { code: 0x06df, description: "(\u044A) CYRILLIC SMALL LETTER HARD SIGN" },
  XK_Cyrillic_YU:                   { code: 0x06e0, description: "(\u042E) CYRILLIC CAPITAL LETTER YU" },
  XK_Cyrillic_A:                    { code: 0x06e1, description: "(\u0410) CYRILLIC CAPITAL LETTER A" },
  XK_Cyrillic_BE:                   { code: 0x06e2, description: "(\u0411) CYRILLIC CAPITAL LETTER BE" },
  XK_Cyrillic_TSE:                  { code: 0x06e3, description: "(\u0426) CYRILLIC CAPITAL LETTER TSE" },
  XK_Cyrillic_DE:                   { code: 0x06e4, description: "(\u0414) CYRILLIC CAPITAL LETTER DE" },
  XK_Cyrillic_IE:                   { code: 0x06e5, description: "(\u0415) CYRILLIC CAPITAL LETTER IE" },
  XK_Cyrillic_EF:                   { code: 0x06e6, description: "(\u0424) CYRILLIC CAPITAL LETTER EF" },
  XK_Cyrillic_GHE:                  { code: 0x06e7, description: "(\u0413) CYRILLIC CAPITAL LETTER GHE" },
  XK_Cyrillic_HA:                   { code: 0x06e8, description: "(\u0425) CYRILLIC CAPITAL LETTER HA" },
  XK_Cyrillic_I:                    { code: 0x06e9, description: "(\u0418) CYRILLIC CAPITAL LETTER I" },
  XK_Cyrillic_SHORTI:               { code: 0x06ea, description: "(\u0419) CYRILLIC CAPITAL LETTER SHORT I" },
  XK_Cyrillic_KA:                   { code: 0x06eb, description: "(\u041A) CYRILLIC CAPITAL LETTER KA" },
  XK_Cyrillic_EL:                   { code: 0x06ec, description: "(\u041B) CYRILLIC CAPITAL LETTER EL" },
  XK_Cyrillic_EM:                   { code: 0x06ed, description: "(\u041C) CYRILLIC CAPITAL LETTER EM" },
  XK_Cyrillic_EN:                   { code: 0x06ee, description: "(\u041D) CYRILLIC CAPITAL LETTER EN" },
  XK_Cyrillic_O:                    { code: 0x06ef, description: "(\u041E) CYRILLIC CAPITAL LETTER O" },
  XK_Cyrillic_PE:                   { code: 0x06f0, description: "(\u041F) CYRILLIC CAPITAL LETTER PE" },
  XK_Cyrillic_YA:                   { code: 0x06f1, description: "(\u042F) CYRILLIC CAPITAL LETTER YA" },
  XK_Cyrillic_ER:                   { code: 0x06f2, description: "(\u0420) CYRILLIC CAPITAL LETTER ER" },
  XK_Cyrillic_ES:                   { code: 0x06f3, description: "(\u0421) CYRILLIC CAPITAL LETTER ES" },
  XK_Cyrillic_TE:                   { code: 0x06f4, description: "(\u0422) CYRILLIC CAPITAL LETTER TE" },
  XK_Cyrillic_U:                    { code: 0x06f5, description: "(\u0423) CYRILLIC CAPITAL LETTER U" },
  XK_Cyrillic_ZHE:                  { code: 0x06f6, description: "(\u0416) CYRILLIC CAPITAL LETTER ZHE" },
  XK_Cyrillic_VE:                   { code: 0x06f7, description: "(\u0412) CYRILLIC CAPITAL LETTER VE" },
  XK_Cyrillic_SOFTSIGN:             { code: 0x06f8, description: "(\u042C) CYRILLIC CAPITAL LETTER SOFT SIGN" },
  XK_Cyrillic_YERU:                 { code: 0x06f9, description: "(\u042B) CYRILLIC CAPITAL LETTER YERU" },
  XK_Cyrillic_ZE:                   { code: 0x06fa, description: "(\u0417) CYRILLIC CAPITAL LETTER ZE" },
  XK_Cyrillic_SHA:                  { code: 0x06fb, description: "(\u0428) CYRILLIC CAPITAL LETTER SHA" },
  XK_Cyrillic_E:                    { code: 0x06fc, description: "(\u042D) CYRILLIC CAPITAL LETTER E" },
  XK_Cyrillic_SHCHA:                { code: 0x06fd, description: "(\u0429) CYRILLIC CAPITAL LETTER SHCHA" },
  XK_Cyrillic_CHE:                  { code: 0x06fe, description: "(\u0427) CYRILLIC CAPITAL LETTER CHE" },
  XK_Cyrillic_HARDSIGN:             { code: 0x06ff, description: "(\u042A) CYRILLIC CAPITAL LETTER HARD SIGN" },


/*
 * Greek
 * (based on an early draft of, and not quite identical to, ISO/IEC 8859-7)
 * Byte 3 = 7
 */

// Group XK_GREEK
  XK_Greek_ALPHAaccent:             { code: 0x07a1, description: "(\u0386) GREEK CAPITAL LETTER ALPHA WITH TONOS" },
  XK_Greek_EPSILONaccent:           { code: 0x07a2, description: "(\u0388) GREEK CAPITAL LETTER EPSILON WITH TONOS" },
  XK_Greek_ETAaccent:               { code: 0x07a3, description: "(\u0389) GREEK CAPITAL LETTER ETA WITH TONOS" },
  XK_Greek_IOTAaccent:              { code: 0x07a4, description: "(\u038A) GREEK CAPITAL LETTER IOTA WITH TONOS" },
  XK_Greek_IOTAdieresis:            { code: 0x07a5, description: "(\u03AA) GREEK CAPITAL LETTER IOTA WITH DIALYTIKA" },
  XK_Greek_IOTAdiaeresis:           { code: 0x07a5, description: "old typo" },
  XK_Greek_OMICRONaccent:           { code: 0x07a7, description: "(\u038C) GREEK CAPITAL LETTER OMICRON WITH TONOS" },
  XK_Greek_UPSILONaccent:           { code: 0x07a8, description: "(\u038E) GREEK CAPITAL LETTER UPSILON WITH TONOS" },
  XK_Greek_UPSILONdieresis:         { code: 0x07a9, description: "(\u03AB) GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA" },
  XK_Greek_OMEGAaccent:             { code: 0x07ab, description: "(\u038F) GREEK CAPITAL LETTER OMEGA WITH TONOS" },
  XK_Greek_accentdieresis:          { code: 0x07ae, description: "(\u0385) GREEK DIALYTIKA TONOS" },
  XK_Greek_horizbar:                { code: 0x07af, description: "(\u2015) HORIZONTAL BAR" },
  XK_Greek_alphaaccent:             { code: 0x07b1, description: "(\u03AC) GREEK SMALL LETTER ALPHA WITH TONOS" },
  XK_Greek_epsilonaccent:           { code: 0x07b2, description: "(\u03AD) GREEK SMALL LETTER EPSILON WITH TONOS" },
  XK_Greek_etaaccent:               { code: 0x07b3, description: "(\u03AE) GREEK SMALL LETTER ETA WITH TONOS" },
  XK_Greek_iotaaccent:              { code: 0x07b4, description: "(\u03AF) GREEK SMALL LETTER IOTA WITH TONOS" },
  XK_Greek_iotadieresis:            { code: 0x07b5, description: "(\u03CA) GREEK SMALL LETTER IOTA WITH DIALYTIKA" },
  XK_Greek_iotaaccentdieresis:      { code: 0x07b6, description: "(\u0390) GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS" },
  XK_Greek_omicronaccent:           { code: 0x07b7, description: "(\u03CC) GREEK SMALL LETTER OMICRON WITH TONOS" },
  XK_Greek_upsilonaccent:           { code: 0x07b8, description: "(\u03CD) GREEK SMALL LETTER UPSILON WITH TONOS" },
  XK_Greek_upsilondieresis:         { code: 0x07b9, description: "(\u03CB) GREEK SMALL LETTER UPSILON WITH DIALYTIKA" },
  XK_Greek_upsilonaccentdieresis:   { code: 0x07ba, description: "(\u03B0) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS" },
  XK_Greek_omegaaccent:             { code: 0x07bb, description: "(\u03CE) GREEK SMALL LETTER OMEGA WITH TONOS" },
  XK_Greek_ALPHA:                   { code: 0x07c1, description: "(\u0391) GREEK CAPITAL LETTER ALPHA" },
  XK_Greek_BETA:                    { code: 0x07c2, description: "(\u0392) GREEK CAPITAL LETTER BETA" },
  XK_Greek_GAMMA:                   { code: 0x07c3, description: "(\u0393) GREEK CAPITAL LETTER GAMMA" },
  XK_Greek_DELTA:                   { code: 0x07c4, description: "(\u0394) GREEK CAPITAL LETTER DELTA" },
  XK_Greek_EPSILON:                 { code: 0x07c5, description: "(\u0395) GREEK CAPITAL LETTER EPSILON" },
  XK_Greek_ZETA:                    { code: 0x07c6, description: "(\u0396) GREEK CAPITAL LETTER ZETA" },
  XK_Greek_ETA:                     { code: 0x07c7, description: "(\u0397) GREEK CAPITAL LETTER ETA" },
  XK_Greek_THETA:                   { code: 0x07c8, description: "(\u0398) GREEK CAPITAL LETTER THETA" },
  XK_Greek_IOTA:                    { code: 0x07c9, description: "(\u0399) GREEK CAPITAL LETTER IOTA" },
  XK_Greek_KAPPA:                   { code: 0x07ca, description: "(\u039A) GREEK CAPITAL LETTER KAPPA" },
  XK_Greek_LAMDA:                   { code: 0x07cb, description: "(\u039B) GREEK CAPITAL LETTER LAMDA" },
  XK_Greek_LAMBDA:                  { code: 0x07cb, description: "(\u039B) GREEK CAPITAL LETTER LAMDA" },
  XK_Greek_MU:                      { code: 0x07cc, description: "(\u039C) GREEK CAPITAL LETTER MU" },
  XK_Greek_NU:                      { code: 0x07cd, description: "(\u039D) GREEK CAPITAL LETTER NU" },
  XK_Greek_XI:                      { code: 0x07ce, description: "(\u039E) GREEK CAPITAL LETTER XI" },
  XK_Greek_OMICRON:                 { code: 0x07cf, description: "(\u039F) GREEK CAPITAL LETTER OMICRON" },
  XK_Greek_PI:                      { code: 0x07d0, description: "(\u03A0) GREEK CAPITAL LETTER PI" },
  XK_Greek_RHO:                     { code: 0x07d1, description: "(\u03A1) GREEK CAPITAL LETTER RHO" },
  XK_Greek_SIGMA:                   { code: 0x07d2, description: "(\u03A3) GREEK CAPITAL LETTER SIGMA" },
  XK_Greek_TAU:                     { code: 0x07d4, description: "(\u03A4) GREEK CAPITAL LETTER TAU" },
  XK_Greek_UPSILON:                 { code: 0x07d5, description: "(\u03A5) GREEK CAPITAL LETTER UPSILON" },
  XK_Greek_PHI:                     { code: 0x07d6, description: "(\u03A6) GREEK CAPITAL LETTER PHI" },
  XK_Greek_CHI:                     { code: 0x07d7, description: "(\u03A7) GREEK CAPITAL LETTER CHI" },
  XK_Greek_PSI:                     { code: 0x07d8, description: "(\u03A8) GREEK CAPITAL LETTER PSI" },
  XK_Greek_OMEGA:                   { code: 0x07d9, description: "(\u03A9) GREEK CAPITAL LETTER OMEGA" },
  XK_Greek_alpha:                   { code: 0x07e1, description: "(\u03B1) GREEK SMALL LETTER ALPHA" },
  XK_Greek_beta:                    { code: 0x07e2, description: "(\u03B2) GREEK SMALL LETTER BETA" },
  XK_Greek_gamma:                   { code: 0x07e3, description: "(\u03B3) GREEK SMALL LETTER GAMMA" },
  XK_Greek_delta:                   { code: 0x07e4, description: "(\u03B4) GREEK SMALL LETTER DELTA" },
  XK_Greek_epsilon:                 { code: 0x07e5, description: "(\u03B5) GREEK SMALL LETTER EPSILON" },
  XK_Greek_zeta:                    { code: 0x07e6, description: "(\u03B6) GREEK SMALL LETTER ZETA" },
  XK_Greek_eta:                     { code: 0x07e7, description: "(\u03B7) GREEK SMALL LETTER ETA" },
  XK_Greek_theta:                   { code: 0x07e8, description: "(\u03B8) GREEK SMALL LETTER THETA" },
  XK_Greek_iota:                    { code: 0x07e9, description: "(\u03B9) GREEK SMALL LETTER IOTA" },
  XK_Greek_kappa:                   { code: 0x07ea, description: "(\u03BA) GREEK SMALL LETTER KAPPA" },
  XK_Greek_lamda:                   { code: 0x07eb, description: "(\u03BB) GREEK SMALL LETTER LAMDA" },
  XK_Greek_lambda:                  { code: 0x07eb, description: "(\u03BB) GREEK SMALL LETTER LAMDA" },
  XK_Greek_mu:                      { code: 0x07ec, description: "(\u03BC) GREEK SMALL LETTER MU" },
  XK_Greek_nu:                      { code: 0x07ed, description: "(\u03BD) GREEK SMALL LETTER NU" },
  XK_Greek_xi:                      { code: 0x07ee, description: "(\u03BE) GREEK SMALL LETTER XI" },
  XK_Greek_omicron:                 { code: 0x07ef, description: "(\u03BF) GREEK SMALL LETTER OMICRON" },
  XK_Greek_pi:                      { code: 0x07f0, description: "(\u03C0) GREEK SMALL LETTER PI" },
  XK_Greek_rho:                     { code: 0x07f1, description: "(\u03C1) GREEK SMALL LETTER RHO" },
  XK_Greek_sigma:                   { code: 0x07f2, description: "(\u03C3) GREEK SMALL LETTER SIGMA" },
  XK_Greek_finalsmallsigma:         { code: 0x07f3, description: "(\u03C2) GREEK SMALL LETTER FINAL SIGMA" },
  XK_Greek_tau:                     { code: 0x07f4, description: "(\u03C4) GREEK SMALL LETTER TAU" },
  XK_Greek_upsilon:                 { code: 0x07f5, description: "(\u03C5) GREEK SMALL LETTER UPSILON" },
  XK_Greek_phi:                     { code: 0x07f6, description: "(\u03C6) GREEK SMALL LETTER PHI" },
  XK_Greek_chi:                     { code: 0x07f7, description: "(\u03C7) GREEK SMALL LETTER CHI" },
  XK_Greek_psi:                     { code: 0x07f8, description: "(\u03C8) GREEK SMALL LETTER PSI" },
  XK_Greek_omega:                   { code: 0x07f9, description: "(\u03C9) GREEK SMALL LETTER OMEGA" },
  XK_Greek_switch:                  { code: 0xff7e, description: "Alias for mode_switch" },


/*
 * Technical
 * (from the DEC VT330/VT420 Technical Character Set, http://vt100.net/charsets/technical.html)
 * Byte 3 = 8
 */

// Group XK_TECHNICAL
  XK_leftradical:                   { code: 0x08a1, description: "(\u23B7) RADICAL SYMBOL BOTTOM" },
  XK_topleftradical:                { code: 0x08a2, description: "((\u250C) BOX DRAWINGS LIGHT DOWN AND RIGHT)" },
  XK_horizconnector:                { code: 0x08a3, description: "((\u2500) BOX DRAWINGS LIGHT HORIZONTAL)" },
  XK_topintegral:                   { code: 0x08a4, description: "(\u2320) TOP HALF INTEGRAL" },
  XK_botintegral:                   { code: 0x08a5, description: "(\u2321) BOTTOM HALF INTEGRAL" },
  XK_vertconnector:                 { code: 0x08a6, description: "((\u2502) BOX DRAWINGS LIGHT VERTICAL)" },
  XK_topleftsqbracket:              { code: 0x08a7, description: "(\u23A1) LEFT SQUARE BRACKET UPPER CORNER" },
  XK_botleftsqbracket:              { code: 0x08a8, description: "(\u23A3) LEFT SQUARE BRACKET LOWER CORNER" },
  XK_toprightsqbracket:             { code: 0x08a9, description: "(\u23A4) RIGHT SQUARE BRACKET UPPER CORNER" },
  XK_botrightsqbracket:             { code: 0x08aa, description: "(\u23A6) RIGHT SQUARE BRACKET LOWER CORNER" },
  XK_topleftparens:                 { code: 0x08ab, description: "(\u239B) LEFT PARENTHESIS UPPER HOOK" },
  XK_botleftparens:                 { code: 0x08ac, description: "(\u239D) LEFT PARENTHESIS LOWER HOOK" },
  XK_toprightparens:                { code: 0x08ad, description: "(\u239E) RIGHT PARENTHESIS UPPER HOOK" },
  XK_botrightparens:                { code: 0x08ae, description: "(\u23A0) RIGHT PARENTHESIS LOWER HOOK" },
  XK_leftmiddlecurlybrace:          { code: 0x08af, description: "(\u23A8) LEFT CURLY BRACKET MIDDLE PIECE" },
  XK_rightmiddlecurlybrace:         { code: 0x08b0, description: "(\u23AC) RIGHT CURLY BRACKET MIDDLE PIECE" },
  XK_topleftsummation:              { code: 0x08b1, description: null },
  XK_botleftsummation:              { code: 0x08b2, description: null },
  XK_topvertsummationconnector:     { code: 0x08b3, description: null },
  XK_botvertsummationconnector:     { code: 0x08b4, description: null },
  XK_toprightsummation:             { code: 0x08b5, description: null },
  XK_botrightsummation:             { code: 0x08b6, description: null },
  XK_rightmiddlesummation:          { code: 0x08b7, description: null },
  XK_lessthanequal:                 { code: 0x08bc, description: "(\u2264) LESS-THAN OR EQUAL TO" },
  XK_notequal:                      { code: 0x08bd, description: "(\u2260) NOT EQUAL TO" },
  XK_greaterthanequal:              { code: 0x08be, description: "(\u2265) GREATER-THAN OR EQUAL TO" },
  XK_integral:                      { code: 0x08bf, description: "(\u222B) INTEGRAL" },
  XK_therefore:                     { code: 0x08c0, description: "(\u2234) THEREFORE" },
  XK_variation:                     { code: 0x08c1, description: "(\u221D) PROPORTIONAL TO" },
  XK_infinity:                      { code: 0x08c2, description: "(\u221E) INFINITY" },
  XK_nabla:                         { code: 0x08c5, description: "(\u2207) NABLA" },
  XK_approximate:                   { code: 0x08c8, description: "(\u223C) TILDE OPERATOR" },
  XK_similarequal:                  { code: 0x08c9, description: "(\u2243) ASYMPTOTICALLY EQUAL TO" },
  XK_ifonlyif:                      { code: 0x08cd, description: "(\u21D4) LEFT RIGHT DOUBLE ARROW" },
  XK_implies:                       { code: 0x08ce, description: "(\u21D2) RIGHTWARDS DOUBLE ARROW" },
  XK_identical:                     { code: 0x08cf, description: "(\u2261) IDENTICAL TO" },
  XK_radical:                       { code: 0x08d6, description: "(\u221A) SQUARE ROOT" },
  XK_includedin:                    { code: 0x08da, description: "(\u2282) SUBSET OF" },
  XK_includes:                      { code: 0x08db, description: "(\u2283) SUPERSET OF" },
  XK_intersection:                  { code: 0x08dc, description: "(\u2229) INTERSECTION" },
  XK_union:                         { code: 0x08dd, description: "(\u222A) UNION" },
  XK_logicaland:                    { code: 0x08de, description: "(\u2227) LOGICAL AND" },
  XK_logicalor:                     { code: 0x08df, description: "(\u2228) LOGICAL OR" },
  XK_partialderivative:             { code: 0x08ef, description: "(\u2202) PARTIAL DIFFERENTIAL" },
  XK_function:                      { code: 0x08f6, description: "(\u0192) LATIN SMALL LETTER F WITH HOOK" },
  XK_leftarrow:                     { code: 0x08fb, description: "(\u2190) LEFTWARDS ARROW" },
  XK_uparrow:                       { code: 0x08fc, description: "(\u2191) UPWARDS ARROW" },
  XK_rightarrow:                    { code: 0x08fd, description: "(\u2192) RIGHTWARDS ARROW" },
  XK_downarrow:                     { code: 0x08fe, description: "(\u2193) DOWNWARDS ARROW" },


/*
 * Special
 * (from the DEC VT100 Special Graphics Character Set)
 * Byte 3 = 9
 */

// Group XK_SPECIAL
  XK_blank:                         { code: 0x09df, description: null },
  XK_soliddiamond:                  { code: 0x09e0, description: "(\u25C6) BLACK DIAMOND" },
  XK_checkerboard:                  { code: 0x09e1, description: "(\u2592) MEDIUM SHADE" },
  XK_ht:                            { code: 0x09e2, description: "(\u2409) SYMBOL FOR HORIZONTAL TABULATION" },
  XK_ff:                            { code: 0x09e3, description: "(\u240C) SYMBOL FOR FORM FEED" },
  XK_cr:                            { code: 0x09e4, description: "(\u240D) SYMBOL FOR CARRIAGE RETURN" },
  XK_lf:                            { code: 0x09e5, description: "(\u240A) SYMBOL FOR LINE FEED" },
  XK_nl:                            { code: 0x09e8, description: "(\u2424) SYMBOL FOR NEWLINE" },
  XK_vt:                            { code: 0x09e9, description: "(\u240B) SYMBOL FOR VERTICAL TABULATION" },
  XK_lowrightcorner:                { code: 0x09ea, description: "(\u2518) BOX DRAWINGS LIGHT UP AND LEFT" },
  XK_uprightcorner:                 { code: 0x09eb, description: "(\u2510) BOX DRAWINGS LIGHT DOWN AND LEFT" },
  XK_upleftcorner:                  { code: 0x09ec, description: "(\u250C) BOX DRAWINGS LIGHT DOWN AND RIGHT" },
  XK_lowleftcorner:                 { code: 0x09ed, description: "(\u2514) BOX DRAWINGS LIGHT UP AND RIGHT" },
  XK_crossinglines:                 { code: 0x09ee, description: "(\u253C) BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL" },
  XK_horizlinescan1:                { code: 0x09ef, description: "(\u23BA) HORIZONTAL SCAN LINE-1" },
  XK_horizlinescan3:                { code: 0x09f0, description: "(\u23BB) HORIZONTAL SCAN LINE-3" },
  XK_horizlinescan5:                { code: 0x09f1, description: "(\u2500) BOX DRAWINGS LIGHT HORIZONTAL" },
  XK_horizlinescan7:                { code: 0x09f2, description: "(\u23BC) HORIZONTAL SCAN LINE-7" },
  XK_horizlinescan9:                { code: 0x09f3, description: "(\u23BD) HORIZONTAL SCAN LINE-9" },
  XK_leftt:                         { code: 0x09f4, description: "(\u251C) BOX DRAWINGS LIGHT VERTICAL AND RIGHT" },
  XK_rightt:                        { code: 0x09f5, description: "(\u2524) BOX DRAWINGS LIGHT VERTICAL AND LEFT" },
  XK_bott:                          { code: 0x09f6, description: "(\u2534) BOX DRAWINGS LIGHT UP AND HORIZONTAL" },
  XK_topt:                          { code: 0x09f7, description: "(\u252C) BOX DRAWINGS LIGHT DOWN AND HORIZONTAL" },
  XK_vertbar:                       { code: 0x09f8, description: "(\u2502) BOX DRAWINGS LIGHT VERTICAL" },


/*
 * Publishing
 * (these are probably from a long forgotten DEC Publishing
 * font that once shipped with DECwrite)
 * Byte 3 = 0x0a
 */

// Group XK_PUBLISHING
  XK_emspace:                       { code: 0x0aa1, description: "(\u2003) EM SPACE" },
  XK_enspace:                       { code: 0x0aa2, description: "(\u2002) EN SPACE" },
  XK_em3space:                      { code: 0x0aa3, description: "(\u2004) THREE-PER-EM SPACE" },
  XK_em4space:                      { code: 0x0aa4, description: "(\u2005) FOUR-PER-EM SPACE" },
  XK_digitspace:                    { code: 0x0aa5, description: "(\u2007) FIGURE SPACE" },
  XK_punctspace:                    { code: 0x0aa6, description: "(\u2008) PUNCTUATION SPACE" },
  XK_thinspace:                     { code: 0x0aa7, description: "(\u2009) THIN SPACE" },
  XK_hairspace:                     { code: 0x0aa8, description: "(\u200A) HAIR SPACE" },
  XK_emdash:                        { code: 0x0aa9, description: "(\u2014) EM DASH" },
  XK_endash:                        { code: 0x0aaa, description: "(\u2013) EN DASH" },
  XK_signifblank:                   { code: 0x0aac, description: "((\u2423) OPEN BOX)" },
  XK_ellipsis:                      { code: 0x0aae, description: "(\u2026) HORIZONTAL ELLIPSIS" },
  XK_doubbaselinedot:               { code: 0x0aaf, description: "(\u2025) TWO DOT LEADER" },
  XK_onethird:                      { code: 0x0ab0, description: "(\u2153) VULGAR FRACTION ONE THIRD" },
  XK_twothirds:                     { code: 0x0ab1, description: "(\u2154) VULGAR FRACTION TWO THIRDS" },
  XK_onefifth:                      { code: 0x0ab2, description: "(\u2155) VULGAR FRACTION ONE FIFTH" },
  XK_twofifths:                     { code: 0x0ab3, description: "(\u2156) VULGAR FRACTION TWO FIFTHS" },
  XK_threefifths:                   { code: 0x0ab4, description: "(\u2157) VULGAR FRACTION THREE FIFTHS" },
  XK_fourfifths:                    { code: 0x0ab5, description: "(\u2158) VULGAR FRACTION FOUR FIFTHS" },
  XK_onesixth:                      { code: 0x0ab6, description: "(\u2159) VULGAR FRACTION ONE SIXTH" },
  XK_fivesixths:                    { code: 0x0ab7, description: "(\u215A) VULGAR FRACTION FIVE SIXTHS" },
  XK_careof:                        { code: 0x0ab8, description: "(\u2105) CARE OF" },
  XK_figdash:                       { code: 0x0abb, description: "(\u2012) FIGURE DASH" },
  XK_leftanglebracket:              { code: 0x0abc, description: "((\u27E8) MATHEMATICAL LEFT ANGLE BRACKET)" },
  XK_decimalpoint:                  { code: 0x0abd, description: "((\u002E) FULL STOP)" },
  XK_rightanglebracket:             { code: 0x0abe, description: "((\u27E9) MATHEMATICAL RIGHT ANGLE BRACKET)" },
  XK_marker:                        { code: 0x0abf, description: null },
  XK_oneeighth:                     { code: 0x0ac3, description: "(\u215B) VULGAR FRACTION ONE EIGHTH" },
  XK_threeeighths:                  { code: 0x0ac4, description: "(\u215C) VULGAR FRACTION THREE EIGHTHS" },
  XK_fiveeighths:                   { code: 0x0ac5, description: "(\u215D) VULGAR FRACTION FIVE EIGHTHS" },
  XK_seveneighths:                  { code: 0x0ac6, description: "(\u215E) VULGAR FRACTION SEVEN EIGHTHS" },
  XK_trademark:                     { code: 0x0ac9, description: "(\u2122) TRADE MARK SIGN" },
  XK_signaturemark:                 { code: 0x0aca, description: "((\u2613) SALTIRE)" },
  XK_trademarkincircle:             { code: 0x0acb, description: null },
  XK_leftopentriangle:              { code: 0x0acc, description: "((\u25C1) WHITE LEFT-POINTING TRIANGLE)" },
  XK_rightopentriangle:             { code: 0x0acd, description: "((\u25B7) WHITE RIGHT-POINTING TRIANGLE)" },
  XK_emopencircle:                  { code: 0x0ace, description: "((\u25CB) WHITE CIRCLE)" },
  XK_emopenrectangle:               { code: 0x0acf, description: "((\u25AF) WHITE VERTICAL RECTANGLE)" },
  XK_leftsinglequotemark:           { code: 0x0ad0, description: "(\u2018) LEFT SINGLE QUOTATION MARK" },
  XK_rightsinglequotemark:          { code: 0x0ad1, description: "(\u2019) RIGHT SINGLE QUOTATION MARK" },
  XK_leftdoublequotemark:           { code: 0x0ad2, description: "(\u201C) LEFT DOUBLE QUOTATION MARK" },
  XK_rightdoublequotemark:          { code: 0x0ad3, description: "(\u201D) RIGHT DOUBLE QUOTATION MARK" },
  XK_prescription:                  { code: 0x0ad4, description: "(\u211E) PRESCRIPTION TAKE" },
  XK_permille:                      { code: 0x0ad5, description: "(\u2030) PER MILLE SIGN" },
  XK_minutes:                       { code: 0x0ad6, description: "(\u2032) PRIME" },
  XK_seconds:                       { code: 0x0ad7, description: "(\u2033) DOUBLE PRIME" },
  XK_latincross:                    { code: 0x0ad9, description: "(\u271D) LATIN CROSS" },
  XK_hexagram:                      { code: 0x0ada, description: null },
  XK_filledrectbullet:              { code: 0x0adb, description: "((\u25AC) BLACK RECTANGLE)" },
  XK_filledlefttribullet:           { code: 0x0adc, description: "((\u25C0) BLACK LEFT-POINTING TRIANGLE)" },
  XK_filledrighttribullet:          { code: 0x0add, description: "((\u25B6) BLACK RIGHT-POINTING TRIANGLE)" },
  XK_emfilledcircle:                { code: 0x0ade, description: "((\u25CF) BLACK CIRCLE)" },
  XK_emfilledrect:                  { code: 0x0adf, description: "((\u25AE) BLACK VERTICAL RECTANGLE)" },
  XK_enopencircbullet:              { code: 0x0ae0, description: "((\u25E6) WHITE BULLET)" },
  XK_enopensquarebullet:            { code: 0x0ae1, description: "((\u25AB) WHITE SMALL SQUARE)" },
  XK_openrectbullet:                { code: 0x0ae2, description: "((\u25AD) WHITE RECTANGLE)" },
  XK_opentribulletup:               { code: 0x0ae3, description: "((\u25B3) WHITE UP-POINTING TRIANGLE)" },
  XK_opentribulletdown:             { code: 0x0ae4, description: "((\u25BD) WHITE DOWN-POINTING TRIANGLE)" },
  XK_openstar:                      { code: 0x0ae5, description: "((\u2606) WHITE STAR)" },
  XK_enfilledcircbullet:            { code: 0x0ae6, description: "((\u2022) BULLET)" },
  XK_enfilledsqbullet:              { code: 0x0ae7, description: "((\u25AA) BLACK SMALL SQUARE)" },
  XK_filledtribulletup:             { code: 0x0ae8, description: "((\u25B2) BLACK UP-POINTING TRIANGLE)" },
  XK_filledtribulletdown:           { code: 0x0ae9, description: "((\u25BC) BLACK DOWN-POINTING TRIANGLE)" },
  XK_leftpointer:                   { code: 0x0aea, description: "((\u261C) WHITE LEFT POINTING INDEX)" },
  XK_rightpointer:                  { code: 0x0aeb, description: "((\u261E) WHITE RIGHT POINTING INDEX)" },
  XK_club:                          { code: 0x0aec, description: "(\u2663) BLACK CLUB SUIT" },
  XK_diamond:                       { code: 0x0aed, description: "(\u2666) BLACK DIAMOND SUIT" },
  XK_heart:                         { code: 0x0aee, description: "(\u2665) BLACK HEART SUIT" },
  XK_maltesecross:                  { code: 0x0af0, description: "(\u2720) MALTESE CROSS" },
  XK_dagger:                        { code: 0x0af1, description: "(\u2020) DAGGER" },
  XK_doubledagger:                  { code: 0x0af2, description: "(\u2021) DOUBLE DAGGER" },
  XK_checkmark:                     { code: 0x0af3, description: "(\u2713) CHECK MARK" },
  XK_ballotcross:                   { code: 0x0af4, description: "(\u2717) BALLOT X" },
  XK_musicalsharp:                  { code: 0x0af5, description: "(\u266F) MUSIC SHARP SIGN" },
  XK_musicalflat:                   { code: 0x0af6, description: "(\u266D) MUSIC FLAT SIGN" },
  XK_malesymbol:                    { code: 0x0af7, description: "(\u2642) MALE SIGN" },
  XK_femalesymbol:                  { code: 0x0af8, description: "(\u2640) FEMALE SIGN" },
  XK_telephone:                     { code: 0x0af9, description: "(\u260E) BLACK TELEPHONE" },
  XK_telephonerecorder:             { code: 0x0afa, description: "(\u2315) TELEPHONE RECORDER" },
  XK_phonographcopyright:           { code: 0x0afb, description: "(\u2117) SOUND RECORDING COPYRIGHT" },
  XK_caret:                         { code: 0x0afc, description: "(\u2038) CARET" },
  XK_singlelowquotemark:            { code: 0x0afd, description: "(\u201A) SINGLE LOW-9 QUOTATION MARK" },
  XK_doublelowquotemark:            { code: 0x0afe, description: "(\u201E) DOUBLE LOW-9 QUOTATION MARK" },
  XK_cursor:                        { code: 0x0aff, description: null },


/*
 * APL
 * Byte 3 = 0x0b
 */

// Group XK_APL
  XK_leftcaret:                     { code: 0x0ba3, description: "((\u003C) LESS-THAN SIGN)" },
  XK_rightcaret:                    { code: 0x0ba6, description: "((\u003E) GREATER-THAN SIGN)" },
  XK_downcaret:                     { code: 0x0ba8, description: "((\u2228) LOGICAL OR)" },
  XK_upcaret:                       { code: 0x0ba9, description: "((\u2227) LOGICAL AND)" },
  XK_overbar:                       { code: 0x0bc0, description: "((\u00AF) MACRON)" },
  XK_downtack:                      { code: 0x0bc2, description: "(\u22A4) DOWN TACK" },
  XK_upshoe:                        { code: 0x0bc3, description: "((\u2229) INTERSECTION)" },
  XK_downstile:                     { code: 0x0bc4, description: "(\u230A) LEFT FLOOR" },
  XK_underbar:                      { code: 0x0bc6, description: "((\u005F) LOW LINE)" },
  XK_jot:                           { code: 0x0bca, description: "(\u2218) RING OPERATOR" },
  XK_quad:                          { code: 0x0bcc, description: "(\u2395) APL FUNCTIONAL SYMBOL QUAD" },
  XK_uptack:                        { code: 0x0bce, description: "(\u22A5) UP TACK" },
  XK_circle:                        { code: 0x0bcf, description: "(\u25CB) WHITE CIRCLE" },
  XK_upstile:                       { code: 0x0bd3, description: "(\u2308) LEFT CEILING" },
  XK_downshoe:                      { code: 0x0bd6, description: "((\u222A) UNION)" },
  XK_rightshoe:                     { code: 0x0bd8, description: "((\u2283) SUPERSET OF)" },
  XK_leftshoe:                      { code: 0x0bda, description: "((\u2282) SUBSET OF)" },
  XK_lefttack:                      { code: 0x0bdc, description: "(\u22A3) LEFT TACK" },
  XK_righttack:                     { code: 0x0bfc, description: "(\u22A2) RIGHT TACK" },


/*
 * Hebrew
 * Byte 3 = 0x0c
 */

// Group XK_HEBREW
  XK_hebrew_doublelowline:          { code: 0x0cdf, description: "(\u2017) DOUBLE LOW LINE" },
  XK_hebrew_aleph:                  { code: 0x0ce0, description: "(\u05D0) HEBREW LETTER ALEF" },
  XK_hebrew_bet:                    { code: 0x0ce1, description: "(\u05D1) HEBREW LETTER BET" },
  XK_hebrew_beth:                   { code: 0x0ce1, description: "deprecated" },
  XK_hebrew_gimel:                  { code: 0x0ce2, description: "(\u05D2) HEBREW LETTER GIMEL" },
  XK_hebrew_gimmel:                 { code: 0x0ce2, description: "deprecated" },
  XK_hebrew_dalet:                  { code: 0x0ce3, description: "(\u05D3) HEBREW LETTER DALET" },
  XK_hebrew_daleth:                 { code: 0x0ce3, description: "deprecated" },
  XK_hebrew_he:                     { code: 0x0ce4, description: "(\u05D4) HEBREW LETTER HE" },
  XK_hebrew_waw:                    { code: 0x0ce5, description: "(\u05D5) HEBREW LETTER VAV" },
  XK_hebrew_zain:                   { code: 0x0ce6, description: "(\u05D6) HEBREW LETTER ZAYIN" },
  XK_hebrew_zayin:                  { code: 0x0ce6, description: "deprecated" },
  XK_hebrew_chet:                   { code: 0x0ce7, description: "(\u05D7) HEBREW LETTER HET" },
  XK_hebrew_het:                    { code: 0x0ce7, description: "deprecated" },
  XK_hebrew_tet:                    { code: 0x0ce8, description: "(\u05D8) HEBREW LETTER TET" },
  XK_hebrew_teth:                   { code: 0x0ce8, description: "deprecated" },
  XK_hebrew_yod:                    { code: 0x0ce9, description: "(\u05D9) HEBREW LETTER YOD" },
  XK_hebrew_finalkaph:              { code: 0x0cea, description: "(\u05DA) HEBREW LETTER FINAL KAF" },
  XK_hebrew_kaph:                   { code: 0x0ceb, description: "(\u05DB) HEBREW LETTER KAF" },
  XK_hebrew_lamed:                  { code: 0x0cec, description: "(\u05DC) HEBREW LETTER LAMED" },
  XK_hebrew_finalmem:               { code: 0x0ced, description: "(\u05DD) HEBREW LETTER FINAL MEM" },
  XK_hebrew_mem:                    { code: 0x0cee, description: "(\u05DE) HEBREW LETTER MEM" },
  XK_hebrew_finalnun:               { code: 0x0cef, description: "(\u05DF) HEBREW LETTER FINAL NUN" },
  XK_hebrew_nun:                    { code: 0x0cf0, description: "(\u05E0) HEBREW LETTER NUN" },
  XK_hebrew_samech:                 { code: 0x0cf1, description: "(\u05E1) HEBREW LETTER SAMEKH" },
  XK_hebrew_samekh:                 { code: 0x0cf1, description: "deprecated" },
  XK_hebrew_ayin:                   { code: 0x0cf2, description: "(\u05E2) HEBREW LETTER AYIN" },
  XK_hebrew_finalpe:                { code: 0x0cf3, description: "(\u05E3) HEBREW LETTER FINAL PE" },
  XK_hebrew_pe:                     { code: 0x0cf4, description: "(\u05E4) HEBREW LETTER PE" },
  XK_hebrew_finalzade:              { code: 0x0cf5, description: "(\u05E5) HEBREW LETTER FINAL TSADI" },
  XK_hebrew_finalzadi:              { code: 0x0cf5, description: "deprecated" },
  XK_hebrew_zade:                   { code: 0x0cf6, description: "(\u05E6) HEBREW LETTER TSADI" },
  XK_hebrew_zadi:                   { code: 0x0cf6, description: "deprecated" },
  XK_hebrew_qoph:                   { code: 0x0cf7, description: "(\u05E7) HEBREW LETTER QOF" },
  XK_hebrew_kuf:                    { code: 0x0cf7, description: "deprecated" },
  XK_hebrew_resh:                   { code: 0x0cf8, description: "(\u05E8) HEBREW LETTER RESH" },
  XK_hebrew_shin:                   { code: 0x0cf9, description: "(\u05E9) HEBREW LETTER SHIN" },
  XK_hebrew_taw:                    { code: 0x0cfa, description: "(\u05EA) HEBREW LETTER TAV" },
  XK_hebrew_taf:                    { code: 0x0cfa, description: "deprecated" },
  XK_Hebrew_switch:                 { code: 0xff7e, description: "Alias for mode_switch" },


/*
 * Thai
 * Byte 3 = 0x0d
 */

// Group XK_THAI
  XK_Thai_kokai:                    { code: 0x0da1, description: "(\u0E01) THAI CHARACTER KO KAI" },
  XK_Thai_khokhai:                  { code: 0x0da2, description: "(\u0E02) THAI CHARACTER KHO KHAI" },
  XK_Thai_khokhuat:                 { code: 0x0da3, description: "(\u0E03) THAI CHARACTER KHO KHUAT" },
  XK_Thai_khokhwai:                 { code: 0x0da4, description: "(\u0E04) THAI CHARACTER KHO KHWAI" },
  XK_Thai_khokhon:                  { code: 0x0da5, description: "(\u0E05) THAI CHARACTER KHO KHON" },
  XK_Thai_khorakhang:               { code: 0x0da6, description: "(\u0E06) THAI CHARACTER KHO RAKHANG" },
  XK_Thai_ngongu:                   { code: 0x0da7, description: "(\u0E07) THAI CHARACTER NGO NGU" },
  XK_Thai_chochan:                  { code: 0x0da8, description: "(\u0E08) THAI CHARACTER CHO CHAN" },
  XK_Thai_choching:                 { code: 0x0da9, description: "(\u0E09) THAI CHARACTER CHO CHING" },
  XK_Thai_chochang:                 { code: 0x0daa, description: "(\u0E0A) THAI CHARACTER CHO CHANG" },
  XK_Thai_soso:                     { code: 0x0dab, description: "(\u0E0B) THAI CHARACTER SO SO" },
  XK_Thai_chochoe:                  { code: 0x0dac, description: "(\u0E0C) THAI CHARACTER CHO CHOE" },
  XK_Thai_yoying:                   { code: 0x0dad, description: "(\u0E0D) THAI CHARACTER YO YING" },
  XK_Thai_dochada:                  { code: 0x0dae, description: "(\u0E0E) THAI CHARACTER DO CHADA" },
  XK_Thai_topatak:                  { code: 0x0daf, description: "(\u0E0F) THAI CHARACTER TO PATAK" },
  XK_Thai_thothan:                  { code: 0x0db0, description: "(\u0E10) THAI CHARACTER THO THAN" },
  XK_Thai_thonangmontho:            { code: 0x0db1, description: "(\u0E11) THAI CHARACTER THO NANGMONTHO" },
  XK_Thai_thophuthao:               { code: 0x0db2, description: "(\u0E12) THAI CHARACTER THO PHUTHAO" },
  XK_Thai_nonen:                    { code: 0x0db3, description: "(\u0E13) THAI CHARACTER NO NEN" },
  XK_Thai_dodek:                    { code: 0x0db4, description: "(\u0E14) THAI CHARACTER DO DEK" },
  XK_Thai_totao:                    { code: 0x0db5, description: "(\u0E15) THAI CHARACTER TO TAO" },
  XK_Thai_thothung:                 { code: 0x0db6, description: "(\u0E16) THAI CHARACTER THO THUNG" },
  XK_Thai_thothahan:                { code: 0x0db7, description: "(\u0E17) THAI CHARACTER THO THAHAN" },
  XK_Thai_thothong:                 { code: 0x0db8, description: "(\u0E18) THAI CHARACTER THO THONG" },
  XK_Thai_nonu:                     { code: 0x0db9, description: "(\u0E19) THAI CHARACTER NO NU" },
  XK_Thai_bobaimai:                 { code: 0x0dba, description: "(\u0E1A) THAI CHARACTER BO BAIMAI" },
  XK_Thai_popla:                    { code: 0x0dbb, description: "(\u0E1B) THAI CHARACTER PO PLA" },
  XK_Thai_phophung:                 { code: 0x0dbc, description: "(\u0E1C) THAI CHARACTER PHO PHUNG" },
  XK_Thai_fofa:                     { code: 0x0dbd, description: "(\u0E1D) THAI CHARACTER FO FA" },
  XK_Thai_phophan:                  { code: 0x0dbe, description: "(\u0E1E) THAI CHARACTER PHO PHAN" },
  XK_Thai_fofan:                    { code: 0x0dbf, description: "(\u0E1F) THAI CHARACTER FO FAN" },
  XK_Thai_phosamphao:               { code: 0x0dc0, description: "(\u0E20) THAI CHARACTER PHO SAMPHAO" },
  XK_Thai_moma:                     { code: 0x0dc1, description: "(\u0E21) THAI CHARACTER MO MA" },
  XK_Thai_yoyak:                    { code: 0x0dc2, description: "(\u0E22) THAI CHARACTER YO YAK" },
  XK_Thai_rorua:                    { code: 0x0dc3, description: "(\u0E23) THAI CHARACTER RO RUA" },
  XK_Thai_ru:                       { code: 0x0dc4, description: "(\u0E24) THAI CHARACTER RU" },
  XK_Thai_loling:                   { code: 0x0dc5, description: "(\u0E25) THAI CHARACTER LO LING" },
  XK_Thai_lu:                       { code: 0x0dc6, description: "(\u0E26) THAI CHARACTER LU" },
  XK_Thai_wowaen:                   { code: 0x0dc7, description: "(\u0E27) THAI CHARACTER WO WAEN" },
  XK_Thai_sosala:                   { code: 0x0dc8, description: "(\u0E28) THAI CHARACTER SO SALA" },
  XK_Thai_sorusi:                   { code: 0x0dc9, description: "(\u0E29) THAI CHARACTER SO RUSI" },
  XK_Thai_sosua:                    { code: 0x0dca, description: "(\u0E2A) THAI CHARACTER SO SUA" },
  XK_Thai_hohip:                    { code: 0x0dcb, description: "(\u0E2B) THAI CHARACTER HO HIP" },
  XK_Thai_lochula:                  { code: 0x0dcc, description: "(\u0E2C) THAI CHARACTER LO CHULA" },
  XK_Thai_oang:                     { code: 0x0dcd, description: "(\u0E2D) THAI CHARACTER O ANG" },
  XK_Thai_honokhuk:                 { code: 0x0dce, description: "(\u0E2E) THAI CHARACTER HO NOKHUK" },
  XK_Thai_paiyannoi:                { code: 0x0dcf, description: "(\u0E2F) THAI CHARACTER PAIYANNOI" },
  XK_Thai_saraa:                    { code: 0x0dd0, description: "(\u0E30) THAI CHARACTER SARA A" },
  XK_Thai_maihanakat:               { code: 0x0dd1, description: "(\u0E31) THAI CHARACTER MAI HAN-AKAT" },
  XK_Thai_saraaa:                   { code: 0x0dd2, description: "(\u0E32) THAI CHARACTER SARA AA" },
  XK_Thai_saraam:                   { code: 0x0dd3, description: "(\u0E33) THAI CHARACTER SARA AM" },
  XK_Thai_sarai:                    { code: 0x0dd4, description: "(\u0E34) THAI CHARACTER SARA I" },
  XK_Thai_saraii:                   { code: 0x0dd5, description: "(\u0E35) THAI CHARACTER SARA II" },
  XK_Thai_saraue:                   { code: 0x0dd6, description: "(\u0E36) THAI CHARACTER SARA UE" },
  XK_Thai_sarauee:                  { code: 0x0dd7, description: "(\u0E37) THAI CHARACTER SARA UEE" },
  XK_Thai_sarau:                    { code: 0x0dd8, description: "(\u0E38) THAI CHARACTER SARA U" },
  XK_Thai_sarauu:                   { code: 0x0dd9, description: "(\u0E39) THAI CHARACTER SARA UU" },
  XK_Thai_phinthu:                  { code: 0x0dda, description: "(\u0E3A) THAI CHARACTER PHINTHU" },
  XK_Thai_maihanakat_maitho:        { code: 0x0dde, description: null },
  XK_Thai_baht:                     { code: 0x0ddf, description: "(\u0E3F) THAI CURRENCY SYMBOL BAHT" },
  XK_Thai_sarae:                    { code: 0x0de0, description: "(\u0E40) THAI CHARACTER SARA E" },
  XK_Thai_saraae:                   { code: 0x0de1, description: "(\u0E41) THAI CHARACTER SARA AE" },
  XK_Thai_sarao:                    { code: 0x0de2, description: "(\u0E42) THAI CHARACTER SARA O" },
  XK_Thai_saraaimaimuan:            { code: 0x0de3, description: "(\u0E43) THAI CHARACTER SARA AI MAIMUAN" },
  XK_Thai_saraaimaimalai:           { code: 0x0de4, description: "(\u0E44) THAI CHARACTER SARA AI MAIMALAI" },
  XK_Thai_lakkhangyao:              { code: 0x0de5, description: "(\u0E45) THAI CHARACTER LAKKHANGYAO" },
  XK_Thai_maiyamok:                 { code: 0x0de6, description: "(\u0E46) THAI CHARACTER MAIYAMOK" },
  XK_Thai_maitaikhu:                { code: 0x0de7, description: "(\u0E47) THAI CHARACTER MAITAIKHU" },
  XK_Thai_maiek:                    { code: 0x0de8, description: "(\u0E48) THAI CHARACTER MAI EK" },
  XK_Thai_maitho:                   { code: 0x0de9, description: "(\u0E49) THAI CHARACTER MAI THO" },
  XK_Thai_maitri:                   { code: 0x0dea, description: "(\u0E4A) THAI CHARACTER MAI TRI" },
  XK_Thai_maichattawa:              { code: 0x0deb, description: "(\u0E4B) THAI CHARACTER MAI CHATTAWA" },
  XK_Thai_thanthakhat:              { code: 0x0dec, description: "(\u0E4C) THAI CHARACTER THANTHAKHAT" },
  XK_Thai_nikhahit:                 { code: 0x0ded, description: "(\u0E4D) THAI CHARACTER NIKHAHIT" },
  XK_Thai_leksun:                   { code: 0x0df0, description: "(\u0E50) THAI DIGIT ZERO" },
  XK_Thai_leknung:                  { code: 0x0df1, description: "(\u0E51) THAI DIGIT ONE" },
  XK_Thai_leksong:                  { code: 0x0df2, description: "(\u0E52) THAI DIGIT TWO" },
  XK_Thai_leksam:                   { code: 0x0df3, description: "(\u0E53) THAI DIGIT THREE" },
  XK_Thai_leksi:                    { code: 0x0df4, description: "(\u0E54) THAI DIGIT FOUR" },
  XK_Thai_lekha:                    { code: 0x0df5, description: "(\u0E55) THAI DIGIT FIVE" },
  XK_Thai_lekhok:                   { code: 0x0df6, description: "(\u0E56) THAI DIGIT SIX" },
  XK_Thai_lekchet:                  { code: 0x0df7, description: "(\u0E57) THAI DIGIT SEVEN" },
  XK_Thai_lekpaet:                  { code: 0x0df8, description: "(\u0E58) THAI DIGIT EIGHT" },
  XK_Thai_lekkao:                   { code: 0x0df9, description: "(\u0E59) THAI DIGIT NINE" },


/*
 * Korean
 * Byte 3 = 0x0e
 */

// Group XK_KOREAN

  XK_Hangul:                        { code: 0xff31, description: "Hangul start/stop(toggle)" },
  XK_Hangul_Start:                  { code: 0xff32, description: "Hangul start" },
  XK_Hangul_End:                    { code: 0xff33, description: "Hangul end, English start" },
  XK_Hangul_Hanja:                  { code: 0xff34, description: "Start Hangul->Hanja Conversion" },
  XK_Hangul_Jamo:                   { code: 0xff35, description: "Hangul Jamo mode" },
  XK_Hangul_Romaja:                 { code: 0xff36, description: "Hangul Romaja mode" },
  XK_Hangul_Codeinput:              { code: 0xff37, description: "Hangul code input mode" },
  XK_Hangul_Jeonja:                 { code: 0xff38, description: "Jeonja mode" },
  XK_Hangul_Banja:                  { code: 0xff39, description: "Banja mode" },
  XK_Hangul_PreHanja:               { code: 0xff3a, description: "Pre Hanja conversion" },
  XK_Hangul_PostHanja:              { code: 0xff3b, description: "Post Hanja conversion" },
  XK_Hangul_SingleCandidate:        { code: 0xff3c, description: "Single candidate" },
  XK_Hangul_MultipleCandidate:      { code: 0xff3d, description: "Multiple candidate" },
  XK_Hangul_PreviousCandidate:      { code: 0xff3e, description: "Previous candidate" },
  XK_Hangul_Special:                { code: 0xff3f, description: "Special symbols" },
  XK_Hangul_switch:                 { code: 0xff7e, description: "Alias for mode_switch" },

/* Hangul Consonant Characters */
  XK_Hangul_Kiyeog:                 { code: 0x0ea1, description: null },
  XK_Hangul_SsangKiyeog:            { code: 0x0ea2, description: null },
  XK_Hangul_KiyeogSios:             { code: 0x0ea3, description: null },
  XK_Hangul_Nieun:                  { code: 0x0ea4, description: null },
  XK_Hangul_NieunJieuj:             { code: 0x0ea5, description: null },
  XK_Hangul_NieunHieuh:             { code: 0x0ea6, description: null },
  XK_Hangul_Dikeud:                 { code: 0x0ea7, description: null },
  XK_Hangul_SsangDikeud:            { code: 0x0ea8, description: null },
  XK_Hangul_Rieul:                  { code: 0x0ea9, description: null },
  XK_Hangul_RieulKiyeog:            { code: 0x0eaa, description: null },
  XK_Hangul_RieulMieum:             { code: 0x0eab, description: null },
  XK_Hangul_RieulPieub:             { code: 0x0eac, description: null },
  XK_Hangul_RieulSios:              { code: 0x0ead, description: null },
  XK_Hangul_RieulTieut:             { code: 0x0eae, description: null },
  XK_Hangul_RieulPhieuf:            { code: 0x0eaf, description: null },
  XK_Hangul_RieulHieuh:             { code: 0x0eb0, description: null },
  XK_Hangul_Mieum:                  { code: 0x0eb1, description: null },
  XK_Hangul_Pieub:                  { code: 0x0eb2, description: null },
  XK_Hangul_SsangPieub:             { code: 0x0eb3, description: null },
  XK_Hangul_PieubSios:              { code: 0x0eb4, description: null },
  XK_Hangul_Sios:                   { code: 0x0eb5, description: null },
  XK_Hangul_SsangSios:              { code: 0x0eb6, description: null },
  XK_Hangul_Ieung:                  { code: 0x0eb7, description: null },
  XK_Hangul_Jieuj:                  { code: 0x0eb8, description: null },
  XK_Hangul_SsangJieuj:             { code: 0x0eb9, description: null },
  XK_Hangul_Cieuc:                  { code: 0x0eba, description: null },
  XK_Hangul_Khieuq:                 { code: 0x0ebb, description: null },
  XK_Hangul_Tieut:                  { code: 0x0ebc, description: null },
  XK_Hangul_Phieuf:                 { code: 0x0ebd, description: null },
  XK_Hangul_Hieuh:                  { code: 0x0ebe, description: null },

/* Hangul Vowel Characters */
  XK_Hangul_A:                      { code: 0x0ebf, description: null },
  XK_Hangul_AE:                     { code: 0x0ec0, description: null },
  XK_Hangul_YA:                     { code: 0x0ec1, description: null },
  XK_Hangul_YAE:                    { code: 0x0ec2, description: null },
  XK_Hangul_EO:                     { code: 0x0ec3, description: null },
  XK_Hangul_E:                      { code: 0x0ec4, description: null },
  XK_Hangul_YEO:                    { code: 0x0ec5, description: null },
  XK_Hangul_YE:                     { code: 0x0ec6, description: null },
  XK_Hangul_O:                      { code: 0x0ec7, description: null },
  XK_Hangul_WA:                     { code: 0x0ec8, description: null },
  XK_Hangul_WAE:                    { code: 0x0ec9, description: null },
  XK_Hangul_OE:                     { code: 0x0eca, description: null },
  XK_Hangul_YO:                     { code: 0x0ecb, description: null },
  XK_Hangul_U:                      { code: 0x0ecc, description: null },
  XK_Hangul_WEO:                    { code: 0x0ecd, description: null },
  XK_Hangul_WE:                     { code: 0x0ece, description: null },
  XK_Hangul_WI:                     { code: 0x0ecf, description: null },
  XK_Hangul_YU:                     { code: 0x0ed0, description: null },
  XK_Hangul_EU:                     { code: 0x0ed1, description: null },
  XK_Hangul_YI:                     { code: 0x0ed2, description: null },
  XK_Hangul_I:                      { code: 0x0ed3, description: null },

/* Hangul syllable-final (JongSeong) Characters */
  XK_Hangul_J_Kiyeog:               { code: 0x0ed4, description: null },
  XK_Hangul_J_SsangKiyeog:          { code: 0x0ed5, description: null },
  XK_Hangul_J_KiyeogSios:           { code: 0x0ed6, description: null },
  XK_Hangul_J_Nieun:                { code: 0x0ed7, description: null },
  XK_Hangul_J_NieunJieuj:           { code: 0x0ed8, description: null },
  XK_Hangul_J_NieunHieuh:           { code: 0x0ed9, description: null },
  XK_Hangul_J_Dikeud:               { code: 0x0eda, description: null },
  XK_Hangul_J_Rieul:                { code: 0x0edb, description: null },
  XK_Hangul_J_RieulKiyeog:          { code: 0x0edc, description: null },
  XK_Hangul_J_RieulMieum:           { code: 0x0edd, description: null },
  XK_Hangul_J_RieulPieub:           { code: 0x0ede, description: null },
  XK_Hangul_J_RieulSios:            { code: 0x0edf, description: null },
  XK_Hangul_J_RieulTieut:           { code: 0x0ee0, description: null },
  XK_Hangul_J_RieulPhieuf:          { code: 0x0ee1, description: null },
  XK_Hangul_J_RieulHieuh:           { code: 0x0ee2, description: null },
  XK_Hangul_J_Mieum:                { code: 0x0ee3, description: null },
  XK_Hangul_J_Pieub:                { code: 0x0ee4, description: null },
  XK_Hangul_J_PieubSios:            { code: 0x0ee5, description: null },
  XK_Hangul_J_Sios:                 { code: 0x0ee6, description: null },
  XK_Hangul_J_SsangSios:            { code: 0x0ee7, description: null },
  XK_Hangul_J_Ieung:                { code: 0x0ee8, description: null },
  XK_Hangul_J_Jieuj:                { code: 0x0ee9, description: null },
  XK_Hangul_J_Cieuc:                { code: 0x0eea, description: null },
  XK_Hangul_J_Khieuq:               { code: 0x0eeb, description: null },
  XK_Hangul_J_Tieut:                { code: 0x0eec, description: null },
  XK_Hangul_J_Phieuf:               { code: 0x0eed, description: null },
  XK_Hangul_J_Hieuh:                { code: 0x0eee, description: null },

/* Ancient Hangul Consonant Characters */
  XK_Hangul_RieulYeorinHieuh:       { code: 0x0eef, description: null },
  XK_Hangul_SunkyeongeumMieum:      { code: 0x0ef0, description: null },
  XK_Hangul_SunkyeongeumPieub:      { code: 0x0ef1, description: null },
  XK_Hangul_PanSios:                { code: 0x0ef2, description: null },
  XK_Hangul_KkogjiDalrinIeung:      { code: 0x0ef3, description: null },
  XK_Hangul_SunkyeongeumPhieuf:     { code: 0x0ef4, description: null },
  XK_Hangul_YeorinHieuh:            { code: 0x0ef5, description: null },

/* Ancient Hangul Vowel Characters */
  XK_Hangul_AraeA:                  { code: 0x0ef6, description: null },
  XK_Hangul_AraeAE:                 { code: 0x0ef7, description: null },

/* Ancient Hangul syllable-final (JongSeong) Characters */
  XK_Hangul_J_PanSios:              { code: 0x0ef8, description: null },
  XK_Hangul_J_KkogjiDalrinIeung:    { code: 0x0ef9, description: null },
  XK_Hangul_J_YeorinHieuh:          { code: 0x0efa, description: null },

/* Korean currency symbol */
  XK_Korean_Won:                    { code: 0x0eff, description: "((\u20A9) WON SIGN)" },



/*
 * Armenian
 */

// Group XK_ARMENIAN
  XK_Armenian_ligature_ew:       { code: 0x1000587, description: "(\u0587) ARMENIAN SMALL LIGATURE ECH YIWN" },
  XK_Armenian_full_stop:         { code: 0x1000589, description: "(\u0589) ARMENIAN FULL STOP" },
  XK_Armenian_verjaket:          { code: 0x1000589, description: "(\u0589) ARMENIAN FULL STOP" },
  XK_Armenian_separation_mark:   { code: 0x100055d, description: "(\u055D) ARMENIAN COMMA" },
  XK_Armenian_but:               { code: 0x100055d, description: "(\u055D) ARMENIAN COMMA" },
  XK_Armenian_hyphen:            { code: 0x100058a, description: "(\u058A) ARMENIAN HYPHEN" },
  XK_Armenian_yentamna:          { code: 0x100058a, description: "(\u058A) ARMENIAN HYPHEN" },
  XK_Armenian_exclam:            { code: 0x100055c, description: "(\u055C) ARMENIAN EXCLAMATION MARK" },
  XK_Armenian_amanak:            { code: 0x100055c, description: "(\u055C) ARMENIAN EXCLAMATION MARK" },
  XK_Armenian_accent:            { code: 0x100055b, description: "(\u055B) ARMENIAN EMPHASIS MARK" },
  XK_Armenian_shesht:            { code: 0x100055b, description: "(\u055B) ARMENIAN EMPHASIS MARK" },
  XK_Armenian_question:          { code: 0x100055e, description: "(\u055E) ARMENIAN QUESTION MARK" },
  XK_Armenian_paruyk:            { code: 0x100055e, description: "(\u055E) ARMENIAN QUESTION MARK" },
  XK_Armenian_AYB:               { code: 0x1000531, description: "(\u0531) ARMENIAN CAPITAL LETTER AYB" },
  XK_Armenian_ayb:               { code: 0x1000561, description: "(\u0561) ARMENIAN SMALL LETTER AYB" },
  XK_Armenian_BEN:               { code: 0x1000532, description: "(\u0532) ARMENIAN CAPITAL LETTER BEN" },
  XK_Armenian_ben:               { code: 0x1000562, description: "(\u0562) ARMENIAN SMALL LETTER BEN" },
  XK_Armenian_GIM:               { code: 0x1000533, description: "(\u0533) ARMENIAN CAPITAL LETTER GIM" },
  XK_Armenian_gim:               { code: 0x1000563, description: "(\u0563) ARMENIAN SMALL LETTER GIM" },
  XK_Armenian_DA:                { code: 0x1000534, description: "(\u0534) ARMENIAN CAPITAL LETTER DA" },
  XK_Armenian_da:                { code: 0x1000564, description: "(\u0564) ARMENIAN SMALL LETTER DA" },
  XK_Armenian_YECH:              { code: 0x1000535, description: "(\u0535) ARMENIAN CAPITAL LETTER ECH" },
  XK_Armenian_yech:              { code: 0x1000565, description: "(\u0565) ARMENIAN SMALL LETTER ECH" },
  XK_Armenian_ZA:                { code: 0x1000536, description: "(\u0536) ARMENIAN CAPITAL LETTER ZA" },
  XK_Armenian_za:                { code: 0x1000566, description: "(\u0566) ARMENIAN SMALL LETTER ZA" },
  XK_Armenian_E:                 { code: 0x1000537, description: "(\u0537) ARMENIAN CAPITAL LETTER EH" },
  XK_Armenian_e:                 { code: 0x1000567, description: "(\u0567) ARMENIAN SMALL LETTER EH" },
  XK_Armenian_AT:                { code: 0x1000538, description: "(\u0538) ARMENIAN CAPITAL LETTER ET" },
  XK_Armenian_at:                { code: 0x1000568, description: "(\u0568) ARMENIAN SMALL LETTER ET" },
  XK_Armenian_TO:                { code: 0x1000539, description: "(\u0539) ARMENIAN CAPITAL LETTER TO" },
  XK_Armenian_to:                { code: 0x1000569, description: "(\u0569) ARMENIAN SMALL LETTER TO" },
  XK_Armenian_ZHE:               { code: 0x100053a, description: "(\u053A) ARMENIAN CAPITAL LETTER ZHE" },
  XK_Armenian_zhe:               { code: 0x100056a, description: "(\u056A) ARMENIAN SMALL LETTER ZHE" },
  XK_Armenian_INI:               { code: 0x100053b, description: "(\u053B) ARMENIAN CAPITAL LETTER INI" },
  XK_Armenian_ini:               { code: 0x100056b, description: "(\u056B) ARMENIAN SMALL LETTER INI" },
  XK_Armenian_LYUN:              { code: 0x100053c, description: "(\u053C) ARMENIAN CAPITAL LETTER LIWN" },
  XK_Armenian_lyun:              { code: 0x100056c, description: "(\u056C) ARMENIAN SMALL LETTER LIWN" },
  XK_Armenian_KHE:               { code: 0x100053d, description: "(\u053D) ARMENIAN CAPITAL LETTER XEH" },
  XK_Armenian_khe:               { code: 0x100056d, description: "(\u056D) ARMENIAN SMALL LETTER XEH" },
  XK_Armenian_TSA:               { code: 0x100053e, description: "(\u053E) ARMENIAN CAPITAL LETTER CA" },
  XK_Armenian_tsa:               { code: 0x100056e, description: "(\u056E) ARMENIAN SMALL LETTER CA" },
  XK_Armenian_KEN:               { code: 0x100053f, description: "(\u053F) ARMENIAN CAPITAL LETTER KEN" },
  XK_Armenian_ken:               { code: 0x100056f, description: "(\u056F) ARMENIAN SMALL LETTER KEN" },
  XK_Armenian_HO:                { code: 0x1000540, description: "(\u0540) ARMENIAN CAPITAL LETTER HO" },
  XK_Armenian_ho:                { code: 0x1000570, description: "(\u0570) ARMENIAN SMALL LETTER HO" },
  XK_Armenian_DZA:               { code: 0x1000541, description: "(\u0541) ARMENIAN CAPITAL LETTER JA" },
  XK_Armenian_dza:               { code: 0x1000571, description: "(\u0571) ARMENIAN SMALL LETTER JA" },
  XK_Armenian_GHAT:              { code: 0x1000542, description: "(\u0542) ARMENIAN CAPITAL LETTER GHAD" },
  XK_Armenian_ghat:              { code: 0x1000572, description: "(\u0572) ARMENIAN SMALL LETTER GHAD" },
  XK_Armenian_TCHE:              { code: 0x1000543, description: "(\u0543) ARMENIAN CAPITAL LETTER CHEH" },
  XK_Armenian_tche:              { code: 0x1000573, description: "(\u0573) ARMENIAN SMALL LETTER CHEH" },
  XK_Armenian_MEN:               { code: 0x1000544, description: "(\u0544) ARMENIAN CAPITAL LETTER MEN" },
  XK_Armenian_men:               { code: 0x1000574, description: "(\u0574) ARMENIAN SMALL LETTER MEN" },
  XK_Armenian_HI:                { code: 0x1000545, description: "(\u0545) ARMENIAN CAPITAL LETTER YI" },
  XK_Armenian_hi:                { code: 0x1000575, description: "(\u0575) ARMENIAN SMALL LETTER YI" },
  XK_Armenian_NU:                { code: 0x1000546, description: "(\u0546) ARMENIAN CAPITAL LETTER NOW" },
  XK_Armenian_nu:                { code: 0x1000576, description: "(\u0576) ARMENIAN SMALL LETTER NOW" },
  XK_Armenian_SHA:               { code: 0x1000547, description: "(\u0547) ARMENIAN CAPITAL LETTER SHA" },
  XK_Armenian_sha:               { code: 0x1000577, description: "(\u0577) ARMENIAN SMALL LETTER SHA" },
  XK_Armenian_VO:                { code: 0x1000548, description: "(\u0548) ARMENIAN CAPITAL LETTER VO" },
  XK_Armenian_vo:                { code: 0x1000578, description: "(\u0578) ARMENIAN SMALL LETTER VO" },
  XK_Armenian_CHA:               { code: 0x1000549, description: "(\u0549) ARMENIAN CAPITAL LETTER CHA" },
  XK_Armenian_cha:               { code: 0x1000579, description: "(\u0579) ARMENIAN SMALL LETTER CHA" },
  XK_Armenian_PE:                { code: 0x100054a, description: "(\u054A) ARMENIAN CAPITAL LETTER PEH" },
  XK_Armenian_pe:                { code: 0x100057a, description: "(\u057A) ARMENIAN SMALL LETTER PEH" },
  XK_Armenian_JE:                { code: 0x100054b, description: "(\u054B) ARMENIAN CAPITAL LETTER JHEH" },
  XK_Armenian_je:                { code: 0x100057b, description: "(\u057B) ARMENIAN SMALL LETTER JHEH" },
  XK_Armenian_RA:                { code: 0x100054c, description: "(\u054C) ARMENIAN CAPITAL LETTER RA" },
  XK_Armenian_ra:                { code: 0x100057c, description: "(\u057C) ARMENIAN SMALL LETTER RA" },
  XK_Armenian_SE:                { code: 0x100054d, description: "(\u054D) ARMENIAN CAPITAL LETTER SEH" },
  XK_Armenian_se:                { code: 0x100057d, description: "(\u057D) ARMENIAN SMALL LETTER SEH" },
  XK_Armenian_VEV:               { code: 0x100054e, description: "(\u054E) ARMENIAN CAPITAL LETTER VEW" },
  XK_Armenian_vev:               { code: 0x100057e, description: "(\u057E) ARMENIAN SMALL LETTER VEW" },
  XK_Armenian_TYUN:              { code: 0x100054f, description: "(\u054F) ARMENIAN CAPITAL LETTER TIWN" },
  XK_Armenian_tyun:              { code: 0x100057f, description: "(\u057F) ARMENIAN SMALL LETTER TIWN" },
  XK_Armenian_RE:                { code: 0x1000550, description: "(\u0550) ARMENIAN CAPITAL LETTER REH" },
  XK_Armenian_re:                { code: 0x1000580, description: "(\u0580) ARMENIAN SMALL LETTER REH" },
  XK_Armenian_TSO:               { code: 0x1000551, description: "(\u0551) ARMENIAN CAPITAL LETTER CO" },
  XK_Armenian_tso:               { code: 0x1000581, description: "(\u0581) ARMENIAN SMALL LETTER CO" },
  XK_Armenian_VYUN:              { code: 0x1000552, description: "(\u0552) ARMENIAN CAPITAL LETTER YIWN" },
  XK_Armenian_vyun:              { code: 0x1000582, description: "(\u0582) ARMENIAN SMALL LETTER YIWN" },
  XK_Armenian_PYUR:              { code: 0x1000553, description: "(\u0553) ARMENIAN CAPITAL LETTER PIWR" },
  XK_Armenian_pyur:              { code: 0x1000583, description: "(\u0583) ARMENIAN SMALL LETTER PIWR" },
  XK_Armenian_KE:                { code: 0x1000554, description: "(\u0554) ARMENIAN CAPITAL LETTER KEH" },
  XK_Armenian_ke:                { code: 0x1000584, description: "(\u0584) ARMENIAN SMALL LETTER KEH" },
  XK_Armenian_O:                 { code: 0x1000555, description: "(\u0555) ARMENIAN CAPITAL LETTER OH" },
  XK_Armenian_o:                 { code: 0x1000585, description: "(\u0585) ARMENIAN SMALL LETTER OH" },
  XK_Armenian_FE:                { code: 0x1000556, description: "(\u0556) ARMENIAN CAPITAL LETTER FEH" },
  XK_Armenian_fe:                { code: 0x1000586, description: "(\u0586) ARMENIAN SMALL LETTER FEH" },
  XK_Armenian_apostrophe:        { code: 0x100055a, description: "(\u055A) ARMENIAN APOSTROPHE" },


/*
 * Georgian
 */

// Group XK_GEORGIAN
  XK_Georgian_an:                { code: 0x10010d0, description: "(\u10D0) GEORGIAN LETTER AN" },
  XK_Georgian_ban:               { code: 0x10010d1, description: "(\u10D1) GEORGIAN LETTER BAN" },
  XK_Georgian_gan:               { code: 0x10010d2, description: "(\u10D2) GEORGIAN LETTER GAN" },
  XK_Georgian_don:               { code: 0x10010d3, description: "(\u10D3) GEORGIAN LETTER DON" },
  XK_Georgian_en:                { code: 0x10010d4, description: "(\u10D4) GEORGIAN LETTER EN" },
  XK_Georgian_vin:               { code: 0x10010d5, description: "(\u10D5) GEORGIAN LETTER VIN" },
  XK_Georgian_zen:               { code: 0x10010d6, description: "(\u10D6) GEORGIAN LETTER ZEN" },
  XK_Georgian_tan:               { code: 0x10010d7, description: "(\u10D7) GEORGIAN LETTER TAN" },
  XK_Georgian_in:                { code: 0x10010d8, description: "(\u10D8) GEORGIAN LETTER IN" },
  XK_Georgian_kan:               { code: 0x10010d9, description: "(\u10D9) GEORGIAN LETTER KAN" },
  XK_Georgian_las:               { code: 0x10010da, description: "(\u10DA) GEORGIAN LETTER LAS" },
  XK_Georgian_man:               { code: 0x10010db, description: "(\u10DB) GEORGIAN LETTER MAN" },
  XK_Georgian_nar:               { code: 0x10010dc, description: "(\u10DC) GEORGIAN LETTER NAR" },
  XK_Georgian_on:                { code: 0x10010dd, description: "(\u10DD) GEORGIAN LETTER ON" },
  XK_Georgian_par:               { code: 0x10010de, description: "(\u10DE) GEORGIAN LETTER PAR" },
  XK_Georgian_zhar:              { code: 0x10010df, description: "(\u10DF) GEORGIAN LETTER ZHAR" },
  XK_Georgian_rae:               { code: 0x10010e0, description: "(\u10E0) GEORGIAN LETTER RAE" },
  XK_Georgian_san:               { code: 0x10010e1, description: "(\u10E1) GEORGIAN LETTER SAN" },
  XK_Georgian_tar:               { code: 0x10010e2, description: "(\u10E2) GEORGIAN LETTER TAR" },
  XK_Georgian_un:                { code: 0x10010e3, description: "(\u10E3) GEORGIAN LETTER UN" },
  XK_Georgian_phar:              { code: 0x10010e4, description: "(\u10E4) GEORGIAN LETTER PHAR" },
  XK_Georgian_khar:              { code: 0x10010e5, description: "(\u10E5) GEORGIAN LETTER KHAR" },
  XK_Georgian_ghan:              { code: 0x10010e6, description: "(\u10E6) GEORGIAN LETTER GHAN" },
  XK_Georgian_qar:               { code: 0x10010e7, description: "(\u10E7) GEORGIAN LETTER QAR" },
  XK_Georgian_shin:              { code: 0x10010e8, description: "(\u10E8) GEORGIAN LETTER SHIN" },
  XK_Georgian_chin:              { code: 0x10010e9, description: "(\u10E9) GEORGIAN LETTER CHIN" },
  XK_Georgian_can:               { code: 0x10010ea, description: "(\u10EA) GEORGIAN LETTER CAN" },
  XK_Georgian_jil:               { code: 0x10010eb, description: "(\u10EB) GEORGIAN LETTER JIL" },
  XK_Georgian_cil:               { code: 0x10010ec, description: "(\u10EC) GEORGIAN LETTER CIL" },
  XK_Georgian_char:              { code: 0x10010ed, description: "(\u10ED) GEORGIAN LETTER CHAR" },
  XK_Georgian_xan:               { code: 0x10010ee, description: "(\u10EE) GEORGIAN LETTER XAN" },
  XK_Georgian_jhan:              { code: 0x10010ef, description: "(\u10EF) GEORGIAN LETTER JHAN" },
  XK_Georgian_hae:               { code: 0x10010f0, description: "(\u10F0) GEORGIAN LETTER HAE" },
  XK_Georgian_he:                { code: 0x10010f1, description: "(\u10F1) GEORGIAN LETTER HE" },
  XK_Georgian_hie:               { code: 0x10010f2, description: "(\u10F2) GEORGIAN LETTER HIE" },
  XK_Georgian_we:                { code: 0x10010f3, description: "(\u10F3) GEORGIAN LETTER WE" },
  XK_Georgian_har:               { code: 0x10010f4, description: "(\u10F4) GEORGIAN LETTER HAR" },
  XK_Georgian_hoe:               { code: 0x10010f5, description: "(\u10F5) GEORGIAN LETTER HOE" },
  XK_Georgian_fi:                { code: 0x10010f6, description: "(\u10F6) GEORGIAN LETTER FI" },


/*
 * Azeri (and other Turkic or Caucasian languages)
 */

// Group XK_CAUCASUS
/* latin */
  XK_Xabovedot:                  { code: 0x1001e8a, description: "(\u1E8A) LATIN CAPITAL LETTER X WITH DOT ABOVE" },
  XK_Ibreve:                     { code: 0x100012c, description: "(\u012C) LATIN CAPITAL LETTER I WITH BREVE" },
  XK_Zstroke:                    { code: 0x10001b5, description: "(\u01B5) LATIN CAPITAL LETTER Z WITH STROKE" },
  XK_Gcaron:                     { code: 0x10001e6, description: "(\u01E6) LATIN CAPITAL LETTER G WITH CARON" },
  XK_Ocaron:                     { code: 0x10001d1, description: "(\u01D2) LATIN CAPITAL LETTER O WITH CARON" },
  XK_Obarred:                    { code: 0x100019f, description: "(\u019F) LATIN CAPITAL LETTER O WITH MIDDLE TILDE" },
  XK_xabovedot:                  { code: 0x1001e8b, description: "(\u1E8B) LATIN SMALL LETTER X WITH DOT ABOVE" },
  XK_ibreve:                     { code: 0x100012d, description: "(\u012D) LATIN SMALL LETTER I WITH BREVE" },
  XK_zstroke:                    { code: 0x10001b6, description: "(\u01B6) LATIN SMALL LETTER Z WITH STROKE" },
  XK_gcaron:                     { code: 0x10001e7, description: "(\u01E7) LATIN SMALL LETTER G WITH CARON" },
  XK_ocaron:                     { code: 0x10001d2, description: "(\u01D2) LATIN SMALL LETTER O WITH CARON" },
  XK_obarred:                    { code: 0x1000275, description: "(\u0275) LATIN SMALL LETTER BARRED O" },
  XK_SCHWA:                      { code: 0x100018f, description: "(\u018F) LATIN CAPITAL LETTER SCHWA" },
  XK_schwa:                      { code: 0x1000259, description: "(\u0259) LATIN SMALL LETTER SCHWA" },
  XK_EZH:                        { code: 0x10001b7, description: "(\u01B7) LATIN CAPITAL LETTER EZH" },
  XK_ezh:                        { code: 0x1000292, description: "(\u0292) LATIN SMALL LETTER EZH" },
/* those are not really Caucasus */
/* For Inupiak */
  XK_Lbelowdot:                  { code: 0x1001e36, description: "(\u1E36) LATIN CAPITAL LETTER L WITH DOT BELOW" },
  XK_lbelowdot:                  { code: 0x1001e37, description: "(\u1E37) LATIN SMALL LETTER L WITH DOT BELOW" },


/*
 * Vietnamese
 */
 
// Group XK_VIETNAMESE
  XK_Abelowdot:                  { code: 0x1001ea0, description: "(\u1EA0) LATIN CAPITAL LETTER A WITH DOT BELOW" },
  XK_abelowdot:                  { code: 0x1001ea1, description: "(\u1EA1) LATIN SMALL LETTER A WITH DOT BELOW" },
  XK_Ahook:                      { code: 0x1001ea2, description: "(\u1EA2) LATIN CAPITAL LETTER A WITH HOOK ABOVE" },
  XK_ahook:                      { code: 0x1001ea3, description: "(\u1EA3) LATIN SMALL LETTER A WITH HOOK ABOVE" },
  XK_Acircumflexacute:           { code: 0x1001ea4, description: "(\u1EA4) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE" },
  XK_acircumflexacute:           { code: 0x1001ea5, description: "(\u1EA5) LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE" },
  XK_Acircumflexgrave:           { code: 0x1001ea6, description: "(\u1EA6) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE" },
  XK_acircumflexgrave:           { code: 0x1001ea7, description: "(\u1EA7) LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE" },
  XK_Acircumflexhook:            { code: 0x1001ea8, description: "(\u1EA8) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE" },
  XK_acircumflexhook:            { code: 0x1001ea9, description: "(\u1EA9) LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE" },
  XK_Acircumflextilde:           { code: 0x1001eaa, description: "(\u1EAA) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE" },
  XK_acircumflextilde:           { code: 0x1001eab, description: "(\u1EAB) LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE" },
  XK_Acircumflexbelowdot:        { code: 0x1001eac, description: "(\u1EAC) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW" },
  XK_acircumflexbelowdot:        { code: 0x1001ead, description: "(\u1EAD) LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW" },
  XK_Abreveacute:                { code: 0x1001eae, description: "(\u1EAE) LATIN CAPITAL LETTER A WITH BREVE AND ACUTE" },
  XK_abreveacute:                { code: 0x1001eaf, description: "(\u1EAF) LATIN SMALL LETTER A WITH BREVE AND ACUTE" },
  XK_Abrevegrave:                { code: 0x1001eb0, description: "(\u1EB0) LATIN CAPITAL LETTER A WITH BREVE AND GRAVE" },
  XK_abrevegrave:                { code: 0x1001eb1, description: "(\u1EB1) LATIN SMALL LETTER A WITH BREVE AND GRAVE" },
  XK_Abrevehook:                 { code: 0x1001eb2, description: "(\u1EB2) LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE" },
  XK_abrevehook:                 { code: 0x1001eb3, description: "(\u1EB3) LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE" },
  XK_Abrevetilde:                { code: 0x1001eb4, description: "(\u1EB4) LATIN CAPITAL LETTER A WITH BREVE AND TILDE" },
  XK_abrevetilde:                { code: 0x1001eb5, description: "(\u1EB5) LATIN SMALL LETTER A WITH BREVE AND TILDE" },
  XK_Abrevebelowdot:             { code: 0x1001eb6, description: "(\u1EB6) LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW" },
  XK_abrevebelowdot:             { code: 0x1001eb7, description: "(\u1EB7) LATIN SMALL LETTER A WITH BREVE AND DOT BELOW" },
  XK_Ebelowdot:                  { code: 0x1001eb8, description: "(\u1EB8) LATIN CAPITAL LETTER E WITH DOT BELOW" },
  XK_ebelowdot:                  { code: 0x1001eb9, description: "(\u1EB9) LATIN SMALL LETTER E WITH DOT BELOW" },
  XK_Ehook:                      { code: 0x1001eba, description: "(\u1EBA) LATIN CAPITAL LETTER E WITH HOOK ABOVE" },
  XK_ehook:                      { code: 0x1001ebb, description: "(\u1EBB) LATIN SMALL LETTER E WITH HOOK ABOVE" },
  XK_Etilde:                     { code: 0x1001ebc, description: "(\u1EBC) LATIN CAPITAL LETTER E WITH TILDE" },
  XK_etilde:                     { code: 0x1001ebd, description: "(\u1EBD) LATIN SMALL LETTER E WITH TILDE" },
  XK_Ecircumflexacute:           { code: 0x1001ebe, description: "(\u1EBE) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE" },
  XK_ecircumflexacute:           { code: 0x1001ebf, description: "(\u1EBF) LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE" },
  XK_Ecircumflexgrave:           { code: 0x1001ec0, description: "(\u1EC0) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE" },
  XK_ecircumflexgrave:           { code: 0x1001ec1, description: "(\u1EC1) LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE" },
  XK_Ecircumflexhook:            { code: 0x1001ec2, description: "(\u1EC2) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE" },
  XK_ecircumflexhook:            { code: 0x1001ec3, description: "(\u1EC3) LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE" },
  XK_Ecircumflextilde:           { code: 0x1001ec4, description: "(\u1EC4) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE" },
  XK_ecircumflextilde:           { code: 0x1001ec5, description: "(\u1EC5) LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE" },
  XK_Ecircumflexbelowdot:        { code: 0x1001ec6, description: "(\u1EC6) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW" },
  XK_ecircumflexbelowdot:        { code: 0x1001ec7, description: "(\u1EC7) LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW" },
  XK_Ihook:                      { code: 0x1001ec8, description: "(\u1EC8) LATIN CAPITAL LETTER I WITH HOOK ABOVE" },
  XK_ihook:                      { code: 0x1001ec9, description: "(\u1EC9) LATIN SMALL LETTER I WITH HOOK ABOVE" },
  XK_Ibelowdot:                  { code: 0x1001eca, description: "(\u1ECA) LATIN CAPITAL LETTER I WITH DOT BELOW" },
  XK_ibelowdot:                  { code: 0x1001ecb, description: "(\u1ECB) LATIN SMALL LETTER I WITH DOT BELOW" },
  XK_Obelowdot:                  { code: 0x1001ecc, description: "(\u1ECC) LATIN CAPITAL LETTER O WITH DOT BELOW" },
  XK_obelowdot:                  { code: 0x1001ecd, description: "(\u1ECD) LATIN SMALL LETTER O WITH DOT BELOW" },
  XK_Ohook:                      { code: 0x1001ece, description: "(\u1ECE) LATIN CAPITAL LETTER O WITH HOOK ABOVE" },
  XK_ohook:                      { code: 0x1001ecf, description: "(\u1ECF) LATIN SMALL LETTER O WITH HOOK ABOVE" },
  XK_Ocircumflexacute:           { code: 0x1001ed0, description: "(\u1ED0) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE" },
  XK_ocircumflexacute:           { code: 0x1001ed1, description: "(\u1ED1) LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE" },
  XK_Ocircumflexgrave:           { code: 0x1001ed2, description: "(\u1ED2) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE" },
  XK_ocircumflexgrave:           { code: 0x1001ed3, description: "(\u1ED3) LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE" },
  XK_Ocircumflexhook:            { code: 0x1001ed4, description: "(\u1ED4) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE" },
  XK_ocircumflexhook:            { code: 0x1001ed5, description: "(\u1ED5) LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE" },
  XK_Ocircumflextilde:           { code: 0x1001ed6, description: "(\u1ED6) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE" },
  XK_ocircumflextilde:           { code: 0x1001ed7, description: "(\u1ED7) LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE" },
  XK_Ocircumflexbelowdot:        { code: 0x1001ed8, description: "(\u1ED8) LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW" },
  XK_ocircumflexbelowdot:        { code: 0x1001ed9, description: "(\u1ED9) LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW" },
  XK_Ohornacute:                 { code: 0x1001eda, description: "(\u1EDA) LATIN CAPITAL LETTER O WITH HORN AND ACUTE" },
  XK_ohornacute:                 { code: 0x1001edb, description: "(\u1EDB) LATIN SMALL LETTER O WITH HORN AND ACUTE" },
  XK_Ohorngrave:                 { code: 0x1001edc, description: "(\u1EDC) LATIN CAPITAL LETTER O WITH HORN AND GRAVE" },
  XK_ohorngrave:                 { code: 0x1001edd, description: "(\u1EDD) LATIN SMALL LETTER O WITH HORN AND GRAVE" },
  XK_Ohornhook:                  { code: 0x1001ede, description: "(\u1EDE) LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE" },
  XK_ohornhook:                  { code: 0x1001edf, description: "(\u1EDF) LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE" },
  XK_Ohorntilde:                 { code: 0x1001ee0, description: "(\u1EE0) LATIN CAPITAL LETTER O WITH HORN AND TILDE" },
  XK_ohorntilde:                 { code: 0x1001ee1, description: "(\u1EE1) LATIN SMALL LETTER O WITH HORN AND TILDE" },
  XK_Ohornbelowdot:              { code: 0x1001ee2, description: "(\u1EE2) LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW" },
  XK_ohornbelowdot:              { code: 0x1001ee3, description: "(\u1EE3) LATIN SMALL LETTER O WITH HORN AND DOT BELOW" },
  XK_Ubelowdot:                  { code: 0x1001ee4, description: "(\u1EE4) LATIN CAPITAL LETTER U WITH DOT BELOW" },
  XK_ubelowdot:                  { code: 0x1001ee5, description: "(\u1EE5) LATIN SMALL LETTER U WITH DOT BELOW" },
  XK_Uhook:                      { code: 0x1001ee6, description: "(\u1EE6) LATIN CAPITAL LETTER U WITH HOOK ABOVE" },
  XK_uhook:                      { code: 0x1001ee7, description: "(\u1EE7) LATIN SMALL LETTER U WITH HOOK ABOVE" },
  XK_Uhornacute:                 { code: 0x1001ee8, description: "(\u1EE8) LATIN CAPITAL LETTER U WITH HORN AND ACUTE" },
  XK_uhornacute:                 { code: 0x1001ee9, description: "(\u1EE9) LATIN SMALL LETTER U WITH HORN AND ACUTE" },
  XK_Uhorngrave:                 { code: 0x1001eea, description: "(\u1EEA) LATIN CAPITAL LETTER U WITH HORN AND GRAVE" },
  XK_uhorngrave:                 { code: 0x1001eeb, description: "(\u1EEB) LATIN SMALL LETTER U WITH HORN AND GRAVE" },
  XK_Uhornhook:                  { code: 0x1001eec, description: "(\u1EEC) LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE" },
  XK_uhornhook:                  { code: 0x1001eed, description: "(\u1EED) LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE" },
  XK_Uhorntilde:                 { code: 0x1001eee, description: "(\u1EEE) LATIN CAPITAL LETTER U WITH HORN AND TILDE" },
  XK_uhorntilde:                 { code: 0x1001eef, description: "(\u1EEF) LATIN SMALL LETTER U WITH HORN AND TILDE" },
  XK_Uhornbelowdot:              { code: 0x1001ef0, description: "(\u1EF0) LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW" },
  XK_uhornbelowdot:              { code: 0x1001ef1, description: "(\u1EF1) LATIN SMALL LETTER U WITH HORN AND DOT BELOW" },
  XK_Ybelowdot:                  { code: 0x1001ef4, description: "(\u1EF4) LATIN CAPITAL LETTER Y WITH DOT BELOW" },
  XK_ybelowdot:                  { code: 0x1001ef5, description: "(\u1EF5) LATIN SMALL LETTER Y WITH DOT BELOW" },
  XK_Yhook:                      { code: 0x1001ef6, description: "(\u1EF6) LATIN CAPITAL LETTER Y WITH HOOK ABOVE" },
  XK_yhook:                      { code: 0x1001ef7, description: "(\u1EF7) LATIN SMALL LETTER Y WITH HOOK ABOVE" },
  XK_Ytilde:                     { code: 0x1001ef8, description: "(\u1EF8) LATIN CAPITAL LETTER Y WITH TILDE" },
  XK_ytilde:                     { code: 0x1001ef9, description: "(\u1EF9) LATIN SMALL LETTER Y WITH TILDE" },
  XK_Ohorn:                      { code: 0x10001a0, description: "(\u01A0) LATIN CAPITAL LETTER O WITH HORN" },
  XK_ohorn:                      { code: 0x10001a1, description: "(\u01A1) LATIN SMALL LETTER O WITH HORN" },
  XK_Uhorn:                      { code: 0x10001af, description: "(\u01AF) LATIN CAPITAL LETTER U WITH HORN" },
  XK_uhorn:                      { code: 0x10001b0, description: "(\u01B0) LATIN SMALL LETTER U WITH HORN" },



// Group XK_CURRENCY
  XK_EcuSign:                    { code: 0x10020a0, description: "(\u20A0) EURO-CURRENCY SIGN" },
  XK_ColonSign:                  { code: 0x10020a1, description: "(\u20A1) COLON SIGN" },
  XK_CruzeiroSign:               { code: 0x10020a2, description: "(\u20A2) CRUZEIRO SIGN" },
  XK_FFrancSign:                 { code: 0x10020a3, description: "(\u20A3) FRENCH FRANC SIGN" },
  XK_LiraSign:                   { code: 0x10020a4, description: "(\u20A4) LIRA SIGN" },
  XK_MillSign:                   { code: 0x10020a5, description: "(\u20A5) MILL SIGN" },
  XK_NairaSign:                  { code: 0x10020a6, description: "(\u20A6) NAIRA SIGN" },
  XK_PesetaSign:                 { code: 0x10020a7, description: "(\u20A7) PESETA SIGN" },
  XK_RupeeSign:                  { code: 0x10020a8, description: "(\u20A8) RUPEE SIGN" },
  XK_WonSign:                    { code: 0x10020a9, description: "(\u20A9) WON SIGN" },
  XK_NewSheqelSign:              { code: 0x10020aa, description: "(\u20AA) NEW SHEQEL SIGN" },
  XK_DongSign:                   { code: 0x10020ab, description: "(\u20AB) DONG SIGN" },
  XK_EuroSign:                      { code: 0x20ac, description: "(\u20AC) EURO SIGN" },


// Group XK_MATHEMATICAL
/* one, two and three are defined above. */
  XK_zerosuperior:               { code: 0x1002070, description: "(\u2070) SUPERSCRIPT ZERO" },
  XK_foursuperior:               { code: 0x1002074, description: "(\u2074) SUPERSCRIPT FOUR" },
  XK_fivesuperior:               { code: 0x1002075, description: "(\u2075) SUPERSCRIPT FIVE" },
  XK_sixsuperior:                { code: 0x1002076, description: "(\u2076) SUPERSCRIPT SIX" },
  XK_sevensuperior:              { code: 0x1002077, description: "(\u2077) SUPERSCRIPT SEVEN" },
  XK_eightsuperior:              { code: 0x1002078, description: "(\u2078) SUPERSCRIPT EIGHT" },
  XK_ninesuperior:               { code: 0x1002079, description: "(\u2079) SUPERSCRIPT NINE" },
  XK_zerosubscript:              { code: 0x1002080, description: "(\u2080) SUBSCRIPT ZERO" },
  XK_onesubscript:               { code: 0x1002081, description: "(\u2081) SUBSCRIPT ONE" },
  XK_twosubscript:               { code: 0x1002082, description: "(\u2082) SUBSCRIPT TWO" },
  XK_threesubscript:             { code: 0x1002083, description: "(\u2083) SUBSCRIPT THREE" },
  XK_foursubscript:              { code: 0x1002084, description: "(\u2084) SUBSCRIPT FOUR" },
  XK_fivesubscript:              { code: 0x1002085, description: "(\u2085) SUBSCRIPT FIVE" },
  XK_sixsubscript:               { code: 0x1002086, description: "(\u2086) SUBSCRIPT SIX" },
  XK_sevensubscript:             { code: 0x1002087, description: "(\u2087) SUBSCRIPT SEVEN" },
  XK_eightsubscript:             { code: 0x1002088, description: "(\u2088) SUBSCRIPT EIGHT" },
  XK_ninesubscript:              { code: 0x1002089, description: "(\u2089) SUBSCRIPT NINE" },
  XK_partdifferential:           { code: 0x1002202, description: "(\u2202) PARTIAL DIFFERENTIAL" },
  XK_emptyset:                   { code: 0x1002205, description: "(\u2205) NULL SET" },
  XK_elementof:                  { code: 0x1002208, description: "(\u2208) ELEMENT OF" },
  XK_notelementof:               { code: 0x1002209, description: "(\u2209) NOT AN ELEMENT OF" },
  XK_containsas:                 { code: 0x100220B, description: "(\u220B) CONTAINS AS MEMBER" },
  XK_squareroot:                 { code: 0x100221A, description: "(\u221A) SQUARE ROOT" },
  XK_cuberoot:                   { code: 0x100221B, description: "(\u221B) CUBE ROOT" },
  XK_fourthroot:                 { code: 0x100221C, description: "(\u221C) FOURTH ROOT" },
  XK_dintegral:                  { code: 0x100222C, description: "(\u222C) DOUBLE INTEGRAL" },
  XK_tintegral:                  { code: 0x100222D, description: "(\u222D) TRIPLE INTEGRAL" },
  XK_because:                    { code: 0x1002235, description: "(\u2235) BECAUSE" },
  XK_approxeq:                   { code: 0x1002248, description: "(\u2245) ALMOST EQUAL TO" },
  XK_notapproxeq:                { code: 0x1002247, description: "(\u2247) NOT ALMOST EQUAL TO" },
  XK_notidentical:               { code: 0x1002262, description: "(\u2262) NOT IDENTICAL TO" },
  XK_stricteq:                   { code: 0x1002263, description: "(\u2263) STRICTLY EQUIVALENT TO" },          


// Group XK_BRAILLE
  XK_braille_dot_1:                 { code: 0xfff1, description: null },
  XK_braille_dot_2:                 { code: 0xfff2, description: null },
  XK_braille_dot_3:                 { code: 0xfff3, description: null },
  XK_braille_dot_4:                 { code: 0xfff4, description: null },
  XK_braille_dot_5:                 { code: 0xfff5, description: null },
  XK_braille_dot_6:                 { code: 0xfff6, description: null },
  XK_braille_dot_7:                 { code: 0xfff7, description: null },
  XK_braille_dot_8:                 { code: 0xfff8, description: null },
  XK_braille_dot_9:                 { code: 0xfff9, description: null },
  XK_braille_dot_10:                { code: 0xfffa, description: null },
  XK_braille_blank:              { code: 0x1002800, description: "(\u2800) BRAILLE PATTERN BLANK" },
  XK_braille_dots_1:             { code: 0x1002801, description: "(\u2801) BRAILLE PATTERN DOTS-1" },
  XK_braille_dots_2:             { code: 0x1002802, description: "(\u2802) BRAILLE PATTERN DOTS-2" },
  XK_braille_dots_12:            { code: 0x1002803, description: "(\u2803) BRAILLE PATTERN DOTS-12" },
  XK_braille_dots_3:             { code: 0x1002804, description: "(\u2804) BRAILLE PATTERN DOTS-3" },
  XK_braille_dots_13:            { code: 0x1002805, description: "(\u2805) BRAILLE PATTERN DOTS-13" },
  XK_braille_dots_23:            { code: 0x1002806, description: "(\u2806) BRAILLE PATTERN DOTS-23" },
  XK_braille_dots_123:           { code: 0x1002807, description: "(\u2807) BRAILLE PATTERN DOTS-123" },
  XK_braille_dots_4:             { code: 0x1002808, description: "(\u2808) BRAILLE PATTERN DOTS-4" },
  XK_braille_dots_14:            { code: 0x1002809, description: "(\u2809) BRAILLE PATTERN DOTS-14" },
  XK_braille_dots_24:            { code: 0x100280a, description: "(\u280a) BRAILLE PATTERN DOTS-24" },
  XK_braille_dots_124:           { code: 0x100280b, description: "(\u280b) BRAILLE PATTERN DOTS-124" },
  XK_braille_dots_34:            { code: 0x100280c, description: "(\u280c) BRAILLE PATTERN DOTS-34" },
  XK_braille_dots_134:           { code: 0x100280d, description: "(\u280d) BRAILLE PATTERN DOTS-134" },
  XK_braille_dots_234:           { code: 0x100280e, description: "(\u280e) BRAILLE PATTERN DOTS-234" },
  XK_braille_dots_1234:          { code: 0x100280f, description: "(\u280f) BRAILLE PATTERN DOTS-1234" },
  XK_braille_dots_5:             { code: 0x1002810, description: "(\u2810) BRAILLE PATTERN DOTS-5" },
  XK_braille_dots_15:            { code: 0x1002811, description: "(\u2811) BRAILLE PATTERN DOTS-15" },
  XK_braille_dots_25:            { code: 0x1002812, description: "(\u2812) BRAILLE PATTERN DOTS-25" },
  XK_braille_dots_125:           { code: 0x1002813, description: "(\u2813) BRAILLE PATTERN DOTS-125" },
  XK_braille_dots_35:            { code: 0x1002814, description: "(\u2814) BRAILLE PATTERN DOTS-35" },
  XK_braille_dots_135:           { code: 0x1002815, description: "(\u2815) BRAILLE PATTERN DOTS-135" },
  XK_braille_dots_235:           { code: 0x1002816, description: "(\u2816) BRAILLE PATTERN DOTS-235" },
  XK_braille_dots_1235:          { code: 0x1002817, description: "(\u2817) BRAILLE PATTERN DOTS-1235" },
  XK_braille_dots_45:            { code: 0x1002818, description: "(\u2818) BRAILLE PATTERN DOTS-45" },
  XK_braille_dots_145:           { code: 0x1002819, description: "(\u2819) BRAILLE PATTERN DOTS-145" },
  XK_braille_dots_245:           { code: 0x100281a, description: "(\u281a) BRAILLE PATTERN DOTS-245" },
  XK_braille_dots_1245:          { code: 0x100281b, description: "(\u281b) BRAILLE PATTERN DOTS-1245" },
  XK_braille_dots_345:           { code: 0x100281c, description: "(\u281c) BRAILLE PATTERN DOTS-345" },
  XK_braille_dots_1345:          { code: 0x100281d, description: "(\u281d) BRAILLE PATTERN DOTS-1345" },
  XK_braille_dots_2345:          { code: 0x100281e, description: "(\u281e) BRAILLE PATTERN DOTS-2345" },
  XK_braille_dots_12345:         { code: 0x100281f, description: "(\u281f) BRAILLE PATTERN DOTS-12345" },
  XK_braille_dots_6:             { code: 0x1002820, description: "(\u2820) BRAILLE PATTERN DOTS-6" },
  XK_braille_dots_16:            { code: 0x1002821, description: "(\u2821) BRAILLE PATTERN DOTS-16" },
  XK_braille_dots_26:            { code: 0x1002822, description: "(\u2822) BRAILLE PATTERN DOTS-26" },
  XK_braille_dots_126:           { code: 0x1002823, description: "(\u2823) BRAILLE PATTERN DOTS-126" },
  XK_braille_dots_36:            { code: 0x1002824, description: "(\u2824) BRAILLE PATTERN DOTS-36" },
  XK_braille_dots_136:           { code: 0x1002825, description: "(\u2825) BRAILLE PATTERN DOTS-136" },
  XK_braille_dots_236:           { code: 0x1002826, description: "(\u2826) BRAILLE PATTERN DOTS-236" },
  XK_braille_dots_1236:          { code: 0x1002827, description: "(\u2827) BRAILLE PATTERN DOTS-1236" },
  XK_braille_dots_46:            { code: 0x1002828, description: "(\u2828) BRAILLE PATTERN DOTS-46" },
  XK_braille_dots_146:           { code: 0x1002829, description: "(\u2829) BRAILLE PATTERN DOTS-146" },
  XK_braille_dots_246:           { code: 0x100282a, description: "(\u282a) BRAILLE PATTERN DOTS-246" },
  XK_braille_dots_1246:          { code: 0x100282b, description: "(\u282b) BRAILLE PATTERN DOTS-1246" },
  XK_braille_dots_346:           { code: 0x100282c, description: "(\u282c) BRAILLE PATTERN DOTS-346" },
  XK_braille_dots_1346:          { code: 0x100282d, description: "(\u282d) BRAILLE PATTERN DOTS-1346" },
  XK_braille_dots_2346:          { code: 0x100282e, description: "(\u282e) BRAILLE PATTERN DOTS-2346" },
  XK_braille_dots_12346:         { code: 0x100282f, description: "(\u282f) BRAILLE PATTERN DOTS-12346" },
  XK_braille_dots_56:            { code: 0x1002830, description: "(\u2830) BRAILLE PATTERN DOTS-56" },
  XK_braille_dots_156:           { code: 0x1002831, description: "(\u2831) BRAILLE PATTERN DOTS-156" },
  XK_braille_dots_256:           { code: 0x1002832, description: "(\u2832) BRAILLE PATTERN DOTS-256" },
  XK_braille_dots_1256:          { code: 0x1002833, description: "(\u2833) BRAILLE PATTERN DOTS-1256" },
  XK_braille_dots_356:           { code: 0x1002834, description: "(\u2834) BRAILLE PATTERN DOTS-356" },
  XK_braille_dots_1356:          { code: 0x1002835, description: "(\u2835) BRAILLE PATTERN DOTS-1356" },
  XK_braille_dots_2356:          { code: 0x1002836, description: "(\u2836) BRAILLE PATTERN DOTS-2356" },
  XK_braille_dots_12356:         { code: 0x1002837, description: "(\u2837) BRAILLE PATTERN DOTS-12356" },
  XK_braille_dots_456:           { code: 0x1002838, description: "(\u2838) BRAILLE PATTERN DOTS-456" },
  XK_braille_dots_1456:          { code: 0x1002839, description: "(\u2839) BRAILLE PATTERN DOTS-1456" },
  XK_braille_dots_2456:          { code: 0x100283a, description: "(\u283a) BRAILLE PATTERN DOTS-2456" },
  XK_braille_dots_12456:         { code: 0x100283b, description: "(\u283b) BRAILLE PATTERN DOTS-12456" },
  XK_braille_dots_3456:          { code: 0x100283c, description: "(\u283c) BRAILLE PATTERN DOTS-3456" },
  XK_braille_dots_13456:         { code: 0x100283d, description: "(\u283d) BRAILLE PATTERN DOTS-13456" },
  XK_braille_dots_23456:         { code: 0x100283e, description: "(\u283e) BRAILLE PATTERN DOTS-23456" },
  XK_braille_dots_123456:        { code: 0x100283f, description: "(\u283f) BRAILLE PATTERN DOTS-123456" },
  XK_braille_dots_7:             { code: 0x1002840, description: "(\u2840) BRAILLE PATTERN DOTS-7" },
  XK_braille_dots_17:            { code: 0x1002841, description: "(\u2841) BRAILLE PATTERN DOTS-17" },
  XK_braille_dots_27:            { code: 0x1002842, description: "(\u2842) BRAILLE PATTERN DOTS-27" },
  XK_braille_dots_127:           { code: 0x1002843, description: "(\u2843) BRAILLE PATTERN DOTS-127" },
  XK_braille_dots_37:            { code: 0x1002844, description: "(\u2844) BRAILLE PATTERN DOTS-37" },
  XK_braille_dots_137:           { code: 0x1002845, description: "(\u2845) BRAILLE PATTERN DOTS-137" },
  XK_braille_dots_237:           { code: 0x1002846, description: "(\u2846) BRAILLE PATTERN DOTS-237" },
  XK_braille_dots_1237:          { code: 0x1002847, description: "(\u2847) BRAILLE PATTERN DOTS-1237" },
  XK_braille_dots_47:            { code: 0x1002848, description: "(\u2848) BRAILLE PATTERN DOTS-47" },
  XK_braille_dots_147:           { code: 0x1002849, description: "(\u2849) BRAILLE PATTERN DOTS-147" },
  XK_braille_dots_247:           { code: 0x100284a, description: "(\u284a) BRAILLE PATTERN DOTS-247" },
  XK_braille_dots_1247:          { code: 0x100284b, description: "(\u284b) BRAILLE PATTERN DOTS-1247" },
  XK_braille_dots_347:           { code: 0x100284c, description: "(\u284c) BRAILLE PATTERN DOTS-347" },
  XK_braille_dots_1347:          { code: 0x100284d, description: "(\u284d) BRAILLE PATTERN DOTS-1347" },
  XK_braille_dots_2347:          { code: 0x100284e, description: "(\u284e) BRAILLE PATTERN DOTS-2347" },
  XK_braille_dots_12347:         { code: 0x100284f, description: "(\u284f) BRAILLE PATTERN DOTS-12347" },
  XK_braille_dots_57:            { code: 0x1002850, description: "(\u2850) BRAILLE PATTERN DOTS-57" },
  XK_braille_dots_157:           { code: 0x1002851, description: "(\u2851) BRAILLE PATTERN DOTS-157" },
  XK_braille_dots_257:           { code: 0x1002852, description: "(\u2852) BRAILLE PATTERN DOTS-257" },
  XK_braille_dots_1257:          { code: 0x1002853, description: "(\u2853) BRAILLE PATTERN DOTS-1257" },
  XK_braille_dots_357:           { code: 0x1002854, description: "(\u2854) BRAILLE PATTERN DOTS-357" },
  XK_braille_dots_1357:          { code: 0x1002855, description: "(\u2855) BRAILLE PATTERN DOTS-1357" },
  XK_braille_dots_2357:          { code: 0x1002856, description: "(\u2856) BRAILLE PATTERN DOTS-2357" },
  XK_braille_dots_12357:         { code: 0x1002857, description: "(\u2857) BRAILLE PATTERN DOTS-12357" },
  XK_braille_dots_457:           { code: 0x1002858, description: "(\u2858) BRAILLE PATTERN DOTS-457" },
  XK_braille_dots_1457:          { code: 0x1002859, description: "(\u2859) BRAILLE PATTERN DOTS-1457" },
  XK_braille_dots_2457:          { code: 0x100285a, description: "(\u285a) BRAILLE PATTERN DOTS-2457" },
  XK_braille_dots_12457:         { code: 0x100285b, description: "(\u285b) BRAILLE PATTERN DOTS-12457" },
  XK_braille_dots_3457:          { code: 0x100285c, description: "(\u285c) BRAILLE PATTERN DOTS-3457" },
  XK_braille_dots_13457:         { code: 0x100285d, description: "(\u285d) BRAILLE PATTERN DOTS-13457" },
  XK_braille_dots_23457:         { code: 0x100285e, description: "(\u285e) BRAILLE PATTERN DOTS-23457" },
  XK_braille_dots_123457:        { code: 0x100285f, description: "(\u285f) BRAILLE PATTERN DOTS-123457" },
  XK_braille_dots_67:            { code: 0x1002860, description: "(\u2860) BRAILLE PATTERN DOTS-67" },
  XK_braille_dots_167:           { code: 0x1002861, description: "(\u2861) BRAILLE PATTERN DOTS-167" },
  XK_braille_dots_267:           { code: 0x1002862, description: "(\u2862) BRAILLE PATTERN DOTS-267" },
  XK_braille_dots_1267:          { code: 0x1002863, description: "(\u2863) BRAILLE PATTERN DOTS-1267" },
  XK_braille_dots_367:           { code: 0x1002864, description: "(\u2864) BRAILLE PATTERN DOTS-367" },
  XK_braille_dots_1367:          { code: 0x1002865, description: "(\u2865) BRAILLE PATTERN DOTS-1367" },
  XK_braille_dots_2367:          { code: 0x1002866, description: "(\u2866) BRAILLE PATTERN DOTS-2367" },
  XK_braille_dots_12367:         { code: 0x1002867, description: "(\u2867) BRAILLE PATTERN DOTS-12367" },
  XK_braille_dots_467:           { code: 0x1002868, description: "(\u2868) BRAILLE PATTERN DOTS-467" },
  XK_braille_dots_1467:          { code: 0x1002869, description: "(\u2869) BRAILLE PATTERN DOTS-1467" },
  XK_braille_dots_2467:          { code: 0x100286a, description: "(\u286a) BRAILLE PATTERN DOTS-2467" },
  XK_braille_dots_12467:         { code: 0x100286b, description: "(\u286b) BRAILLE PATTERN DOTS-12467" },
  XK_braille_dots_3467:          { code: 0x100286c, description: "(\u286c) BRAILLE PATTERN DOTS-3467" },
  XK_braille_dots_13467:         { code: 0x100286d, description: "(\u286d) BRAILLE PATTERN DOTS-13467" },
  XK_braille_dots_23467:         { code: 0x100286e, description: "(\u286e) BRAILLE PATTERN DOTS-23467" },
  XK_braille_dots_123467:        { code: 0x100286f, description: "(\u286f) BRAILLE PATTERN DOTS-123467" },
  XK_braille_dots_567:           { code: 0x1002870, description: "(\u2870) BRAILLE PATTERN DOTS-567" },
  XK_braille_dots_1567:          { code: 0x1002871, description: "(\u2871) BRAILLE PATTERN DOTS-1567" },
  XK_braille_dots_2567:          { code: 0x1002872, description: "(\u2872) BRAILLE PATTERN DOTS-2567" },
  XK_braille_dots_12567:         { code: 0x1002873, description: "(\u2873) BRAILLE PATTERN DOTS-12567" },
  XK_braille_dots_3567:          { code: 0x1002874, description: "(\u2874) BRAILLE PATTERN DOTS-3567" },
  XK_braille_dots_13567:         { code: 0x1002875, description: "(\u2875) BRAILLE PATTERN DOTS-13567" },
  XK_braille_dots_23567:         { code: 0x1002876, description: "(\u2876) BRAILLE PATTERN DOTS-23567" },
  XK_braille_dots_123567:        { code: 0x1002877, description: "(\u2877) BRAILLE PATTERN DOTS-123567" },
  XK_braille_dots_4567:          { code: 0x1002878, description: "(\u2878) BRAILLE PATTERN DOTS-4567" },
  XK_braille_dots_14567:         { code: 0x1002879, description: "(\u2879) BRAILLE PATTERN DOTS-14567" },
  XK_braille_dots_24567:         { code: 0x100287a, description: "(\u287a) BRAILLE PATTERN DOTS-24567" },
  XK_braille_dots_124567:        { code: 0x100287b, description: "(\u287b) BRAILLE PATTERN DOTS-124567" },
  XK_braille_dots_34567:         { code: 0x100287c, description: "(\u287c) BRAILLE PATTERN DOTS-34567" },
  XK_braille_dots_134567:        { code: 0x100287d, description: "(\u287d) BRAILLE PATTERN DOTS-134567" },
  XK_braille_dots_234567:        { code: 0x100287e, description: "(\u287e) BRAILLE PATTERN DOTS-234567" },
  XK_braille_dots_1234567:       { code: 0x100287f, description: "(\u287f) BRAILLE PATTERN DOTS-1234567" },
  XK_braille_dots_8:             { code: 0x1002880, description: "(\u2880) BRAILLE PATTERN DOTS-8" },
  XK_braille_dots_18:            { code: 0x1002881, description: "(\u2881) BRAILLE PATTERN DOTS-18" },
  XK_braille_dots_28:            { code: 0x1002882, description: "(\u2882) BRAILLE PATTERN DOTS-28" },
  XK_braille_dots_128:           { code: 0x1002883, description: "(\u2883) BRAILLE PATTERN DOTS-128" },
  XK_braille_dots_38:            { code: 0x1002884, description: "(\u2884) BRAILLE PATTERN DOTS-38" },
  XK_braille_dots_138:           { code: 0x1002885, description: "(\u2885) BRAILLE PATTERN DOTS-138" },
  XK_braille_dots_238:           { code: 0x1002886, description: "(\u2886) BRAILLE PATTERN DOTS-238" },
  XK_braille_dots_1238:          { code: 0x1002887, description: "(\u2887) BRAILLE PATTERN DOTS-1238" },
  XK_braille_dots_48:            { code: 0x1002888, description: "(\u2888) BRAILLE PATTERN DOTS-48" },
  XK_braille_dots_148:           { code: 0x1002889, description: "(\u2889) BRAILLE PATTERN DOTS-148" },
  XK_braille_dots_248:           { code: 0x100288a, description: "(\u288a) BRAILLE PATTERN DOTS-248" },
  XK_braille_dots_1248:          { code: 0x100288b, description: "(\u288b) BRAILLE PATTERN DOTS-1248" },
  XK_braille_dots_348:           { code: 0x100288c, description: "(\u288c) BRAILLE PATTERN DOTS-348" },
  XK_braille_dots_1348:          { code: 0x100288d, description: "(\u288d) BRAILLE PATTERN DOTS-1348" },
  XK_braille_dots_2348:          { code: 0x100288e, description: "(\u288e) BRAILLE PATTERN DOTS-2348" },
  XK_braille_dots_12348:         { code: 0x100288f, description: "(\u288f) BRAILLE PATTERN DOTS-12348" },
  XK_braille_dots_58:            { code: 0x1002890, description: "(\u2890) BRAILLE PATTERN DOTS-58" },
  XK_braille_dots_158:           { code: 0x1002891, description: "(\u2891) BRAILLE PATTERN DOTS-158" },
  XK_braille_dots_258:           { code: 0x1002892, description: "(\u2892) BRAILLE PATTERN DOTS-258" },
  XK_braille_dots_1258:          { code: 0x1002893, description: "(\u2893) BRAILLE PATTERN DOTS-1258" },
  XK_braille_dots_358:           { code: 0x1002894, description: "(\u2894) BRAILLE PATTERN DOTS-358" },
  XK_braille_dots_1358:          { code: 0x1002895, description: "(\u2895) BRAILLE PATTERN DOTS-1358" },
  XK_braille_dots_2358:          { code: 0x1002896, description: "(\u2896) BRAILLE PATTERN DOTS-2358" },
  XK_braille_dots_12358:         { code: 0x1002897, description: "(\u2897) BRAILLE PATTERN DOTS-12358" },
  XK_braille_dots_458:           { code: 0x1002898, description: "(\u2898) BRAILLE PATTERN DOTS-458" },
  XK_braille_dots_1458:          { code: 0x1002899, description: "(\u2899) BRAILLE PATTERN DOTS-1458" },
  XK_braille_dots_2458:          { code: 0x100289a, description: "(\u289a) BRAILLE PATTERN DOTS-2458" },
  XK_braille_dots_12458:         { code: 0x100289b, description: "(\u289b) BRAILLE PATTERN DOTS-12458" },
  XK_braille_dots_3458:          { code: 0x100289c, description: "(\u289c) BRAILLE PATTERN DOTS-3458" },
  XK_braille_dots_13458:         { code: 0x100289d, description: "(\u289d) BRAILLE PATTERN DOTS-13458" },
  XK_braille_dots_23458:         { code: 0x100289e, description: "(\u289e) BRAILLE PATTERN DOTS-23458" },
  XK_braille_dots_123458:        { code: 0x100289f, description: "(\u289f) BRAILLE PATTERN DOTS-123458" },
  XK_braille_dots_68:            { code: 0x10028a0, description: "(\u28a0) BRAILLE PATTERN DOTS-68" },
  XK_braille_dots_168:           { code: 0x10028a1, description: "(\u28a1) BRAILLE PATTERN DOTS-168" },
  XK_braille_dots_268:           { code: 0x10028a2, description: "(\u28a2) BRAILLE PATTERN DOTS-268" },
  XK_braille_dots_1268:          { code: 0x10028a3, description: "(\u28a3) BRAILLE PATTERN DOTS-1268" },
  XK_braille_dots_368:           { code: 0x10028a4, description: "(\u28a4) BRAILLE PATTERN DOTS-368" },
  XK_braille_dots_1368:          { code: 0x10028a5, description: "(\u28a5) BRAILLE PATTERN DOTS-1368" },
  XK_braille_dots_2368:          { code: 0x10028a6, description: "(\u28a6) BRAILLE PATTERN DOTS-2368" },
  XK_braille_dots_12368:         { code: 0x10028a7, description: "(\u28a7) BRAILLE PATTERN DOTS-12368" },
  XK_braille_dots_468:           { code: 0x10028a8, description: "(\u28a8) BRAILLE PATTERN DOTS-468" },
  XK_braille_dots_1468:          { code: 0x10028a9, description: "(\u28a9) BRAILLE PATTERN DOTS-1468" },
  XK_braille_dots_2468:          { code: 0x10028aa, description: "(\u28aa) BRAILLE PATTERN DOTS-2468" },
  XK_braille_dots_12468:         { code: 0x10028ab, description: "(\u28ab) BRAILLE PATTERN DOTS-12468" },
  XK_braille_dots_3468:          { code: 0x10028ac, description: "(\u28ac) BRAILLE PATTERN DOTS-3468" },
  XK_braille_dots_13468:         { code: 0x10028ad, description: "(\u28ad) BRAILLE PATTERN DOTS-13468" },
  XK_braille_dots_23468:         { code: 0x10028ae, description: "(\u28ae) BRAILLE PATTERN DOTS-23468" },
  XK_braille_dots_123468:        { code: 0x10028af, description: "(\u28af) BRAILLE PATTERN DOTS-123468" },
  XK_braille_dots_568:           { code: 0x10028b0, description: "(\u28b0) BRAILLE PATTERN DOTS-568" },
  XK_braille_dots_1568:          { code: 0x10028b1, description: "(\u28b1) BRAILLE PATTERN DOTS-1568" },
  XK_braille_dots_2568:          { code: 0x10028b2, description: "(\u28b2) BRAILLE PATTERN DOTS-2568" },
  XK_braille_dots_12568:         { code: 0x10028b3, description: "(\u28b3) BRAILLE PATTERN DOTS-12568" },
  XK_braille_dots_3568:          { code: 0x10028b4, description: "(\u28b4) BRAILLE PATTERN DOTS-3568" },
  XK_braille_dots_13568:         { code: 0x10028b5, description: "(\u28b5) BRAILLE PATTERN DOTS-13568" },
  XK_braille_dots_23568:         { code: 0x10028b6, description: "(\u28b6) BRAILLE PATTERN DOTS-23568" },
  XK_braille_dots_123568:        { code: 0x10028b7, description: "(\u28b7) BRAILLE PATTERN DOTS-123568" },
  XK_braille_dots_4568:          { code: 0x10028b8, description: "(\u28b8) BRAILLE PATTERN DOTS-4568" },
  XK_braille_dots_14568:         { code: 0x10028b9, description: "(\u28b9) BRAILLE PATTERN DOTS-14568" },
  XK_braille_dots_24568:         { code: 0x10028ba, description: "(\u28ba) BRAILLE PATTERN DOTS-24568" },
  XK_braille_dots_124568:        { code: 0x10028bb, description: "(\u28bb) BRAILLE PATTERN DOTS-124568" },
  XK_braille_dots_34568:         { code: 0x10028bc, description: "(\u28bc) BRAILLE PATTERN DOTS-34568" },
  XK_braille_dots_134568:        { code: 0x10028bd, description: "(\u28bd) BRAILLE PATTERN DOTS-134568" },
  XK_braille_dots_234568:        { code: 0x10028be, description: "(\u28be) BRAILLE PATTERN DOTS-234568" },
  XK_braille_dots_1234568:       { code: 0x10028bf, description: "(\u28bf) BRAILLE PATTERN DOTS-1234568" },
  XK_braille_dots_78:            { code: 0x10028c0, description: "(\u28c0) BRAILLE PATTERN DOTS-78" },
  XK_braille_dots_178:           { code: 0x10028c1, description: "(\u28c1) BRAILLE PATTERN DOTS-178" },
  XK_braille_dots_278:           { code: 0x10028c2, description: "(\u28c2) BRAILLE PATTERN DOTS-278" },
  XK_braille_dots_1278:          { code: 0x10028c3, description: "(\u28c3) BRAILLE PATTERN DOTS-1278" },
  XK_braille_dots_378:           { code: 0x10028c4, description: "(\u28c4) BRAILLE PATTERN DOTS-378" },
  XK_braille_dots_1378:          { code: 0x10028c5, description: "(\u28c5) BRAILLE PATTERN DOTS-1378" },
  XK_braille_dots_2378:          { code: 0x10028c6, description: "(\u28c6) BRAILLE PATTERN DOTS-2378" },
  XK_braille_dots_12378:         { code: 0x10028c7, description: "(\u28c7) BRAILLE PATTERN DOTS-12378" },
  XK_braille_dots_478:           { code: 0x10028c8, description: "(\u28c8) BRAILLE PATTERN DOTS-478" },
  XK_braille_dots_1478:          { code: 0x10028c9, description: "(\u28c9) BRAILLE PATTERN DOTS-1478" },
  XK_braille_dots_2478:          { code: 0x10028ca, description: "(\u28ca) BRAILLE PATTERN DOTS-2478" },
  XK_braille_dots_12478:         { code: 0x10028cb, description: "(\u28cb) BRAILLE PATTERN DOTS-12478" },
  XK_braille_dots_3478:          { code: 0x10028cc, description: "(\u28cc) BRAILLE PATTERN DOTS-3478" },
  XK_braille_dots_13478:         { code: 0x10028cd, description: "(\u28cd) BRAILLE PATTERN DOTS-13478" },
  XK_braille_dots_23478:         { code: 0x10028ce, description: "(\u28ce) BRAILLE PATTERN DOTS-23478" },
  XK_braille_dots_123478:        { code: 0x10028cf, description: "(\u28cf) BRAILLE PATTERN DOTS-123478" },
  XK_braille_dots_578:           { code: 0x10028d0, description: "(\u28d0) BRAILLE PATTERN DOTS-578" },
  XK_braille_dots_1578:          { code: 0x10028d1, description: "(\u28d1) BRAILLE PATTERN DOTS-1578" },
  XK_braille_dots_2578:          { code: 0x10028d2, description: "(\u28d2) BRAILLE PATTERN DOTS-2578" },
  XK_braille_dots_12578:         { code: 0x10028d3, description: "(\u28d3) BRAILLE PATTERN DOTS-12578" },
  XK_braille_dots_3578:          { code: 0x10028d4, description: "(\u28d4) BRAILLE PATTERN DOTS-3578" },
  XK_braille_dots_13578:         { code: 0x10028d5, description: "(\u28d5) BRAILLE PATTERN DOTS-13578" },
  XK_braille_dots_23578:         { code: 0x10028d6, description: "(\u28d6) BRAILLE PATTERN DOTS-23578" },
  XK_braille_dots_123578:        { code: 0x10028d7, description: "(\u28d7) BRAILLE PATTERN DOTS-123578" },
  XK_braille_dots_4578:          { code: 0x10028d8, description: "(\u28d8) BRAILLE PATTERN DOTS-4578" },
  XK_braille_dots_14578:         { code: 0x10028d9, description: "(\u28d9) BRAILLE PATTERN DOTS-14578" },
  XK_braille_dots_24578:         { code: 0x10028da, description: "(\u28da) BRAILLE PATTERN DOTS-24578" },
  XK_braille_dots_124578:        { code: 0x10028db, description: "(\u28db) BRAILLE PATTERN DOTS-124578" },
  XK_braille_dots_34578:         { code: 0x10028dc, description: "(\u28dc) BRAILLE PATTERN DOTS-34578" },
  XK_braille_dots_134578:        { code: 0x10028dd, description: "(\u28dd) BRAILLE PATTERN DOTS-134578" },
  XK_braille_dots_234578:        { code: 0x10028de, description: "(\u28de) BRAILLE PATTERN DOTS-234578" },
  XK_braille_dots_1234578:       { code: 0x10028df, description: "(\u28df) BRAILLE PATTERN DOTS-1234578" },
  XK_braille_dots_678:           { code: 0x10028e0, description: "(\u28e0) BRAILLE PATTERN DOTS-678" },
  XK_braille_dots_1678:          { code: 0x10028e1, description: "(\u28e1) BRAILLE PATTERN DOTS-1678" },
  XK_braille_dots_2678:          { code: 0x10028e2, description: "(\u28e2) BRAILLE PATTERN DOTS-2678" },
  XK_braille_dots_12678:         { code: 0x10028e3, description: "(\u28e3) BRAILLE PATTERN DOTS-12678" },
  XK_braille_dots_3678:          { code: 0x10028e4, description: "(\u28e4) BRAILLE PATTERN DOTS-3678" },
  XK_braille_dots_13678:         { code: 0x10028e5, description: "(\u28e5) BRAILLE PATTERN DOTS-13678" },
  XK_braille_dots_23678:         { code: 0x10028e6, description: "(\u28e6) BRAILLE PATTERN DOTS-23678" },
  XK_braille_dots_123678:        { code: 0x10028e7, description: "(\u28e7) BRAILLE PATTERN DOTS-123678" },
  XK_braille_dots_4678:          { code: 0x10028e8, description: "(\u28e8) BRAILLE PATTERN DOTS-4678" },
  XK_braille_dots_14678:         { code: 0x10028e9, description: "(\u28e9) BRAILLE PATTERN DOTS-14678" },
  XK_braille_dots_24678:         { code: 0x10028ea, description: "(\u28ea) BRAILLE PATTERN DOTS-24678" },
  XK_braille_dots_124678:        { code: 0x10028eb, description: "(\u28eb) BRAILLE PATTERN DOTS-124678" },
  XK_braille_dots_34678:         { code: 0x10028ec, description: "(\u28ec) BRAILLE PATTERN DOTS-34678" },
  XK_braille_dots_134678:        { code: 0x10028ed, description: "(\u28ed) BRAILLE PATTERN DOTS-134678" },
  XK_braille_dots_234678:        { code: 0x10028ee, description: "(\u28ee) BRAILLE PATTERN DOTS-234678" },
  XK_braille_dots_1234678:       { code: 0x10028ef, description: "(\u28ef) BRAILLE PATTERN DOTS-1234678" },
  XK_braille_dots_5678:          { code: 0x10028f0, description: "(\u28f0) BRAILLE PATTERN DOTS-5678" },
  XK_braille_dots_15678:         { code: 0x10028f1, description: "(\u28f1) BRAILLE PATTERN DOTS-15678" },
  XK_braille_dots_25678:         { code: 0x10028f2, description: "(\u28f2) BRAILLE PATTERN DOTS-25678" },
  XK_braille_dots_125678:        { code: 0x10028f3, description: "(\u28f3) BRAILLE PATTERN DOTS-125678" },
  XK_braille_dots_35678:         { code: 0x10028f4, description: "(\u28f4) BRAILLE PATTERN DOTS-35678" },
  XK_braille_dots_135678:        { code: 0x10028f5, description: "(\u28f5) BRAILLE PATTERN DOTS-135678" },
  XK_braille_dots_235678:        { code: 0x10028f6, description: "(\u28f6) BRAILLE PATTERN DOTS-235678" },
  XK_braille_dots_1235678:       { code: 0x10028f7, description: "(\u28f7) BRAILLE PATTERN DOTS-1235678" },
  XK_braille_dots_45678:         { code: 0x10028f8, description: "(\u28f8) BRAILLE PATTERN DOTS-45678" },
  XK_braille_dots_145678:        { code: 0x10028f9, description: "(\u28f9) BRAILLE PATTERN DOTS-145678" },
  XK_braille_dots_245678:        { code: 0x10028fa, description: "(\u28fa) BRAILLE PATTERN DOTS-245678" },
  XK_braille_dots_1245678:       { code: 0x10028fb, description: "(\u28fb) BRAILLE PATTERN DOTS-1245678" },
  XK_braille_dots_345678:        { code: 0x10028fc, description: "(\u28fc) BRAILLE PATTERN DOTS-345678" },
  XK_braille_dots_1345678:       { code: 0x10028fd, description: "(\u28fd) BRAILLE PATTERN DOTS-1345678" },
  XK_braille_dots_2345678:       { code: 0x10028fe, description: "(\u28fe) BRAILLE PATTERN DOTS-2345678" },
  XK_braille_dots_12345678:      { code: 0x10028ff, description: "(\u28ff) BRAILLE PATTERN DOTS-12345678" },


/*
 * Sinhala (http://unicode.org/charts/PDF/U0D80.pdf)
 * http://www.nongnu.org/sinhala/doc/transliteration/sinhala-transliteration_6.html
 */

// Group XK_SINHALA
  XK_Sinh_ng:            { code: 0x1000d82, description: "(\u0D82) SINHALA ANUSVARAYA" },
  XK_Sinh_h2:            { code: 0x1000d83, description: "(\u0D83) SINHALA VISARGAYA" },
  XK_Sinh_a:             { code: 0x1000d85, description: "(\u0D85) SINHALA AYANNA" },
  XK_Sinh_aa:            { code: 0x1000d86, description: "(\u0D86) SINHALA AAYANNA" },
  XK_Sinh_ae:            { code: 0x1000d87, description: "(\u0D87) SINHALA AEYANNA" },
  XK_Sinh_aee:           { code: 0x1000d88, description: "(\u0D88) SINHALA AEEYANNA" },
  XK_Sinh_i:             { code: 0x1000d89, description: "(\u0D89) SINHALA IYANNA" },
  XK_Sinh_ii:            { code: 0x1000d8a, description: "(\u0D8A) SINHALA IIYANNA" },
  XK_Sinh_u:             { code: 0x1000d8b, description: "(\u0D8B) SINHALA UYANNA" },
  XK_Sinh_uu:            { code: 0x1000d8c, description: "(\u0D8C) SINHALA UUYANNA" },
  XK_Sinh_ri:            { code: 0x1000d8d, description: "(\u0D8D) SINHALA IRUYANNA" },
  XK_Sinh_rii:           { code: 0x1000d8e, description: "(\u0D8E) SINHALA IRUUYANNA" },
  XK_Sinh_lu:            { code: 0x1000d8f, description: "(\u0D8F) SINHALA ILUYANNA" },
  XK_Sinh_luu:           { code: 0x1000d90, description: "(\u0D90) SINHALA ILUUYANNA" },
  XK_Sinh_e:             { code: 0x1000d91, description: "(\u0D91) SINHALA EYANNA" },
  XK_Sinh_ee:            { code: 0x1000d92, description: "(\u0D92) SINHALA EEYANNA" },
  XK_Sinh_ai:            { code: 0x1000d93, description: "(\u0D93) SINHALA AIYANNA" },
  XK_Sinh_o:             { code: 0x1000d94, description: "(\u0D94) SINHALA OYANNA" },
  XK_Sinh_oo:            { code: 0x1000d95, description: "(\u0D95) SINHALA OOYANNA" },
  XK_Sinh_au:            { code: 0x1000d96, description: "(\u0D96) SINHALA AUYANNA" },
  XK_Sinh_ka:            { code: 0x1000d9a, description: "(\u0D9A) SINHALA KAYANNA" },
  XK_Sinh_kha:           { code: 0x1000d9b, description: "(\u0D9B) SINHALA MAHA. KAYANNA" },
  XK_Sinh_ga:            { code: 0x1000d9c, description: "(\u0D9C) SINHALA GAYANNA" },
  XK_Sinh_gha:           { code: 0x1000d9d, description: "(\u0D9D) SINHALA MAHA. GAYANNA" },
  XK_Sinh_ng2:           { code: 0x1000d9e, description: "(\u0D9E) SINHALA KANTAJA NAASIKYAYA" },
  XK_Sinh_nga:           { code: 0x1000d9f, description: "(\u0D9F) SINHALA SANYAKA GAYANNA" },
  XK_Sinh_ca:            { code: 0x1000da0, description: "(\u0DA0) SINHALA CAYANNA" },
  XK_Sinh_cha:           { code: 0x1000da1, description: "(\u0DA1) SINHALA MAHA. CAYANNA" },
  XK_Sinh_ja:            { code: 0x1000da2, description: "(\u0DA2) SINHALA JAYANNA" },
  XK_Sinh_jha:           { code: 0x1000da3, description: "(\u0DA3) SINHALA MAHA. JAYANNA" },
  XK_Sinh_nya:           { code: 0x1000da4, description: "(\u0DA4) SINHALA TAALUJA NAASIKYAYA" },
  XK_Sinh_jnya:          { code: 0x1000da5, description: "(\u0DA5) SINHALA TAALUJA SANYOOGA NAASIKYAYA" },
  XK_Sinh_nja:           { code: 0x1000da6, description: "(\u0DA6) SINHALA SANYAKA JAYANNA" },
  XK_Sinh_tta:           { code: 0x1000da7, description: "(\u0DA7) SINHALA TTAYANNA" },
  XK_Sinh_ttha:          { code: 0x1000da8, description: "(\u0DA8) SINHALA MAHA. TTAYANNA" },
  XK_Sinh_dda:           { code: 0x1000da9, description: "(\u0DA9) SINHALA DDAYANNA" },
  XK_Sinh_ddha:          { code: 0x1000daa, description: "(\u0DAA) SINHALA MAHA. DDAYANNA" },
  XK_Sinh_nna:           { code: 0x1000dab, description: "(\u0DAB) SINHALA MUURDHAJA NAYANNA" },
  XK_Sinh_ndda:          { code: 0x1000dac, description: "(\u0DAC) SINHALA SANYAKA DDAYANNA" },
  XK_Sinh_tha:           { code: 0x1000dad, description: "(\u0DAD) SINHALA TAYANNA" },
  XK_Sinh_thha:          { code: 0x1000dae, description: "(\u0DAE) SINHALA MAHA. TAYANNA" },
  XK_Sinh_dha:           { code: 0x1000daf, description: "(\u0DAF) SINHALA DAYANNA" },
  XK_Sinh_dhha:          { code: 0x1000db0, description: "(\u0DB0) SINHALA MAHA. DAYANNA" },
  XK_Sinh_na:            { code: 0x1000db1, description: "(\u0DB1) SINHALA DANTAJA NAYANNA" },
  XK_Sinh_ndha:          { code: 0x1000db3, description: "(\u0DB3) SINHALA SANYAKA DAYANNA" },
  XK_Sinh_pa:            { code: 0x1000db4, description: "(\u0DB4) SINHALA PAYANNA" },
  XK_Sinh_pha:           { code: 0x1000db5, description: "(\u0DB5) SINHALA MAHA. PAYANNA" },
  XK_Sinh_ba:            { code: 0x1000db6, description: "(\u0DB6) SINHALA BAYANNA" },
  XK_Sinh_bha:           { code: 0x1000db7, description: "(\u0DB7) SINHALA MAHA. BAYANNA" },
  XK_Sinh_ma:            { code: 0x1000db8, description: "(\u0DB8) SINHALA MAYANNA" },
  XK_Sinh_mba:           { code: 0x1000db9, description: "(\u0DB9) SINHALA AMBA BAYANNA" },
  XK_Sinh_ya:            { code: 0x1000dba, description: "(\u0DBA) SINHALA YAYANNA" },
  XK_Sinh_ra:            { code: 0x1000dbb, description: "(\u0DBB) SINHALA RAYANNA" },
  XK_Sinh_la:            { code: 0x1000dbd, description: "(\u0DBD) SINHALA DANTAJA LAYANNA" },
  XK_Sinh_va:            { code: 0x1000dc0, description: "(\u0DC0) SINHALA VAYANNA" },
  XK_Sinh_sha:           { code: 0x1000dc1, description: "(\u0DC1) SINHALA TAALUJA SAYANNA" },
  XK_Sinh_ssha:          { code: 0x1000dc2, description: "(\u0DC2) SINHALA MUURDHAJA SAYANNA" },
  XK_Sinh_sa:            { code: 0x1000dc3, description: "(\u0DC3) SINHALA DANTAJA SAYANNA" },
  XK_Sinh_ha:            { code: 0x1000dc4, description: "(\u0DC4) SINHALA HAYANNA" },
  XK_Sinh_lla:           { code: 0x1000dc5, description: "(\u0DC5) SINHALA MUURDHAJA LAYANNA" },
  XK_Sinh_fa:            { code: 0x1000dc6, description: "(\u0DC6) SINHALA FAYANNA" },
  XK_Sinh_al:            { code: 0x1000dca, description: "(\u0DCA) SINHALA AL-LAKUNA" },
  XK_Sinh_aa2:           { code: 0x1000dcf, description: "(\u0DCF) SINHALA AELA-PILLA" },
  XK_Sinh_ae2:           { code: 0x1000dd0, description: "(\u0DD0) SINHALA AEDA-PILLA" },
  XK_Sinh_aee2:          { code: 0x1000dd1, description: "(\u0DD1) SINHALA DIGA AEDA-PILLA" },
  XK_Sinh_i2:            { code: 0x1000dd2, description: "(\u0DD2) SINHALA IS-PILLA" },
  XK_Sinh_ii2:           { code: 0x1000dd3, description: "(\u0DD3) SINHALA DIGA IS-PILLA" },
  XK_Sinh_u2:            { code: 0x1000dd4, description: "(\u0DD4) SINHALA PAA-PILLA" },
  XK_Sinh_uu2:           { code: 0x1000dd6, description: "(\u0DD6) SINHALA DIGA PAA-PILLA" },
  XK_Sinh_ru2:           { code: 0x1000dd8, description: "(\u0DD8) SINHALA GAETTA-PILLA" },
  XK_Sinh_e2:            { code: 0x1000dd9, description: "(\u0DD9) SINHALA KOMBUVA" },
  XK_Sinh_ee2:           { code: 0x1000dda, description: "(\u0DDA) SINHALA DIGA KOMBUVA" },
  XK_Sinh_ai2:           { code: 0x1000ddb, description: "(\u0DDB) SINHALA KOMBU DEKA" },
  XK_Sinh_o2:            { code: 0x1000ddc, description: "(\u0DDC) SINHALA KOMBUVA HAA AELA-PILLA" },
  XK_Sinh_oo2:           { code: 0x1000ddd, description: "(\u0DDD) SINHALA KOMBUVA HAA DIGA AELA-PILLA" },
  XK_Sinh_au2:           { code: 0x1000dde, description: "(\u0DDE) SINHALA KOMBUVA HAA GAYANUKITTA" },
  XK_Sinh_lu2:           { code: 0x1000ddf, description: "(\u0DDF) SINHALA GAYANUKITTA" },
  XK_Sinh_ruu2:          { code: 0x1000df2, description: "(\u0DF2) SINHALA DIGA GAETTA-PILLA" },
  XK_Sinh_luu2:          { code: 0x1000df3, description: "(\u0DF3) SINHALA DIGA GAYANUKITTA" },
  XK_Sinh_kunddaliya:    { code: 0x1000df4, description: "(\u0DF4) SINHALA KUNDDALIYA" },


  NoSymbol: 0
};};
BundleModuleCode['x11/core/gcfunction']=function (module,exports,global,process){
/*
 * GCFunction named shortcuts
 */

module.exports = {
  GXclear        : 0x0,
  GXand          : 0x1,
  GXandReverse   : 0x2,
  GXcopy         : 0x3,
  GXandInverted  : 0x4,
  GXnoop         : 0x5,
  GXxor          : 0x6,
  GXor           : 0x7,
  GXnor          : 0x8,
  GXequiv        : 0x9,
  GXinvert       : 0xa,
  GXorReverse    : 0xb,
  GXcopyInverted : 0xc,
  GXorInverted   : 0xd,
  GXnand         : 0xe,
  GXset          : 0xf
};};
BundleModuleCode['x11/core/xserver']=function (module,exports,global,process){
"use strict";
var util = Require('util');
var net = Require('net');
var PackStream = Require('x11/core/unpackstream');
var EventEmitter = Require('events').EventEmitter;

function XServer(servsock, params)
{
     var server = this;
     EventEmitter.call(this);
     servsock.on('connection', function(stream) {
         var cli = new XServerClientConnection(stream, params);
         server.emit('connection', cli);
     });
}
util.inherits(XServer, EventEmitter);

function XServerClientConnection(stream, params)
{
     EventEmitter.call(this);
     this.params = params;
     var serv = this;
     serv.stream = stream;
     serv.pack_stream = new PackStream();
     serv.pack_stream.on('data', function( data ) {
         serv.stream.write(data);
     });
     stream.on('data', function( data ) {
         serv.pack_stream.write(data);
     });
     serv.sequence = 0;
     serv.readClientHandshake();
}
util.inherits(XServerClientConnection, EventEmitter);

XServerClientConnection.prototype.readClientHandshake = function()
{
    var serv = this;
    var hello = {};
    serv.pack_stream.unpackTo(hello,
        [
            'C byteOrder',
            'x',
            'S protocolMajor',
            'S protocolMinor',
            'S authTypeLength',
            'S authDataLength',
            'x',
            'x'
        ],
        function() {
            console.log(hello);
            serv.pack_stream.get(hello.authTypeLength, function(authType) {
                serv.pack_stream.get(hello.authDataLength, function(authData) {
                    serv.byteOrder = hello.byteOrder;
                    serv.protocolMajor = hello.protocolMajor;
                    serv.protocolMinor = hello.protocolMinor;
                    serv.checkAuth(authType.toString('ascii'), authData);
                });
            });
        }
    );
}

XServerClientConnection.prototype.checkAuth = function(authType, authData)
{
    var serv = this;
    // ignore check for now;
    // protocol page 140: add code for reject & ask additional info
    console.log('check auth');
    console.log([authType, authData.toString()]);

    // auth ok: reply with list of screens, visuals, root window info etc
    var stream = serv.pack_stream;

/*
   xquartz exemple reply

{ major: 11,
  minor: 0,
  xlen: 537, (bytes in whole header)
  release: 11300000,
  resource_base: 6291456,
  resource_mask: 2097151,
  motion_buffer_size: 256,
  vlen: 20,
  max_request_length: 65535,
  screen_num: 1,
  format_num: 7,
  image_byte_order: 0,
  bitmap_bit_order: 0,
  bitmap_scanline_unit: 32,
  bitmap_scanline_pad: 32,
  min_keycode: 8,
  max_keycode: 255 }

per screen:
screen: { root: 226,
  default_colormap: 33,
  white_pixel: 16777215,
  black_pixel: 0,
  input_masks: 1703936,
  pixel_width: 3286,
  pixel_height: 1058,
  mm_width: 866,
  mm_height: 277,
  min_installed_maps: 1,
  max_installed_maps: 1,
  root_visual: 34,
  root_depth: 24,
  backing_stores: 0,
  num_depths: 7 }
17              'L root',¬
 18              'L default_colormap',¬
 19              'L white_pixel',¬
 20              'L black_pixel',¬
 21              'L input_masks',¬
 22              'S pixel_width',¬
 23              'S pixel_height',¬
 24              'S mm_width',¬
 25              'S mm_height',¬
 26              'S min_installed_maps',¬
 27              'S max_installed_maps',¬
 28              'L root_visual',¬
 29              'C root_depth',¬
 30              'C backing_stores',¬
 31              'C root_depth',¬
 32              'C num_depths'¬


per depth:
  depth: [ 24, 80 ] (depth, num visuals)

per visual:
  visual { vid: 146,
  class: 4,
  bits_per_rgb: 8,
  map_ent: 256,
  red_mask: 16711680,
  green_mask: 65280,
  blue_mask: 255 }

*/

    //stream.pack('')
    //  [2, reason,
    //serv.pack_stream.unpack('C', function(isShared) {
    //    console.log([isShared]);
    //    serv.writeServerInit();
    //});
    //
    var hello = Require('fs').readFileSync('hello1.bin');
    stream.pack('CxSSSa', [1, 11, 0, hello.length/4, hello]);
    stream.flush();
    serv.expectMessage();
}

XServerClientConnection.prototype.expectMessage = function()
{
    var serv = this;
    console.log('expecting messages');
    serv.pack_stream.unpack('CCS', function(header) {
        serv.sequence++;
        console.log('Request:', header[0]);
        console.log('Extra:', header[1]);
        console.log('length:', header[2]);
        serv.pack_stream.get((header[2]-1)*4, function(reqBody) {

          console.log('BODY:', reqBody, reqBody.toString());

          if (header[0] == 98) {
            serv.pack_stream.pack('CCSLCCCCLLLLL', [1, 0, serv.sequence, 0, 1, 134, 0, 0, 0, 0, 0, 0, 0, 0]);
            serv.pack_stream.flush();
          } else if (header[0] == 134) {
            console.log('ENABLE BIG REQ');
            serv.pack_stream.pack('CCSLLLLLLLL', [1, 0, serv.sequence, 0, 10000000, 0, 0, 0, 0, 0, 0 ]);
            serv.pack_stream.flush();
          }
          serv.expectMessage();

        });
    });
}

module.exports.createServer = function(options, onconnect) {
    if (typeof(options) === 'function') {
        onconnect = options;
        options = {};
    }
    var s = net.createServer();
    var serv = new XServer(s, options);
    serv.on('connect', onconnect);
    return s;
}

//module.exports.createServer(6002) ;
//function(client) {
//});
};
BundleModuleCode['x11/core/pixmap']=function (module,exports,global,process){
var fs = require('fs');


function PixmapFromFile (path,options){
  if(!options && typeof path == "object"){
    this.options = path;
    path = null;
  }else{
    this.options = options||{};
  }
  if(path){
    return this.parse(fs.readFileSync(path, {encoding:"utf-8"}));
  }
}
/**
 *
 * @param  {[type]}   data     utf-8 file data
 * @param  {Function} callback optionnal callback.
 */
PixmapFromFile.prototype.parse = function (data) {
  if(!/^\/\*\s*XPM\s*\*\/$/m.test(data)){
    throw new Error("Not an XPM file");
  }
  data=data.replace(/\/\*[^\*]*\*\/\n/g,'');
  var size = this.getSize(data);
  var content = this.getArray(data,size);
  var colors = this.mapColors(data,size);
  size.data = this.toBuffer(colors,content,size);
  return size;
};
PixmapFromFile.prototype.getSize = function(data){
  var match = /{\n?"([0-9\s]*)\s?"/.exec(data);
  if(!match){
    console.log(data);
    throw new Error("can't parse size infos");
  }
  var values = match[1].split(" ").map(function(i){return parseInt(i)});
  return {width:values[0],height:values[1],count:values[2],length:values[3]}
}

PixmapFromFile.prototype.getArray = function(data,size){
  //var reg = new RegExp('"((?!(?:[0-9]+\\s?){4}).{'+size.length+'}(?!\\sc\\s).*)"',"g"); //Works also but much less simple
  var reg = new RegExp('"(.{'+size.width*size.length+'})"',"g");
  var res;
  var rows = [];
  while((res = reg.exec(data)) !== null){
    rows.push(res[1]);
  }
  if(rows.length != size.height){
    throw new Error("found : "+rows.length+" rows. Should have found :"+size.height+" rows.");
  }
  return rows;
}
// return RGBA color
PixmapFromFile.prototype.mapColors = function(content,size){
  var reg = new RegExp('"(.' + ((size.length > 1)? "{"+(size.length)+"}" : "") + ")\\s+c\\s+#?(None|black|white|gray100|[0-9a-fA-F]{6})\"","gm");
  var res;
  var colors = {};
  while((res = reg.exec(content)) !== null){
    if(res[2] === "None" || res[2] === "black"){
      colors[res[1]] = "00000000"
    } else if(res[2] === "white" || res[2] === "gray100"){
      colors[res[1]] = "FFFFFFFF"
    } else{
        colors[res[1]] = res[2]+"FF";//RGBA
    }

  }
  if(Object.keys(colors).length != size.count){
    throw new Error("found : "+Object.keys(colors).length+" colors. Should have found :"+size.count+" colors.");
  }
  return colors;
}

PixmapFromFile.prototype.toBuffer = function (colors,content,size) {
  var buf = new Buffer(size.width*size.height*4);
  var offset = 0, byte,color;
  var copy;
  if( !this.options.format || this.options.format.toUpperCase() === "BGRA"){
    copy = this.copyBGRABuffer;
  }else if(this.options.format && this.options.format.toUpperCase() === "RGBA"){
    copy = this.copyRGBABuffer;
  }else{
    throw new Error("invalid format option : ",this.options.format," valid values are BGRA (default) or RGBA")
  }
  content.forEach(function(row){
    //console.log("parsing : ",row)
    while(row && row.length >0){
      var code = row.slice(0,size.length);
      row = row.slice(size.length);
      if(!colors[code]){
        throw new Error("unknown color : ",code);
      }
      offset = copy(buf,offset,colors[code]);;
    }
  });
  return buf;
};

/**
 * Takes an array of rows. Each char/sequence represents a colored pixel
 * @param  {[type]} content [description]
 * @return {Buffer}         A 1d array of pixels in RGBA
 */
PixmapFromFile.prototype.copyBGRABuffer = function(buf, offset, color){
  [4,2,0,6].forEach(function(i){
    buf.writeUInt8(parseInt(color[i]+color[i+1],16),offset);
    offset ++;
  });
  return offset;
}
PixmapFromFile.prototype.copyRGBABuffer = function(buf, offset, color){
  buf.writeUInt32BE(parseInt(color,16),offset);
  return offset+4;
}
PixmapFromFile.prototype.open = function(path,callback){
  var self = this;
   
  if (callback) fs.readFile(path, {encoding:"utf-8"}, function(err,data){
    if(err){
      return callback(err);
    }else{
      callback(null,self.parse(data));
    }
  }); else {
    var data = fs.readFileSync(path, {encoding:"utf-8"});
    return self.parse(data);
  }


}

module.exports = PixmapFromFile;
};
BundleModuleCode['plugins/x11/win/windows']=function (module,exports,global,process){
/**
 **      ==============================
 **       O           O      O   OOOO
 **       O           O     O O  O   O
 **       O           O     O O  O   O
 **       OOOO   OOOO O     OOO  OOOO
 **       O   O       O    O   O O   O
 **       O   O       O    O   O O   O
 **       OOOO        OOOO O   O OOOO
 **      ==============================
 **      Dr. Stefan Bosse http://www.bsslab.de
 **
 **      COPYRIGHT: THIS SOFTWARE, EXECUTABLE AND SOURCE CODE IS OWNED
 **                 BY THE AUTHOR(S).
 **                 THIS SOURCE CODE MAY NOT BE COPIED, EXTRACTED,
 **                 MODIFIED, OR OTHERWISE USED IN A CONTEXT
 **                 OUTSIDE OF THE SOFTWARE SYSTEM.
 **
 **    $AUTHORS:     Stefan Bosse
 **    $INITIAL:     (C) 2006-2021 bLAB
 **    $CREATED:     1-10-17 by sbosse.
 **    $VERSION:     1.8.2
 **
 **    $INFO:
 **
 **  X11/Widget library - can be embedded in any application
 **
 ** Create root display and one window:
 ** var root = windows({});
 **
 ** root.start(function (err) {
 **     console.log('Windows created');
 **   });
 ** var win1 = root.window({width:200,height:300}, function () {console.log('Window 1 exposed')});
 **
 ** Add and modify drawing objects (shapes):
 **
 ** win1.add({..});
 ** win1.modify('id',{..});
 ** 
 ** Add event listener:
 **
 ** win1.on('keypress',function (key) {});
 **
 ** Drawing objects:
 **
 **  (at least line or fill attribute must be specified)
 **
 **  Rectangle: 
 **  (x,y coordinates: default center point or with align='center')
 **  (x,y coordinates: left upper corner with align='left')
 **  {id,shape='rect',width,height,x,y,align?
 **   line?: {width,color:'black'|..},
 **   fill?: {color:'black'|..}}
 **
 **  Triangle: 
 **  (x,y coordinates: center point)
 **  {id,shape='rect',width,height,angle?,x,y,
 **   line?: {width,color:'black'|..},
 **   fill?: {color:'black'|..}}
 **
 **  Circle/Ellipse: 
 **  (x,y coordinates: center point)
 **  {id,shape='circle',width,height,x,y,
 **   line?: {width,color:'black'|..},
 **   fill?: {color: 'black'|..}}
 **
 **  Line/Polyline: 
 **  (x,y: absolute coordinates)
 **  {id,shape='line',points:[{x,y},..],
 **   line?: {width,style?,color:'black'|..}}
 **
 **  Text: 
 **  (x,y coordinates: default center point or with align='center')
 **  (x,y coordinates: left upper corner with align='left')
 **  {id,shape='text',x,y,text,style?:{color,align,font,size}}
 **
 **  Button: 
 **  (x,y coordinates: default center point or with align='center')
 **  (x,y coordinates: left upper corner with align='left')
 **  {id,shape='button',width,height,x,y,
 **   label:{text,..},handler:function,
 **   line?: {width,color:'black'|..},
 **   fill?: {color:'black'|..}}
 **
 **
 **  Pixmap: 
 **  var Pixmap = new X11.pixmap();
 +*  var pixmap = Pixmap.open(pathtofile); // pixmap.data, width, height
 **  (x,y coordinates: default center point or with align='center')
 **  (x,y coordinates: left upper corner with align='left')
 **  {id,shape='pixmap',width,height,x,y,
 **   line?: {width,color:'black'|..},
 **   fill?: {color:'black'|..},
 **   data: data}
 **
 ** All shape can be interactive via the onclick:function options attribute.
 ** The sensitive click region can be extended by the extendClick:number options attribute.
 **
 ** Shapes can be modified after drawing:
 **
 ** win.modify(shapeid,{label:{text:string,..}})
 **
 **    $ENDOFINFO
*/


var X11       = Require('x11/core/x11');
var Plot      = Require('x11/win/plot');
var Comp      = Require('com/compat');
var KeyPress  = X11.eventMask.KeyPress;
var ButtonPress = X11.eventMask.ButtonPress;
var Exposure  = X11.eventMask.Exposure;
var PointerMotion = X11.eventMask.PointerMotion;
var Rtree     = Require('x11/win/rtree');

function rotate(cx, cy, x, y, angle) {
    var radians = (Math.PI / 180) * angle,
        cos = Math.cos(radians),
        sin = Math.sin(radians),
        nx = (cos * (x - cx)) + (sin * (y - cy)) + cx,
        ny = (cos * (y - cy)) - (sin * (x - cx)) + cy;
    return [nx, ny];
}
function flatten (points) {
  return points.reduce(function (acc, val) { return acc.concat(val)},[]);;
}
// Can be extended!
var color_palette = {
  beig:[245,245,220],
  black:[0,0,0],
  blue:[0,0,255],
  brown:[165,42,42],
  coral:[255,127,80],
  crimson:[220,20,60],
  cyan:[0,255,255],
  gold:[255,215,0],
  gray:[128,128,128],
  gray5:[242,242,242],
  gray10:[230,230,230],
  gray15:[216,216,216],
  gray20:[204,204,204],
  gray25:[191,191,191],
  gray30:[178,178,178],
  gray35:[165,165,165],
  gray40:[152,152,152],
  gray45:[140,140,140],
  gray50:[128,128,128],
  gray55:[114,114,114],
  gray60:[102,102,102],
  gray65:[89,89,89],
  gray70:[76,76,76],
  gray75:[63,63,63],
  gray80:[51,51,51],
  gray50:[38,38,38],
  gray90:[25,25,25],
  gray95:[12,12,12],
  green:[0,200,0],
  indigo:[75,0,130],
  lime:[0,255,0],
  magenta:[255,0,255],
  maroon:[128,0,0],
  navy:[0,0,128],
  olive:[128,128,0],
  orange:[255,179,0],
  peru:[205,133,63],
  pink:[255,192,203],
  purple:[128,0,128],
  red:[255,0,0],
  salmon:[250,128,114],
  sienna:[160,82,45],
  silver:[192,192,192],
  tan:[210,180,140],
  turquoise:[64,224,208],
  violet:[238,130,238],
  white:[255,255,255],
  yellow:[255,242,0],
}
function update(dst,src) {
  for(var a in src) {
    if (typeof dst[a] == 'object' && typeof src[a] == 'object')
      update(dst[a],src[a]);
    else
      dst[a]=src[a];
  }    
}

function modifies(attr,shape) {
  for(var a in attr) {
    if (typeof attr[a] == 'object' && typeof shape[a] == 'object')
      return modifies(attr[a],shape[a]);
    else if (attr[a] != shape[a]) return true;
  }
  return false;
}

/*******************
** RTREE Object
*******************/

// rtree revision 2 using HP rtree
function rtree(w,h) {
  if (!(this instanceof rtree)) return new rtree(w,h);
  this.bbox={x0:0,y0:0,x1:w,y1:h};
  this.root=Rtree();
  this.within=this.root.within;
  this.bboxGroup=this.root.BBoxGroup;
  this.equal=this.root.equal;
} 
// add shape
rtree.prototype.add = function (shape) {
  var bbox=this.bboxOf(shape);
  shape.bbox=bbox;
  this.root.insert({x0:bbox.x0,y0:bbox.y0,x1:bbox.x1,y1:bbox.y1,shape:shape});
}
// Compute bbox of a shape
rtree.prototype.bboxOf = function (shape) {
  var ox0=0,oy0=0,x0=0,y0=0,x1=0,y1=0,i,p,first=true;
  switch (shape.shape) {
    case 'rect':
    case 'circle':
    case 'triangle':
    case 'button':
    case 'pixmap':
      if (!shape.align || shape.align=='center') ox0=shape.width/2,oy0=shape.height/2;
      x0=shape.x-ox0;
      y0=shape.y-oy0;
      x1=x0+shape.width;
      y1=y0+shape.height;
      break;
    case 'line':
      for (i in shape.points) {
        p=shape.points[i];
        if (first) x0=p.x,y0=p.y,x1=p.x,y1=p.y,first=false;
        x0=Math.min(x0,p.x),y0=Math.min(y0,p.y),
        x1=Math.max(x1,p.x),y1=Math.max(y1,p.y);
      }
      break;
    case 'text':
      // TODO: Rough approx.
      switch (shape.style && shape.style.align) {
        case 'center':
          x0=shape.x-shape.width/2;
          y0=shape.y-shape.height/2;
          x1=x0+shape.width/2;
          y1=shape.y+shape.height/2;
          break;
        default:
          x0=shape.x;
          y0=shape.y-shape.height;
          x1=x0+shape.width;
          y1=shape.y;
      }
  }
  return {x0:x0,y0:y0,x1:x1,y1:y1};
}
// remove shape
rtree.prototype.delete = function (shape) {
  var node = this.root.search(shape.bbox).find(function (n) {return n.shape.id==shape.id});
  if (node) this.root.remove(node);
}
// Find shape node in tree
rtree.prototype.find = function (shape) {
  return this.root.search(shape.bbox).find(function (n) {return n.shape.id==shape.id});
}
// Find all shapes overlapping with bounding box
rtree.prototype.findAll = function (bbox) {
  return this.root.search(bbox);
}
rtree.prototype.print = function (node,indent) {
  return this.root.print();
}
rtree.prototype.printBbox = function (bbox) {
  if (bbox.bbox) bbox=bbox.bbox;
  return bbox.x0+','+bbox.y0+'-'+bbox.x1+','+bbox.y1;
}


/*******************
** WINDOW Object
*******************/

function window(options) {
  var self=this;
  if (!(this instanceof window)) return new window(options);
  this.wid=0;
  // basic color space 
  this.gc={};
  this.ready=false;
  this.suspended=false;
  this.lazy=options.lazy||0;  // drawing update with timers (-1:never)
  this.pending=[];            // pending scheduling block
  this.events={};             // event handlers
  this.objects={};            // all primitive drawing objects
  this.plots={};              // all plot objects
  this.buttons={};            // any region handling mouse clicks
  this.rtree=rtree(options.width, options.height);    // draw object management
  this.z = {min:Number.MAX_VALUE,max:Number.MIN_VALUE};
  this.visible=false;
  this.background = options.background||'white';
  this.fonts = {
    fixed : {size:options.fontSize||10,id:0}
  };
  this.on('click',function (pos) {
    var bbox={x0:pos.x-1,y0:pos.y-1,x1:pos.x+1,y1:pos.y+1};
    for(var bid in self.buttons) {
      if (!self.buttons[bid]) continue;
      if (self.rtree.within(bbox,self.buttons[bid].bbox) && !self.buttons[bid].shape.hidden) {
        self.buttons[bid].handler(pos);
        return;
      }
    }
  });
  if (this.lazy>0) this.updater=setInterval(function () { self.update() },this.lazy);
}

// Add a shape
window.prototype.add = function (shape) {
  var fs;
  if (shape.id == undefined) shape.id='Shape'+Object.keys(this.objects).length;
  shape.redraw=true;
  if (shape.z==undefined) shape.z=0;
  switch (shape.shape) {
    case 'line':
      shape._points=[].concat.apply([],shape.points.map(function (p) {return [p.x,p.y]}));
      break;
    case 'text':
      // TODO: use text extent/font 
      fs=(shape.style && shape.style.size)||this.fonts.fixed.size;
      shape.height=shape.height||fs;
      shape.width=shape.width||int (this.textExtent('fixed',shape.text)) // int(shape.text.length*fs*0.7);
      shape.width0=shape.width;
      shape.x0 = shape.x;
      shape.y0 = shape.y;
      switch (shape.style && shape.style.align) {
        case 'center':
          shape.height=shape.height||fs;
          shape.width=shape.width||int(shape.text.length*fs*0.7);
          // shape.width0=shape.width;
          shape.x0 = shape.x;
          shape.y0 = shape.y;
          shape.x = shape.x0 - int(shape.width/2);
          shape.y = shape.y0 + int(shape.height/2)-int(this.fonts.fixed.fontinfo.descent/2);
          break;
      }
      break;
    case 'button':
      // TODO: use text extent/font
      fs=shape.label.size||this.fonts.fixed.size;
      shape.height=shape.height||fs;
      shape.label.height=shape.label.height||fs;
      shape.label.width=shape.label.width||int (this.textExtent('fixed',shape.label.text)) // int(shape.label.text.length*fs*0.7);
      shape.label.x = shape.x - int(shape.label.width/2);
      shape.label.y = shape.y + int(shape.label.height/2)-int(this.fonts.fixed.fontinfo.descent/2);
      this.buttons[shape.id]={handler:shape.handler,bbox:this.rtree.bboxOf(shape),shape:shape};
      break;
  }
  if (shape.shape != 'button' && shape.onclick) {
    var bbox=this.rtree.bboxOf(shape);
    if (shape.extendClick) {
      // enlarge sensisive regione
      bbox.x0 -= shape.extendClick;
      bbox.y0 -= shape.extendClick;
      bbox.x1 += shape.extendClick;
      bbox.y1 += shape.extendClick;
    }
    this.buttons[shape.id]={handler:shape.onclick,bbox:bbox,shape:shape};
  }
  this.rtree.add(shape);
  
  // Pending clear operation of previous shape with same id?
  if (this.objects[shape.id] && this.objects[shape.id].clear && !this.equal(this.objects[shape.id],shape,true)) {
    this.clear(this.objects[shape.id]);
  } 
  this.objects[shape.id]=shape;
  //console.log(this.rtree.print());
  this.z.min=Math.min(shape.z,this.z.min);  
  this.z.max=Math.max(shape.z,this.z.max);  
  // TODO: redraw overlapping objects, too
  //if (!this.lazy) 
  this.emit('Redraw');
  return shape.id;
}

// Clear one shape/erase to background
window.prototype.clear = function (shapeOrId, background) {
  var shape=(typeof shapeOrId == 'object'?shapeOrId:this.objects[shapeOrId]),
      gc,
      x0=0,y0=0,
      X = this.X,
      self=this,
      todo=[];
      
  if (!background) background=shape.backgound||this.background||'white';
  switch (shape.shape) {
    case 'rect':
    case 'button':
      if (!shape.align || shape.align=='center') 
        x0=shape.width/2,y0=shape.height/2; // Default: (x,y) is center point
      if (shape.fill) {
        gc=self.gc[background];
        X.PolyFillRectangle(self.wid, gc, [shape.x-x0, 
                                           shape.y-y0,
                                           shape.width, shape.height]);
      }
      if (shape.line) {
        gc=self.gc[background];
        X.ChangeGC(gc, { lineWidth:shape.line.width||1 });
        X.PolyRectangle(self.wid, gc, [shape.x-x0, 
                                       shape.y-y0,
                                       shape.width, shape.height]);
        X.ChangeGC(gc, { lineWidth:1 });
      }
      if (shape.label) {
        gc=self.gc[background];
        X.PolyText8(self.wid, gc, shape.label.x, shape.label.y, [shape.label.text])        
      }
      break;
    case 'triangle':
      var points=[
        shape.x-shape.width/2, shape.y+shape.height/2,
        shape.x+shape.width/2, shape.y+shape.height/2,
        shape.x, shape.y-shape.height/2,
        shape.x-shape.width/2, shape.y+shape.height/2
      ]
      if (shape.angle) {
        points=points.map(function (p) {
          return rotate(shape.x,shape.y,p[0],p[1],shape.angle);
        });
      }
      points=flatten(points);
      if (shape.fill) {
        gc=self.gc[background];
        X.FillPoly(self.wid, gc, 0, 0, points);
      }
      if (shape.line) {
        gc=self.gc[background];
        X.ChangeGC(gc, { lineWidth:shape.line.width||1 });
        X.PolyLine(0, self.wid, gc, points);
        X.ChangeGC(gc, { lineWidth:1 });
      }
      break;
    case 'circle':
      if (shape.fill) {
        gc=self.gc[background];
        X.PolyFillArc(self.wid, gc, [shape.x-shape.width/2, 
                                     shape.y-shape.height/2,
                                     shape.width, shape.height, 0, 360*64]);
      }
      if (shape.line) {
        gc=self.gc[background];
        X.ChangeGC(gc, { lineWidth:shape.line.width||1 });
        X.PolyArc(self.wid, gc, [shape.x-shape.width/2, 
                                 shape.y-shape.height/2,
                                 shape.width, shape.height, 0, 360*64]);
        X.ChangeGC(gc, { lineWidth:1 });
      }
      break;
    case 'line':
      if (shape.line) {
        gc=self.gc[background];
        X.ChangeGC(gc, { lineWidth:shape.line.width||1 });
        X.PolyLine(0, self.wid, gc, shape._points);
        X.ChangeGC(gc, { lineWidth:1 });
      } else {
        gc=self.gc['background'];
        X.PolyLine(0, self.wid, gc, shape._points);      
      }
      break;
    case 'text':
      gc=self.gc[background];
      X.PolyText8(self.wid, gc, shape.x, shape.y, [shape.text])
      break;
    case 'pixmap':
      if (!shape.align || shape.align=='center') 
        x0=shape.width/2,y0=shape.height/2; // Default: (x,y) is center point
      gc=self.gc[background];
      X.PolyFillRectangle(self.wid, gc, [shape.x-x0, 
                                         shape.y-y0,
                                         shape.width, shape.height]);
      break;
  }
}

// Hider or show shapes (display=none|visible)
window.prototype.display = function (shapeOrId, attr) {
  var shape=(typeof shapeOrId == 'object'?shapeOrId:this.objects[shapeOrId]);
  if (attr=='none' || attr=='hidden') {
    if (!shape.hidden) {
      shape.hidden=true;
      this.clear(shapeOrId);
    }
  } else {
    shape.hidden=false;
    this.draw(shapeOrId);
  }
}

// hide (unmap) window
window.prototype.hide = function () {
  this.X.UnmapWindow(this.wid);
  this.visible=false;
}

// Draw one shape
window.prototype.draw = function (shapeOrId) {
  var shape=(typeof shapeOrId == 'object'?shapeOrId:this.objects[shapeOrId]);
  var gc,
      x0=0,y0=0,
      X = this.X,
      self=this,
      todo=[];
  var background=shape.backgound||'white';
  if (shape.hidden) return;
  switch (shape.shape) {
    case 'rect':
    case 'button':
      if (!shape.align || shape.align=='center') 
        x0=shape.width/2,y0=shape.height/2; // Default: (x,y) is center point
      if (shape.fill) {
        if (shape.fill.color && self.gc[shape.fill.color])
          gc=self.gc[shape.fill.color];
        else
          gc=self.gc.black;
        X.PolyFillRectangle(self.wid, gc, [shape.x-x0, 
                                           shape.y-y0,
                                           shape.width, shape.height]);
      }
      if (shape.line) {
        if (shape.line.color && self.gc[shape.line.color])
          gc=self.gc[shape.line.color];
        else
          gc=self.gc.black;
        X.ChangeGC(gc, { lineWidth:shape.line.width||1 });
        X.PolyRectangle(self.wid, gc, [shape.x-x0, 
                                       shape.y-y0,
                                       shape.width, shape.height]);
        X.ChangeGC(gc, { lineWidth:1 });
      }
      if (shape.label) {
        if (shape.label.color) 
          gc=self.gc[shape.label.color];
        else
          gc=self.gc.black;
        X.PolyText8(self.wid, gc, shape.label.x, shape.label.y, [shape.label.text])        
      }
      break;
    case 'triangle':
      var points=[
        [shape.x-shape.width/2, shape.y+shape.height/2],
        [shape.x+shape.width/2, shape.y+shape.height/2],
        [shape.x, shape.y-shape.height/2],
        [shape.x-shape.width/2, shape.y+shape.height/2]
      ]
      if (shape.angle) {
        points=points.map(function (p) {
          return rotate(shape.x,shape.y,p[0],p[1],shape.angle);
        });
      } 
      points = flatten(points);
      if (shape.fill) {
        if (shape.fill.color && self.gc[shape.fill.color])
          gc=self.gc[shape.fill.color];
        else
          gc=self.gc.black;
        X.FillPoly(self.wid, gc, 0, 0, points);
      }
      if (shape.line) {
        if (shape.line.color && self.gc[shape.line.color])
          gc=self.gc[shape.line.color];
        else
          gc=self.gc.black;
        X.ChangeGC(gc, { lineWidth:shape.line.width||1 });
        X.PolyLine(0, self.wid, gc, points);
        X.ChangeGC(gc, { lineWidth:1 });
      }
      break;
    case 'circle':
      if (shape.fill) {
        if (shape.fill.color && self.gc[shape.fill.color])
          gc=self.gc[shape.fill.color];
        else
          gc=self.gc.black;
        X.PolyFillArc(self.wid, gc, [shape.x-shape.width/2, 
                                     shape.y-shape.height/2,
                                     shape.width, shape.height, 0, 360*64]);
      }
      if (shape.line) {
        if (shape.line.color && self.gc[shape.line.color])
          gc=self.gc[shape.line.color];
        else
          gc=self.gc.black;
        X.ChangeGC(gc, { lineWidth:shape.line.width||1 });
        X.PolyArc(self.wid, gc, [shape.x-shape.width/2, 
                                 shape.y-shape.height/2,
                                 shape.width, shape.height, 0, 360*64]);
        X.ChangeGC(gc, { lineWidth:1 });
      }
      break;
    case 'line':
      if (shape.line) {
        if (shape.line.color && self.gc[shape.line.color])
          gc=self.gc[shape.line.color];
        else
          gc=self.gc.black;
        X.ChangeGC(gc, { lineWidth:shape.line.width||1 });
        X.PolyLine(0,self.wid, gc, shape._points);
        X.ChangeGC(gc, { lineWidth:1 });
      } else {
        gc=self.gc.black;
        X.PolyLine(0,self.wid, gc, shape._points);
      }
      break;
    case 'text':
      if (shape.style && shape.style.color) 
        gc=self.gc[shape.style.color];
      else
        gc=self.gc.black;        
      X.PolyText8(self.wid, gc, shape.x, shape.y, [shape.text])
      break;
    case 'pixmap':
      if (!shape.align || shape.align=='center') 
        x0=shape.width/2,y0=shape.height/2; // Default: (x,y) is center point
      gc = self.gc[background];
      X.PutImage(2, self.wid, gc, shape.width, shape.height, shape.x-x0, shape.y-y0, 0, shape.depth||24, shape.data);
      break; 
  }
  shape.redraw=false;
}


window.prototype.emit = function (ev,arg) {
  // console.log('EMIT ['+this.wid+'] '+ev);
  if (this.events[ev]) this.events[ev](arg);
}

// Are two shapes equal?
window.prototype.equal = function (shape1,shape2,geo) {
  if (shape1.shape!=shape2.shape) return false;
  if (!this.rtree.equal(shape1.bbox,shape2.bbox)) return false;
  if (geo) return true;
  return false;
}
// Erase window
window.prototype.erase = function (background) {
  
}

// return visual or plot object
window.prototype.get = function (id) {
  if (this.objects[id]) return this.objects[id];
  if (this.plots[id]) return this.plots[id];
}

// Modify a shape or plot object (or a part of a shape/node)
window.prototype.modify = function (shapeOrId,attr,part) {
  var shape=(typeof shapeOrId == 'object'?shapeOrId:this.objects[shapeOrId]),
      plot=(typeof shapeOrId == 'string'?this.plots[shapeOrId]:none),
      objs,
      background,
      move= attr && (attr.x!=undefined || attr.y!=undefined),
      repaint= attr && (attr.width!=undefined || attr.height!=undefined || attr.text || attr.label);
   
  if (plot) Plot.modify.call(this,shapeOrId,attr,part);
  if (!shape) return;
  
  if (!modifies(attr,shape)) return;    // no change; no redraw 
  
  // Get all overlapping shapes with this shape
  objs=this.overlap(shape);
  
  // Avoid redrawing of overlapping shapes if this shape is within the shape behind
  if (objs.length>1 && objs[0].id==shape.id && this.rtree.within(shape.bbox,objs[1].bbox))
    // Clear and redraw only this shape
    background=this.style(objs[1],'background');
  else
    // Redraw all underlying and overlying objects, too!    
    objs.map(function (s) {s.redraw=true});

  shape.redraw=true;
  // This shape must be cleared if moved/resized!
  if (move || repaint) this.clear(shape,shape.background||background);
  
  //console.log('>>',shape.id+'['+self.rtree.printBbox(shape)+']',objs.map(function (s) {return s.id+'['+self.rtree.printBbox(s)+']'}),'<<');
  update(shape,attr);

  if (attr.text) {
      // TODO: use text extent/font
      fs=(shape.style && shape.style.size)||this.fonts.fixed.size;
      switch (shape.style && shape.style.align) {
        case 'center':
          shape.width=shape.width0||int (this.textExtent('fixed',shape.text)) // int(shape.text.length*fs*0.7);
          shape.x = shape.x0 - int(shape.width/2);
          shape.y = shape.y0 + int(shape.height/2)-int(this.fonts.fixed.fontinfo.descent/2);          
          break;
      }
  }
  if (attr.label) {
      // TODO: use text extent/font
      fs=(shape.label.size)||this.fonts.fixed.size;
      shape.label.width=int (this.textExtent('fixed',shape.label.text)) // int(shape.label.text.length*fs*0.7);
      shape.label.x = shape.x - int(shape.label.width/2);
      shape.label.y = shape.y + int(shape.label.height/2)-int(this.fonts.fixed.fontinfo.descent/2);
  }
  if (!this.lazy && !this.suspended) {
    for(i in objs)
      if (objs[i].redraw) this.draw(objs[i]);
  } else {
    // we redraw this and the overlapping shapes later
    shape.background=background;
  }

  // update mouse area, too
  if (this.buttons[shape.id]) {
    var bbox=this.rtree.bboxOf(shape);
    if (shape.extendClick) {
      // enlarg sensisive regione
      bbox.x0 -= shape.extendClick;
      bbox.y0 -= shape.extendClick;
      bbox.x1 += shape.extendClick;
      bbox.y1 += shape.extendClick;
    }
    this.buttons[shape.id]={handler: this.buttons[shape.id].handler,bbox:bbox,shape:shape};  }
}

// Move a shape
window.prototype.move = function (shapeOrId,dx,dy) {
  var shape=(typeof shapeOrId == 'object'?shapeOrId:this.objects[shapeOrId]),
      attr={};
  if (dx) attr.x=shape.x+dx;
  if (dy) attr.y=shape.y+dy;
  
  this.modify(shape,attr)
}
window.prototype.moveTo = function (shapeOrId,x,y) {
  var shape=(typeof shapeOrId == 'object'?shapeOrId:this.objects[shapeOrId]),
      attr={};
  if (x) attr.x=x;
  if (y) attr.y=y;
  
  this.modify(shape,attr)
}

// Remove event handler
window.prototype.off = function (ev) {
  this.events[ev]=undefined;
}

// Add event handler
window.prototype.on = function (ev,handler) {
  this.events[ev]=handler;
}

// Find all overlapping shapes and return list in decreasing z order
window.prototype.overlap = function (shape) {
  var objs,
      self=this,
      bbox=shape.bbox;
  if (!shape.fill) switch (shape.shape) {
    case 'rect':
      // Optimization: Only find objects overlapping with rectangle lines!
      objs=this.rtree.findAll({x0:bbox.x0-1,y0:bbox.y0-1,x1:bbox.x0+1,y1:bbox.y1+1});
      objs=objs.concat(this.rtree.findAll({x0:bbox.x1-1,y0:bbox.y0-1,x1:bbox.x1+1,y1:bbox.y1+1}));
      objs=objs.concat(this.rtree.findAll({x0:bbox.x0-1,y0:bbox.y0-1,x1:bbox.x1+1,y1:bbox.y0+1}));
      objs=objs.concat(this.rtree.findAll({x0:bbox.x0-1,y0:bbox.y1-1,x1:bbox.x1+1,y1:bbox.y1+1}));
      break;
  }
  // Phase 1: get  all shapes overlapping with this shape
  if (!objs) objs=this.rtree.findAll(bbox);
  // Phase 2: Get bbox of all shapes
  bbox=this.rtree.bboxGroup(objs);
  // Phase 3: find all shapes from this list overlapping with any other shape
  objs=this.rtree.findAll(bbox).map(function (n) { return n.shape});
  
  return objs.sort(function(a,b) { return a.z<b.z});
}

/** Set window title
 *
 */
window.prototype.title = function (title) {
  this.X.ChangeProperty(0, this.wid, this.X.atoms.WM_NAME, this.X.atoms.STRING, 8, title);
}

window.prototype.plot = Plot.window.prototype.plot;



// Remove a shape
window.prototype.remove = function (shape) {
  var objs,background,i,
      self=this;
  if (typeof shape == 'string') shape=this.get(shape);
  if (!shape) return;
  
  // remove shape
  this.rtree.delete(shape);
  
  // Get all overlapping shapes w/o this shape
  objs=this.overlap(shape);

  // Avoid redrawing of overlapping shapes if this shape is within the shape behind
  if (objs.length && this.rtree.within(shape.bbox,objs[0].bbox))
    // Clear and redraw only this shape
    background=this.style(objs[0],'background');
  else
    // Redraw all underlying and overlying objects, too!    
    objs.map(function (s) {s.redraw=true});

  
  //console.log('>>',shape.id+'['+self.rtree.printBbox(shape)+']',objs.map(function (s) {return s.id+'['+self.rtree.printBbox(s)+']'}),'<<');

  if (!this.lazy && !this.suspended) {
    delete this.objects[shape.id];
    this.clear(shape,background);
    for(i in objs) 
      if (objs[i].redraw) this.draw(objs[i]);
  } else {
    // we can clear shape and redraw overlapping shapes later
    shape.clear=true;
    shape.background=background;
  }
}

// Resume window updates (enable redrawing)
window.prototype.resume = function () {
  this.suspended=false;
  this.update();
}


// Suspend window updates (disable redrawing)
window.prototype.suspend = function () {
  this.suspended=true;
}

// show (map) window
window.prototype.show = function () {
  this.X.MapWindow(this.wid);
  this.visible=true;
}

// Get shape style attribute
// {'background','foreground'}
window.prototype.style = function (shape,attr) {
  switch (attr) {
    case 'background':
      if (shape.fill && shape.fill.color) return shape.fill.color;
  }
  return 'white';
}
// Compute text strong extent (width in pixel)
window.prototype.textExtent = function (font,str) {
  var fi = this.fonts[font];
  if (!fi) return 0;
  var width = 0;
  for(var i=0;i<str.length;i++) {
    width += fi.fontinfo.charinfo[str.charCodeAt(i)].width;
  }
  return width;
}

// Redraw all objects with redraw flag set with respect to their z layer
// Update object operations (redraw,clear,..)
window.prototype.update = function (all) {
  var updated=0;
  if (!this.ready) return 0;
  for(var z=this.z.min;z<=this.z.max;z++) {
    for(var i in this.objects) {
      var shape=this.objects[i];
      if (!shape || (!shape.redraw && !shape.clear && !all) || shape.z!=z) continue;
      if (shape.clear) {this.clear(shape);delete this.objects[shape.id]; updated++}
      else {this.draw(shape);updated++};
    }
  }
  return updated;
}

/********************************
** WINDOWS FRAMEWORK Object
********************************/

function windows(options) {
  if (!(this instanceof windows)) return new windows(options);
  this.options=options||{};
  this.init=false;
  this.ready=false;
  this.windows=[];
  this.pending=[];
  this.events=[];
  this.palette=color_palette;
}

windows.prototype.addColor = function (name,r,g,b) {
  this.palette[name]=[r,g,b];
}

windows.prototype.emit = function (ev,arg,id) {
  // console.log('EMIT '+ev+' ['+id+']');
  if (id!=undefined && this.windows[id]) this.windows[id].emit(ev,arg); 
  else if (this.events[ev]) this.events[ev](arg);
}

// Event handler
windows.prototype.handler = function (ev) {
  //console.log(ev)
  switch (ev.type) {
    case X11.eventNumber.Expose:
      this.emit('Expose',undefined,ev.wid);
      break;
    case X11.eventNumber.KeyPress:
      var key = this.kk2Name[ev.keycode][0];
      this.emit('keypress',key,ev.wid);
      break;
    case X11.eventNumber.ButtonPress:
      this.emit('click',{x:ev.x,y:ev.y},ev.wid);
      break;
  }
}

windows.prototype.off = function (ev) {
  this.events[ev]=undefined;
}

windows.prototype.on = function (ev,handler) {
  this.events[ev]=handler;
}

windows.prototype.start = function (callback) {
  var self=this;
  if (this.init) return;
  this.init=true;
  X11.createClient(function(err, display) {
    if (!err) {
      var X = self.X = display.client;
      self.display = display;
      self.root = display.screen[0].root;
      self.white = display.screen[0].white_pixel;
      self.black = display.screen[0].black_pixel;
      self.kk2Name = {};

      // Start event listener
      X.on('event', function(ev) {
        self.handler(ev);
      });
      X.on('error', function(e) {
        console.log(e);
      });  

      var todo = [
           function (next) {
            var ks = X11.keySyms;
            var ks2Name = {};
            for (var key in ks) ks2Name[ ks[key].code ] = key;
            var min = display.min_keycode;
            var max = display.max_keycode;      
            X.GetKeyboardMapping(min, max-min, function(err, list) {
              for (var i=0; i < list.length; ++i)
              {
                var name = self.kk2Name[i+min] = [];
                var sublist = list[i];
                for (var j =0; j < sublist.length; ++j)
                  name.push(ks2Name[sublist[j]]);
              };
              next();  
            });          
          },
          function (next) {
            self.ready=true;
            if (callback) callback(null,display);
            if (self.pending) {
              X11.block(self.pending);
              self.pending=[];
            }
          }
        ];
      X11.block(todo);
    } else {
      if (callback) callback(err);
    }
  });
  
}

// Create and add a new window
windows.prototype.window = function (options,callback) {
  var win = window(options),    
    self=this,
    X = this.X;
  
  function expose() {
    win.update(true);
  }
  function createColors(next) {
    var n=0,len=Object.keys(color_palette).length;
    function createColor(name,r,g,b) {
      X.AllocColor(self.display.screen[0].default_colormap,  r*255, g*255, b*255, function (err,color) {
        if (err) console.log(err);
        X.CreateGC(win.gc[name], win.wid, 
          { 
            foreground: color.pixel, 
            background: self.white,
            font: win.fonts.fixed.id
          });
        n++;              
        if (n==len) next();
      });    
    }
    for(var c in color_palette) {
      win.gc[c]=X.AllocID();
      switch (c) {
        case 'black':
          X.CreateGC(win.gc.black, win.wid, { foreground: self.black, background: self.white, font: win.fonts.fixed.id});
          n++;
          break;
        case 'white':
          X.CreateGC(win.gc.white, win.wid, { foreground: self.white, background: self.white, font: win.fonts.fixed.id});
          n++;
          break;
        default:
          createColor(c,color_palette[c][0],color_palette[c][1],color_palette[c][2]);          
      }
    }
  }
  var todo = [
      function (next) {
        X = self.X;
        win.gc = {};
        win.wid = X.AllocID();
        self.windows[win.wid]=win;
        console.log('Creating new window '+win.wid);
        win.X=X;
        X.CreateWindow(
          win.wid, self.root,        // new window id, parent
          options.x||0, options.y||0, 
          options.width, options.height,   // x, y, w, h
          0, 0, 0, 0,                 // border, depth, class, visual
          { 
            backgroundPixel: options.background=='black'?self.black:self.white,
            eventMask: KeyPress|ButtonPress|Exposure 
          } // other parameters
        );
        X.MapWindow(win.wid);
        win.visible=true;
        X.ChangeProperty(0, win.wid, X.atoms.WM_NAME, X.atoms.STRING, 8, options.title||'');
        win.on('Expose',next);
      },
      function (next) {
        if (!win.fonts.fixed.id) {
          win.fonts.fixed.id=X.AllocID();
          win.fonts.fixed.size=options.fontSize||14;
          win.fonts.fixed.name='-*-'+(options.fontFamily?options.fontFamily:'fixed')+
                     '-*-r-*-*-'+win.fonts.fixed.size+
                     '-*-*-*-*-*-*-*';
          X.OpenFont(win.fonts.fixed.name,win.fonts.fixed.id);
          X.QueryFont(win.fonts.fixed.id, function (error,fontinfo) {
            win.fonts.fixed.fontinfo=fontinfo;
            next()
          })
          if (options.verbose) console.log('Default Font: '+win.fonts.fixed.name,win.fonts.fixed.id);
        }
        else next();
      },
      function (next) {
        win.off('Expose');
        createColors(next);
      },
      function (next) {
        // console.log('WIN REDAY!');
        win.ready=true;
        win.on('Expose',expose);
        win.on('Redraw',win.update.bind(win));
        win.emit('Redraw');
        if (callback) callback();
        next();
      }
    ];
  if (!this.ready) this.pending=this.pending.concat(todo); else X11.block(todo);
  return win;
};

module.exports = {
  windows:windows
}
};
BundleModuleCode['x11/win/plot']=function (module,exports,global,process){
/**
 **      ==============================
 **       O           O      O   OOOO
 **       O           O     O O  O   O
 **       O           O     O O  O   O
 **       OOOO   OOOO O     OOO  OOOO
 **       O   O       O    O   O O   O
 **       O   O       O    O   O O   O
 **       OOOO        OOOO O   O OOOO
 **      ==============================
 **      Dr. Stefan Bosse http://www.bsslab.de
 **
 **      COPYRIGHT: THIS SOFTWARE, EXECUTABLE AND SOURCE CODE IS OWNED
 **                 BY THE AUTHOR(S).
 **                 THIS SOURCE CODE MAY NOT BE COPIED, EXTRACTED,
 **                 MODIFIED, OR OTHERWISE USED IN A CONTEXT
 **                 OUTSIDE OF THE SOFTWARE SYSTEM.
 **
 **    $AUTHORS:     Stefan Bosse
 **    $INITIAL:     (C) 2006-2017 bLAB
 **    $CREATED:     1-10-17 by sbosse.
 **    $VERSION:     1.3.1
 **
 **    $INFO:
 **
 **  X11/Widget library - High-level plot/data visualization widgets extending the window class 
 **
 **
 ** plot({
 **  type:'vector',
 **  x,y,min?,max?,
 **  width,height
 **  margin?,
 **  columns?,
 **  label?:{x0:string,x1:string,y0:string,y1:string},
 **  bar?: {
 **    fill:{
 **      color:string
 **    }
 **  },
 **  init?:function (i) { return 0.0 } // Creates vector:number [] attribute!
 ** })
 **
 **    $ENDOFINFO
*/

var Comp = Require('com/compat');


function window(options) {
  this.plots={};
}

function update(dst,src) {
  for(var a in src) {
    if (typeof dst[a] == 'object' && typeof src[a] == 'object')
      update(dst[a],src[a]);
    else
      dst[a]=src[a];
  }    
}
function modifies(attr,shape) {
  for(var a in attr) {
    if (typeof attr[a] == 'object' && typeof shape[a] == 'object')
      return modifies(attr[a],shape[a]);
    else if (attr[a] != shape[a]) return true;
  }
  return false;
}

function makeLabel(options,modify) {
  if (options.label.y0) {
    if (modify) this.remove(options.id+':Ly0');
    this.add({
      id:options.id+':Ly0',
      shape:'text',
      align:'left',
      x:options.x-15,
      y:options.y+options.height,
      text:options.label.y0
    });
  }
  if (options.label.y1) {
    if (modify) this.remove(options.id+':Ly1');
    this.add({
      id:options.id+':Ly1',
      shape:'text',
      align:'left',
      x:options.x-15,
      y:options.y,
      text:options.label.y1
    });
  }
  if (options.label.x0) {
    if (modify) this.remove(options.id+':Lx0');
    this.add({
      id:options.id+':Lx0',
      shape:'text',
      align:'left',
      x:options.x,
      y:options.y+options.height+15,
      text:options.label.x0
    });
  }
  if (options.label.x1) {
    if (modify) this.remove(options.id+':Lx1');
    this.add({
      id:options.id+':Lx1',
      shape:'text',
      align:'left',
      x:options.x+options.width,
      y:options.y+options.height,
      text:options.label.x1
    });
  }
}
/** Plot a metric matrix (image) or a grid (2d plot) of nodes
**
** typeof options = {
**  type='matrix',
**  x,y,     
**  rows?,columns?,margin?,
**  align?={'center'|'left'},
**  node: {
**    shape,
**    width,height,
**    fill:{color:string},
**    line:{color:string,width?}
**  },
**  init?: function (^i,^j) -> ^attr | [][],
**  map?: function (^i,^j,^v) -> ^attr:object,
**  matrix?: *[][]
** }
*/
function plotMatrix (options) {
  for(var j=0; j<options.rows;j++) {
    for(var i=0; i<options.columns; i++) {
      var node=Comp.obj.copy(options.node);
      node.x=options.x+i*(node.width+options.margin);
      node.y=options.y+j*(node.height+options.margin);
      node.id=options.id+':N'+(i+j*options.columns);
      if (typeof options.init == 'function') 
        update(node,options.init(i,j));
      else if (typeof options.map == 'function' && options.matrix) 
        update(node,options.map(i,j,options.matrix[j][i]));
      this.add(node);
    }
  }
}


function deleteLine (options,i) {
  var id=options.id+':L'+i;
  this.remove(this.objects[id]);
}

function plotLine (options,i) {
  var x0,y0,x1,y1,id;
  x0=options.x+int(options.width/options.columns*i);
  x1=options.x+int(options.width/options.columns*(i+1));
  y0=options.y+options.height-int(options.height/(options.max-options.min)*options.vector[i]);
  y1=options.y+options.height-int(options.height/(options.max-options.min)*options.vector[i+1]);
  this.add({
    id:options.id+':L'+i,
    shape:'line',
    line:{
      width:options.line.width||1,
      color:options.line.color||'black'
    },
    points:[
      {x:x0,y:y0},{x:x1,y:y1}
    ]
  });
}

function plotLines (options) {
  for(var i=0; i<options.columns-1; i++) {
    plotLine.call(this,options,i);
  }
  if (options.label) {
    makeLabel.call(this,options);
  }
}

function deleteBar (options,i) {
  var id=options.id+':B'+i;
  this.remove(this.objects[id]);
}

function plotBar (options,i) {
  var w=options.width/options.columns-(options.margin||0),
      x,y,h,id;
  x=options.x+int(options.width/options.columns*i)-w/2;
  h=int(options.height/(options.max-options.min)*(options.vector[i]-options.min));
  
  if (options.min>=0 || options.max <= 0) {
    h=Math.max(1,h);
    y=options.y+options.height-h;
  } else {
    off=int(options.height/(options.max-options.min)*(-options.min));
    if (options.vector[i]<0)
      y=options.y+options.height-off, h=Math.max(1,off-h);
    else
      h=Math.max(1,h-off),y=options.y+options.height-off-h;
  }
    
  this.add({
    id:options.id+':B'+i,
    shape:'rect',
    align:'left',
    x:x,
    y:y,
    width:w,
    height:h,
    fill:{
      color:(options.bar.fill && options.bar.fill.color)||'black'
    },
  });
}

function plotBars (options) {
  for(var i=0; i<options.columns; i++) {
    plotBar.call(this,options,i);
  }
  if (options.label) {
    makeLabel.call(this,options);
  }
}

/** Plot of a metric vector (1d plot)
**
** typeof options = {
**  type='vector',
**  x,y,     
**  columns?,
**  vector?:[],
**  align?={'center'|'left'},
**  min?,max?,
**  point?: {
**    shape,
**    width,height,
**    fill?:{color:string},
**    line?:{color:string}
**  },
**  line?:{color?,width?},
**  bar?:{fill?,line?},
**  init: function (i) -> number | []
** }
*/

function plotVector (options) {
  var v,x,y,x0,y0,x1,y1,min,max;
  options.vector=options.vector||[];
  for(var i=0; i<options.columns; i++) {
    v=undefined;
    if (typeof options.init == 'function') v=options.init(i);
    else if (typeof options.init == 'array' || typeof options.init == 'object')
      v=options.init[i]||options.min||0;
    if(v != undefined) options.vector[i]=v;
    if(min==undefined) min=options.vector[i];
    else min=Math.min(min,options.vector[i]);
    if(max==undefined) max=options.vector[i];
    else max=Math.max(max,options.vector[i]);
  }
  if (options.min==undefined) options.min=min;
  if (options.max==undefined) options.max=max;
  if (options.line) plotLines.call(this,options);
  if (options.bar) plotBars.call(this,options);
}

/** Modify a plot or a part of a plot
*   typeof attr = object | number | undefined
*   typeof part = {i,j} | {i} | number | undefined
*/ 
function modify(id,attr,part) {
  var i,j,id,plot=this.plots[id];
  switch (plot.type) {
    case 'matrix':
      if (part && typeof part.i == 'number' && typeof part.j == 'number') {
        id=id+':N'+(part.i+(plot.columns*part.j));
        if (plot.matrix && plot.map && attr == undefined) {
          // Matrix was externally modified; update visual
          attr=plot.map(part.i,part.j,plot.matrix[part.j][part.i]);
        }
        this.modify(id,attr);
      }
      break;
    case 'vector':
      if (!attr && !part) {
        // Update entire plot
        if (plot.line) {
          for(i=0;i<plot.columns-1;i++) {
            id=plot.id+':L'+i;
            this.remove(this.objects[id]);
          }
          plotLines.call(this,plot);
        } else if (plot.bar) {
          for(i=0;i<plot.columns;i++) {
            id=plot.id+':B'+i;
            this.remove(this.objects[id]);
          }
          plotBars.call(this,plot);        
        }
      } else if (typeof attr == 'number') {
        i=(typeof part == 'object')?part.i:part;
        if (i>=0 && i<plot.columns) 
          plot.vector[i]=attr;
        if (plot.line) {
          if (i>0 && i<plot.columns) 
            deleteLine.call(this,plot,i-1),plotLine.call(this,plot,i-1);
          if (i>=0 && i<plot.columns-1) 
            deleteLine.call(this,plot,i),plotLine.call(this,plot,i);
          if (i>0 && i<plot.columns-2) 
            deleteLine.call(this,plot,i+1),plotLine.call(this,plot,i+1);
        } else if (plot.bar) {
          if (i>=0 && i<plot.columns) 
            deleteBar.call(this,plot,i),plotBar.call(this,plot,i);
        }
      } else if (attr && attr.label) {
        if (modifies(attr,plot)) {
          update(plot,attr);
          makeLabel.call(this,plot,true);
        }
      }
      break;
  }
}

// Main entry method
window.prototype.plot = function (options) {
  if (!options.id) options.id='Plot'+Object.keys(this.plots).length;
  this.plots[options.id]=options;
  switch (options.type) {
    case 'matrix':
      if (options.margin==undefined) options.margin=0;
      if (options.matrix) 
        options.rows=options.matrix.length,
        options.columns=options.matrix[0].length;
      options.width=options.width||
                    (options.columns*options.node.width+(options.columns-1)*options.margin);
      options.height=options.height||
                    (options.rows*options.node.height+(options.rows-1)*options.margin);
      if (options.align && options.align=='center')
        options.x=options.x-options.width/2,
        options.y=options.y+options.height/2;
      plotMatrix.call(this,options);
      break;
    case 'vector':
      if (options.align && options.align=='center')
        options.x=options.x-options.width/2,
        options.y=options.y+options.height/2;
      plotVector.call(this,options);
      break;
  }
  return options.id;
}



module.exports = {
  modify:modify,
  window:window
}
};
BundleModuleCode['com/compat']=function (module,exports,global,process){
/**
 **      ==============================
 **       O           O      O   OOOO
 **       O           O     O O  O   O
 **       O           O     O O  O   O
 **       OOOO   OOOO O     OOO  OOOO
 **       O   O       O    O   O O   O
 **       O   O       O    O   O O   O
 **       OOOO        OOOO O   O OOOO
 **      ==============================
 **      Dr. Stefan Bosse http://www.bsslab.de
 **
 **      COPYRIGHT: THIS SOFTWARE, EXECUTABLE AND SOURCE CODE IS OWNED
 **                 BY THE AUTHOR(S).
 **                 THIS SOURCE CODE MAY NOT BE COPIED, EXTRACTED,
 **                 MODIFIED, OR OTHERWISE USED IN A CONTEXT
 **                 OUTSIDE OF THE SOFTWARE SYSTEM.
 **
 **    $AUTHORS:     Stefan Bosse
 **    $INITIAL:     (C) 2006-2021 bLAB
 **    $CREATED:     30-3-15 by sbosse.
 **    $VERSION:     1.23.6X
 **
 **    $INFO:
 **
 **  JavaScript-OCaML Compatibility Module
 **
 **    $ENDOFINFO
 */
var Io = Require('com/io');
var Path = Require('com/path');
var Sprintf = Require('com/sprintf');

/*******************************
** Some global special "values"
********************************/

/** A matching template pattern matching any value
 *
 * @type {undefined}
 */
var any = undefined;
/** A matching template pattern matching any value
 *
 * @type {undefined}
 */
var _ = undefined;

/**
 *
 * @type {null}
 */
var none = null;
/**
 *
 * @type {null}
 */
var empty = null;

var NL = '\n';

global.int = function (v) {return v|0};
global.div = function (a,b) {return a/b|0};

if (!Object.prototype.forEach) {
	Object.defineProperties(Object.prototype, {
		'forEach': {
			value: function (callback) {
				if (this == null) {
					throw new TypeError('Not an object');
				}
				var obj = this;
				for (var key in obj) {
					if (obj.hasOwnProperty(key)) {
						callback.call(obj, obj[key], key, obj);
					}
				}
			},
			writable: true
		}
	});
}
/** Just transfer parent prototypes to child
 *
 */
function inherit(child,parent) {
  for(var p in parent.prototype) {
    if (p == '__proto__') continue;
    child.prototype[p]=parent.prototype[p];
  }
}

/** Portable class inheritance and instanceOf polyfill
 *
 */
// SomeObject.prototype.__proto__=SomeObject2.prototype;
// Child class inherits prototype from parent using __proto__
function inheritPrototype(child,parent) {
  var __proto__=child.__proto__;
  child.prototype.__proto__=parent.prototype;
  if (!__proto__) for(var p in parent.prototype) {
    if (p == '__proto__') continue;
    child.prototype[p]=parent.prototype[p];
  }
}
// Polyfill fir o instanceof c with inheritance check (checking __proto__)
function instanceOf(obj,cla) {
  var p=obj.__proto__;
  if (obj instanceof cla) return true;
  while (p) {
    if (p === cla.prototype) return true;
    p=p.__proto__
  }
  return false;
}
// Polyfill for __defineGetter__ / __defineSetter__
function defineGetter(cla,prop,fun) {
  Object.defineProperty(cla.prototype,prop,{
    configurable:true,
    get:fun
  });
}
function defineSetter(cla,prop,fun) {
  Object.defineProperty(cla.prototype,prop,{
    configurable:true,
    set:fun
  });

}

var inherit = inherit;
var inheritPrototype = inheritPrototype;
var instanceOf = instanceOf;
var defineGetter = defineGetter;
var defineSetter = defineSetter;

/**
 *
 */
var assert = function(condmsg) {
    if (condmsg != true) {
        Io.out('** Assertion failed: '+condmsg+' **');
        Io.stacktrace();
        throw Error(condmsg);
    }
};
global.assert=assert;

function forof(obj,f) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = obj[Symbol.iterator](), _step; 
         !(_iteratorNormalCompletion = (_step = _iterator.next()).done); 
         _iteratorNormalCompletion = true) {
      element = _step.value;

      f(element);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}


global.forof=forof;

/** OBJ
 *
 */
var obj = {
    /** Compact an object:
     * [{a:b},[c:d},..] -> {a:b,c:d,..}
     * {a:[b]} -> {a:b}
     *
     */
    compact: function (o) {
      var a;
      if (obj.isArray(o)) {
        if (o.length==1 && obj.isObject(o[0])) return obj.compact(o[0]);
        else return o;
      } else if (obj.isObject(o)) for (a in o) {
          var elem=o[a];
          o[a]=obj.compact(elem);
      }
      return o;
    },
    copy: function (o) {
      if (o === null || typeof o !== 'object') {
        return o;
      }
 
      var temp = (o instanceof Array) ? [] : {};
      for (var key in o) {
        temp[key] = obj.copy(o[key]);
      }
 
      return temp;    
    },
    equal: function (o1,o2) {
      if (!o1 || !o2) return false;
      for(var i in o1) if (o1[i]!=o2[i]) return false;
      for(var i in o2) if (o1[i]!=o2[i]) return false;
      return true;
    },
    extend: function (o1,o2) {
      for(var i in o2) o1[i]=o2[i];
      return o1;
    },
    find: function(obj,fun) {
      var p;
      for(p in obj) {
          if (fun(obj[p],p)) return obj[p];
      }
    },

    hasProperty: function (o,p) {
      return o[p]!=undefined || (p in o);
    },
    head:function(o) {
      for (var p in o) return p;
      return undefined;
    },
    // transfer src attributes to dst recusively (no object overwrite)
    inherit: function (dst,src) {
      for(var i in src) {
        if (typeof dst[i] == 'object' && typeof src[i] == 'object')
          inherit(dst[i],src[i]);
        else if (typeof dst[i] == 'undefined')
          dst[i]=src[i];
      }
      return dst;
    },
    isArray:function (o) {
      if (o==_ || o ==null) return false;
      else return typeof o == "array" || (typeof o == "object" && o.constructor === Array);
    },
    isMatrix:function (o) {
      if (o==_ || o ==null) return false;
      else return obj.isArray(o) &&
                  obj.isArray(o[0]);
    },
    isEmpty: function (o) {
      for(var prop in o) {
         if (o[prop]!=undefined) return false;
      }
      return true;  
    },
    isFunction: function (o) {
        return typeof o == "function";
    },
    isObj:function (o) {
        return typeof o == "object";
    },
    isObject:function (o) {
        return typeof o == "object";
    },
    isRegex: function (o) {
        return o instanceof RegExp;
    },
    isString: function (o) {
        return typeof o == "string" || (typeof o == "object" && o.constructor === String);
    },
    isNumber: function (o) {
        return typeof o == "number" || (typeof o == "object" && o.constructor === Number);
    },


    iter: function(obj,fun) {
      var p;
      for(p in obj) {
        fun(obj[p],p)
      }
    }
};

/** ARRAY
 *
 */
var array = {
    /** Evaluate a function returning a boolean value for each member of the array and
     *  compute the boolean conjunction.
     *
     * @param {* []} array
     * @param {function(*,number)} fun
     */
    and: function(array,fun) {
        var res=true;
        var i=0;
        var len=array.length;
        for(i=0;i<len;i++) {
            var element=array[i];
            res=res&&fun(element,i)
        }
        return res;
    },
    /** Append one element at the end of the array.
     *
     * @param {* []} array
     * @param {*} element
     * @returns {* []}
     */
    append : function(array,element) {
        array.push(element);
        return array;
    },
    /**
     *
     * @param {* []} array
     * @param {function(*,number)} fun
     */
    call: function(array,args) {
        var i=0;
        var len=array.length;
        for(i=0;i<len;i++) {
            var element=array[i];
            element()
        }
    },
    /** Check for an elenment in the array by using a check function.
     *
     * @param array
     * @param fun
     * @returns {boolean}
     */
    check: function(array,fun) {
        var i,exist;
        exist=false;
        loop: for(i in array) {
            var element=array[i];
            if (fun(element,i)) {
                exist=true;
                break loop;
            }
        }
        return exist;
    },
    /** Append array2 at the end of array inplace. The extended array is returned.
     *  Source array (1) will be modified.
     *
     * @param {*[]} array
     * @param {*[]} array2
     * @returns {*[]}
     */
    concat : function(array,array2) {
        for(var i in array2) {
            array.push(array2[i]);
        }
        return array;
    },
    /** Create the conjunction set of two arrays
     *
     */
    conjunction :function (set1,set2,fun) {
      return array.union(set1,set2,fun);
    },
    /**
     *
     * @param {*[]} array
     * @param {number|string|*|*[]} elements
     * @param {function} [fun] Optional equality test function
     * @returns {boolean}
     */
    contains : function(array,elements,fun) {
        var i = array.length;
        if (!fun) fun=function(o1,o2) {return o1===o2};
        if (obj.isArray(elements)) {
          while (i--) {
            var j = elements.length;
            while (j--) {
              if (fun(array[i],elements[j])) {
                  return true;
              }          
            }
          }
        }
        else while (i--) {
            if (fun(array[i],elements)) {
                return true;
            }
        }
        return false;
    },
    /** Return a fresh copy of the source array or copy src array to dst.
     *
     * @param array
     * @returns {Array.<T>|string|Blob|ArrayBuffer}
     */
    copy: function(src,dst) {
        var i;
        if (dst) {
          for(i in src) dst[i]=src[i];  
        } else return src.slice();
    },
    /** Create a new array with initial element values.
     *
     * @param length
     * @param init
     * @returns {Array}
     */
    create : function(length,init) {
        var arr = [], i = length;
        while (i--) {
          arr[i] = init;
        }
        return arr;
    },
    /** Create a matrix (array of array) with initial element values.
     *
     */
    create_matrix : function(rows,cols,init) {
        var m = [];
        var r = [];
        var i,j;
        for (i = 0; i < rows; i++) {
            r=[];
            for(j=0;j<cols;j++) r.push(init);
            m.push(r);
        }
        return m;
    },
    /** Create the (inclusive) disjunction set of two arrays.
     *  Source arrays will not be modified.
     *
     */
    disjunction :function (set1,set2,fun) {
      return array.merge(set1,set2);
    },
    /**
     *
     * @param array
     * @returns {boolean}
     */
    empty : function (array) {
      return (array==undefined ||
              array.length==0)
    },
    
    /** Test for equality
    */
    equal: function (a1,a2) {
      if (a1.length != a2.length) return false;
      for(var i in a1) if (a1[i]!=a2[i]) return false;
      return true;
    },
    
    /** Create the (exclusive) disjunction set of two arrays. 
     *  Source arrays will not be modified.
     *
     */
    exclusive :function (set1,set2,fun) {
        var i,j,found,res = [];
        for (i in set1) {
          found=false;
          loop1: for (j in set2) {
            if (fun != undefined && fun(set1[i],set2[j])) {found=true; break loop1;}
            else if (fun == undefined && set1[i]==set2[j]) {found=true; break loop1;};
          }
          if (!found) res.push(set1[i]);
        }
        for (i in set2) {
          found=false;
          loop2: for (j in set1) {
            if (fun != undefined && fun(set2[i],set1[j])) {found=true; break loop2;}
            else if (fun == undefined && set2[i]==set1[j]) {found=true; break loop2;};
          }
          if (!found) res.push(set2[i]);
        }
        return res;
    },
    /** Find an element in an array and return it (or none);
     *
     * @param array
     * @param fun
     * @returns {undefined|*}
     */
    find: function(array,fun) {
        var i;
        for(i in array) {
          if (fun(array[i],i)) return array[i];
        }
        return none;
    },
    /** Search and map an element of an array using a test&map function.
     *
     * @param array
     * @param {function(*,number):*} fun
     * @returns {undefined|*}
     */
    findmap: function(array,fun) {
        var i,found;
        for(i in array) {
          found=fun(array[i],i);
          if (found) return found;
        }
        return none;
    },
    /** Filter out elements using a test function.
     *
     * @param {* []} array
     * @param {function(*,number):boolean} fun
     * @returns {* []}
     */
    filter: function(array,fun) {
      if (array.filter) return array.filter(fun);
      else {
        var res=[],
            len=array.length,
            element,i;
        for(i=0;i<len;i++) {
            element=array[i];
            if (fun(element,i)) res.push(element);
        }
        return res;
      }
    },
    /** Filter out and map elements using a test&map function.
     *
     * @param {* []} array
     * @param {function(*,number):*|undefined} fun
     * @returns {* []}
     */
    filtermap: function(array,fun) {
        var res=[],
            len=array.length,
            element,mapped,i;
        for(i=0;i<len;i++) {
            element=array[i];
            mapped=fun(element,i);
            if (mapped!=undefined) res.push(mapped);
        }
        return res;
    },
    /** Flattens an array consting of arrays (and elements)
     *
     * @param array
     * @returns {Array}
     */
    flatten: function (array) {
        var res=[];
        var len=array.length;
        var i;
        for(i=0;i<len;i++) {
            var element=array[i];
            if (!obj.isArray(element)) res.push(element);
            else {
                var j;
                var len2=element.length;
                for(j=0;j<len2;j++) {
                    var element2=element[j];
                    res.push(element2);
                }
            }
        }
        return res;

    },
    /**
     *
     * @param array
     * @returns {*}
     */
    head : function(array) {
        return array[0];
    },
    /**
     *
     * @param length
     * @param fun
     * @returns {Array}
     */
    init : function(length,fun) {
        var arr = [], i = length;
        while (i--) {
          arr[i] = fun(i);
        }
        return arr;
    },
    /**
     *
     * @param {* []} array
     * @param {function(*,number)} fun
     */
    iter: function(array,fun) {
      /*
        var i=0;
        var len=array.length;
        for(i=0;i<len;i++) {
            fun(array[i],i)
        }
      */
      array.forEach(fun);
    },
    /**
     *
     * @param {* []} array1
     * @param {* []} array2
     * @param {function(*,*,number)} fun
     */
    iter2: function(array1,array2,fun) {
        var i=0;
        assert((array1.length == array2.length)||('Array.iter2: arrays of different lengths'));
        /*
        var len=array1.length;
        for(i=0;i<len;i++) {
            fun(array1[i],array2[i],i)
        }
        */
        array1.forEach(function (e1,i) { fun(e1,array2[i],i) });
    },
    /**
     *
     * @param {* []} array
     * @param {function(*,number)} fun Returning a true value leaves iteration loop
     */
    iter_break: function(array,fun) {
        var i=0;
        var len=array.length;
        for(i=0;i<len;i++) {
            var element=array[i];
            if (fun(element,i)) return;
        }
    },
    /**
     *
     * @param {* []} array
     * @param {function(*,number)} fun
     */
    iter_rev: function(array,fun) {
        var i;
        var len=array.length;
        for(i=len-1;i>=0;i--) {
            fun(array[i],i)
        }
    },
    /** Return last element of array.
     *
     */
    last : function(array) {
      var len=array.length;
      if (len==0) return none;
      else return array[len-1];
    },
    
    length : function(array) {
        return array.length;
    },
    /**
     *
     * @param {* []} array1
     * @param {* []} array2
     * @param {function(*,*,number)} fun
     * @returns {* []}
     */
    map2: function(array1,array2,fun) {
        var i=0;
        assert((array1.length == array2.length)||('Array.map2: arrays of different lengths'));
        var len=array1.length;
        var res=[];
        for(i=0;i<len;i++) {
            res.push(fun(array1[i],array2[i],i));
        }
        return res;
    },
    /**
     *
     * @param {* []} array
     * @param {function(*,number)} fun
     * @returns {* []}
     */
    map: function(array,fun) {
        var i=0;
        var len=array.length;
        var res=[];
        for(i=0;i<len;i++) {
            var element=array[i];
            res.push(fun(element,i));
        }
        return res;
    },
    /**
     *
     * @param {* []} array
     * @param {Function} fun_hdtl  - function(hd,tl)
     * @param {Function} [fun_empty] - function()
     */
    match: function(array,fun_hdtl,fun_empty) {
        if (array.length == 0) {
            if (fun_empty) fun_empty();
        } else if (array.length>1) {
            var hd = this.head(array);
            var tl = this.tail(array);
            fun_hdtl(hd,tl);
        } else fun_hdtl(this.head(array),[]);
    },
    /**
     *
     * @param {* []} array
     * @param {Function} fun_hd1hd2  - function(hd1,hd2)
     * @param {Function} [fun_hdtl]  - function(hd,tl)
     * @param {Function} [fun_empty] - function()
     */
    match2: function(array,fun_hd1hd2,fun_hdtl,fun_empty) {
        if (array.length == 0 && fun_empty)
            fun_empty();
        else if (array.length == 2) {
            var hd1 = this.head(array);
            var hd2 = this.second(array);
            fun_hd1hd2(hd1,hd2);
        }
        else if (array.length>1 && fun_hdtl) {
            var hd = this.head(array);
            var tl = this.tail(array);
            fun_hdtl(hd,tl);
        } else if (fun_hdtl) fun_hdtl(this.head(array),[]);
    },
    /** Return the maximum element of an array applying
     *  an optional mapping function.
     *
     * @param {* []} array
     * @param [fun]
     * @returns {number|undefined}
     */
    max : function (array,fun) {        
        var res,max,num;
        for(var i in array) {
            if (fun) num=fun(array[i],i); else num=array[i];
            if (max==undefined) { max=num; res=array[i] } 
            else if (num > max) { max=num; res=array[i] }
        }
        return res;
    },
    /** Return the minimum element of an array applying
     *  an optional mapping function.
     *
     * @param {* []} array
     * @param [fun]
     * @returns {number|undefined}
     */
    min : function (array,fun) {        
        var res,min,num;
        for(var i in array) {
            if (fun) num=fun(array[i],i); else num=array[i];
            if (min==undefined) { min=num; res=array[i] }
            else if (num < min) { min=num; res=array[i] }
        }
        return res;
    },
    /** Check for an element in the array.
     *
     * @param {(number|string|boolean) []} array
     * @param {number|string|boolean} element
     * @returns {boolean}
     */
    member: function(array,element) {
        var i,exist;
        var len=array.length;
        exist=false;
        loop: for(i=0;i<len;i++) {
            var _element=array[i];
            if (_element==element) {
                exist=true;
                break loop;
            }
        }
        return exist;
    },
    /** Merge all arrays and return a new array.
     *
     * @param {Array} array1
     * @param {Array} array2
     * @param {Array} [array3]
     * @param {Array} [array4]
     * @returns {Array}
     */
    merge: function(array1,array2,array3,array4) {
        var arraynew=array1.slice();
        arraynew=arraynew.concat(array2);
        if (array3!=undefined) arraynew=arraynew.concat(array3);
        if (array4!=undefined) arraynew=arraynew.concat(array4);
        return arraynew;
    },
    /** Return the next element from array after val (next element after last is first!)
     * @param {Array} array
     * @param {number|string} val
     * @returns {number|string}
     */
    next: function(array,val) {
        var i;
        var len=array.length;
        if (obj.isString(val))
          for(i=0;i<len;i++) {
            if (string.equal(array[i],val)) {
              if (i==len-1) return array[0];
              else return array[i+1];
            }
          }
        else
          for(i=0;i<len;i++) {
            if (array[i]==val) {
              if (i==len-1) return array[0];
              else return array[i+1];
            }
          }
          
        return none;
    },
    /** Evaluate a function returning a boolean value for each member of the array and
     *  compute the boolean disjunction.
     *
     * @param {* []} array
     * @param {function(*,number)} fun
     */
    or: function(array,fun) {
        var res=false;
        var i=0;
        var len=array.length;
        for(i=0;i<len;i++) {
            var element=array[i];
            res=res||fun(element,i)
        }
        return res;
    },
    
   /**
     * Gets the property value of `key` from all elements in `collection`.
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * pluck(users, 'user');
     * // => ['barney', 'fred']
     */
    pluck: function(collection, key) {
      return collection.map(function(object) {
          return object == null ? undefined : object[key];
        });
    },
    /*
     ** Push/pop head elements (Stack behaviour)
     */
    /** Remove and return top element of array.
     *
     * @param array
     * @returns {*}
     */
    pop : function(array) {
        var element=array[0];
        array.shift();
        return element;
    },
    print: function(array) {
        var i;
        var len=array.length;
        var str='[';
        for(i=0;i<len;i++) {
            var cell=array[i];
            str=str+cell;
        }
        return str+']';
    },
    /** Add new element at top of array.
     *
     * @param array
     * @param element
     */
    push : function(array,element) {
        array.unshift(element);
    },
    /** Create an ordered array of numbers {a,a+1,..b}
     *
     * @param a
     * @param b
     * @returns {Array}
     */
    range : function(a,b) {
        var i;
        var array=[];
        for(i=a;i<=b;i++) array.push(i);
        return array;
    },
    /** Remove elements from an array.
     *  [1,2,3,4,5,6] (begin=2,end=4) => [1,2,6]
     * @param {* []} array
     * @returns {* []}
     */
    remove: function(array,begin,end) {
      var i,a;
      if (end==undefined) end=begin+1;
      if (begin<0 || end >= array.length) return [];
      a=array.slice(0,begin);
      for(i=end;i<array.length;i++) a.push(array[i]);
      return a;
    },
    
    second : function(array) {
        return array[1];
    },
    /**
     *
     * @param {* []} array
     * @param {function(*,*):number} fun   (1:a gt. b by the ordering criterion,-1: a lt. b, 0: a eq. b)
     * @returns {* []}
     */
    sort: function(array,fun) {
        var array2=array.slice();
        array2.sort(fun);
        return array2;
    },
    /** Split an array at position 'pos', i.e., remove 'len' (1) elements starting at 
     *  position 'pos'.
     *  ==> use remove!!! split should return two arrays!!
     *
     * @param array
     * @param pos
     * @param [len]
     * @param element
     */    
    split: function(array,pos,len) {
      if (pos==0) return array.slice((len||1));
      else {
        var a1=array.slice(0,pos);
        var a2=array.slice(pos+(len||1));
        return a1.concat(a2);
      }
    },
    /** Return the sum number of an array applying
     *  an optional mapping function.
     *
     * @param {* []} array
     * @param [fun]
     * @returns {number|undefined}
     */
    sum : function (array,fun) {        
        var res=0;
        for(var i in array) {
            var num=0;
            if (fun) num=fun(array[i]); else num=array[i];
            if (!obj.isNumber(num)) return undefined;
            res += num;
        }
        return res;
    },
    /** Return a new array w/o the head element (or optional 
     *  w/o the first top elements).
     *
     */
    tail : function(array,top) {
        var array2=array.slice();
        array2.shift();
        if (top) for(;top>1;top--) array2.shift();
        return array2;
    },
    /** Return union of two sets (== conjunction set)
     *
     * @param {* []} set1 
     * @param {* []} set2
     * @param {function} [fun]  Equality test
     * @returns {* []}
     */
    union : function(set1,set2,fun) {
        var i,j,res = [];
        for (i in set1) {
          for (j in set2) {
            if (fun != undefined && fun(set1[i],set2[j])) res.push(set1[i]);
            else if (fun == undefined && set1[i]==set2[j]) res.push(set1[i]);
          }
        }
        return res;
    },
    
    /**
     * Creates a duplicate-free version of an array
     */
    unique: function(array) {
      var length = array ? array.length : 0;
      function baseUniq(array) {
        var index = -1,
            length = array.length,
            seen,
            result = [];

        seen = result;
        outer:
        while (++index < length) {
          var value = array[index];
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        return result;
      }
      if (!length) {
        return [];
      }
      return baseUniq(array);
    },
    
    /**
     * Creates an array excluding all provided values
     * without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    without: function () {
      var array,
          values=[];
      for(var i in arguments) {
        if (i==0) array=arguments[0];
        else values.push(arguments[i]);
      }
      return array.filter(function (e) {
        return values.indexOf(e) == -1;
      });
    },
    /** Test for zero elements {0, '', false, undefined, ..}
    */
    zero: function (array) {
      for(var i in array) if (!!array[i]) return false;
      return true;
    },
};

/** STRING
 *
 */
var string = {
    /** Is pattern conatined in template?
     *
     */
    contains: function (template,pattern) {
      return template.indexOf(pattern)>-1;
    },
    copy: function(src) {
        var i;
        var dst='';
        for(i=0;i<src.length;i++) dst=dst+src.charAt(i);
        return dst;
    },
    /**
     *
     * @param {number} size
     * @returns {string} filled with spaces
     */
    create: function(size)
    {
        var i;
        var s='';
        var init=' ';
        for(i=0;i<size;i++) s=s+init;
        return s;
    },
    endsWith : function (str,tail) {
        return str.indexOf(tail)==(str.length-tail.length);
    },
    empty: function (str) {
      return this.equal(str,'');
    },
    equal:  function(str1,str2) {
        var i;
        var eq=true;
        if (str1.length != str2.length) return false;
        for(i=0;i<str1.length;i++) { if (string.get(str1,i)!=string.get(str2,i)) eq=false;}
        return eq;
    },
    find: function (search,str) {
        return str.indexOf(search);
    },
    format_hex: function (n,len) {
        // format a hexadecimal number with 'len' figures.
        switch (len) {
            case 2: return (((n>>4) & 0xf).toString(16))+
                            ((n&0xf).toString(16));
            case 4: return (((n>>12) & 0xf).toString(16)+
                            ((n>>8) & 0xf).toString(16)+
                            ((n>>4) & 0xf).toString(16)+
                            (n&0xf).toString(16));
            case 6: return (((n>>20) & 0xf).toString(16)+
                            ((n>>16) & 0xf).toString(16)+
                            ((n>>12) & 0xf).toString(16)+
                            ((n>>8) & 0xf).toString(16)+
                            ((n>>4) & 0xf).toString(16)+
                            (n&0xf).toString(16));
            case 8: return (((n>>28) & 0xf).toString(16)+
                            ((n>>24) & 0xf).toString(16)+
                            ((n>>20) & 0xf).toString(16)+
                            ((n>>16) & 0xf).toString(16)+
                            ((n>>12) & 0xf).toString(16)+
                            ((n>>8) & 0xf).toString(16)+
                            ((n>>4) & 0xf).toString(16)+
                            (n&0xf).toString(16));
            default: return 'format_hex??';
        }
    },
    /**
     *
     * @param {string} str
     * @param {number} index
     * @returns {string}
     */
    get: function (str,index) {
        assert((str != undefined && index < str.length && index >= 0)||('string.get ('+str.length+')'));
        return str.charAt(index);
    },
    isBoolean: function (str) {
        return (str=='true' || str=='false')
    },
    isNumeric: function (str) {
        return !isNaN(parseFloat(str)) && isFinite(str);
    },
    isText: function (s) {
      var is_text=true;
      string.iter(s,function (ch,i) {
        string.match(ch,[
          ['a','z',function () {}],
          ['A','Z',function () {}],
          ['0','9',function () {if (i==0) is_text=false;}],
          function () {is_text=false;}
        ]);
      });
      return is_text;
    },
    /**
     *
     * @param {string} str
     * @param {function(string,number)} fun
     */
    iter: function(str,fun) {
        var i;
        var len=str.length;
        for (i = 0; i < len; i++)  {
            var c = str.charAt(i);
            fun(c,i);
        }
    },
    /**
     *
     * @param str
     * @returns {*}
     */
    length: function(str) {
        if (str!=undefined) return str.length;
        else return 0;
    },
    /**
     *
     * @param str
     * @returns {string}
     */
    lowercase : function (str) {
        return str.toLowerCase();
    },
    /**
     *
     * @param {number} size
     * @param {string} init
     * @returns {string}
     */
    make: function(size,init)
    {
        var i;
        var s='';
        for(i=0;i<size;i++) s=s+init;
        return s;
    },
    /** Map a string with a set of (test,reuslt) transformation rules.
     * 
     * @param {string} str
     * @param {* [] []} case - ([string,string] | fun) []
     */
    map: function(str,mapping) {
        var i;
        var map;
        for(i in mapping) {
            map=mapping[i];
            if (obj.isFunction(map)) return map(str);
            else if (this.equal(str,map[0])) return map[1];
        }          
    },
    /** Match a string with different patterns and apply a matching function.
     *
     * @param {string} str
     * @param {* [] []} cases - ([string,fun] | [string [<case1>,<case2>,..],fun] | [<range1>:string,<range2>:string,fun] | fun) []
     */
    match: function(str,cases) {
        var i,j;
        var cas,cex,cv;
        for(i in cases) {
            cas=cases[i];
            if (obj.isArray(cas)) {
              switch (cas.length) {
                case 2:
                  // Multi-value-case
                  cex=cas[0];
                  if (!obj.isArray(cex)) {
                      if (this.equal(str,cex)) {
                          cas[1]();
                          return;
                      }
                  } else {
                      for(j in cex) {
                          cv=cex[j];
                          if (this.equal(str,cv)) {
                              cas[1]();
                              return;
                          }
                      }
                  }
                  break;
                case 3:
                  // Character range check
                  try {
                    j=pervasives.int_of_char(str);
                    if (j>= pervasives.int_of_char(cas[0]) && j<=pervasives.int_of_char(cas[1])) {
                      cas[2](str);
                      return;
                    }
                  } catch(e) {
                    return
                  };
                  break;
                case 1:
                  cas[0](str); // Default case - obsolete
                  return;
                default: 
                  throw 'String.match #args';
              }
            } else if (obj.isFunction(cas)) {
                // Default case
                cas(str);
                return;
            }
        }
    },
    /** Pad a string on the left (pre-str.length) if pre>0,
     *  right (post-str.length) if post>0, or centered (pre>0&post>0).
     *
     */
     
    pad: function (str,pre,post,char) {
      var len = str.length;
      if (pre>0 && post==0) return string.make(len-pre,char||' ')+str;
      else if (post>0 && pre==0) return str+string.make(post-len,char||' ');
      else return string.make(len-pre/2,char||' ')+str+string.make(len-post/2,char||' ');
    },
    /**
     *
     * @param str
     * @param pos
     * @param len
     * @returns {Number}
     */
    parse_hex: function (str,pos,len) {
        // parse a hexadecimal number in string 'str' starting at position 'pos' with 'len' figures.
        return parseInt(this.sub(str,pos,len),16);
    },
    /** Return the sub-string after a point in the source string ('.' or optional point string).
     * If there is no splitting point, the original string is returned.
     *
     * @param str
     * @param [point]
     * @returns {string}
     */
    postfix: function (str,point) {
      var n = str.indexOf(point||'.');
        if (n <= 0) return str;
        else return str.substr(n+1);
    },
    /** Return the sub-string before a point in the source string ('.' or optional point string)
     * If there is no splitting point, the original string is returned.
     *
     * @param str
     * @param [point]
     * @returns {string}
     */
    prefix: function (str,point) {
        var n = str.indexOf(point||'.');
        if (n <= 0) return str;
        else return str.substr(0,n);
    },
    replace_first: function (pat,repl,str) {
        return str.replace(pat,repl);
    },
    replace_all: function (pat,repl,str) {
        return str.replace('/'+pat+'/g',repl);
    },
    /**
     *
     * @param str
     * @param index
     * @param char
     * @returns {string}
     */
    set: function (str,index,char) {
        assert((str != undefined && index < str.length && index >= 0)||'string.get');
        return str.substr(0, index) + char + str.substr(index+1)
    },
    /**
     *
     * @param delim
     * @param str
     * @returns {*|Array}
     */
    split: function (delim,str) {
        return str.split(delim);
    },
    startsWith : function (str,head) {
        return !str.indexOf(head);
    },
    /** Return a sub-string.
     * 
     * @param str
     * @param off
     * @param [len] If not give, return a sub-string from off to end
     * @returns {string}
     */
    sub: function (str,off,len) {
        if (len)
            return str.substr(off,len);
        else
            return str.substr(off);
    },
    /** Remove leading and trailing characters from string
     *
     * @param str
     * @param {number} pref number of head characters to remove
     * @param {number} post number of tail characters to remove
     * @returns {*}
     */
    trim: function (str,pref,post) {
        if (str.length==0 ||
            pref>str.length ||
            post>str.length ||
            pref < 0 || post < 0 ||
            (pref==0 && post==0)
        ) return str;
        return str.substr(pref,str.length-pref-post);
    },
    /** Return a string with all characters converted to uppercase letters.
     *
     * @param str
     * @returns {string}
     */
    uppercase : function (str) {
        return str.toUpperCase();
    },
    /** Return a string with first character converted to uppercase letter.
     *
     * @param str
     * @returns {string}
     */
    Uppercase : function (str) {
        var len = str.length;
        if (len > 1) {
            var head = str.substr(0,1);
            var tail = str.substr(1,len-1);
            return head.toUpperCase()+tail.toLowerCase()
        } if (len==1) return str.toUpperCase();
        else return '';
    }
};

/** RANDOM
 *
 */
var rnd = Math.random;
/* Antti Syk�ri's algorithm adapted from Wikipedia MWC
** Returns a random generator function [0.0,1.0| with seed initialization
*/
var seeder = function(s) {
    var m_w  = s;
    var m_z  = 987654321;
    var mask = 0xffffffff;

    return function() {
      m_z = (36969 * (m_z & 65535) + (m_z >> 16)) & mask;
      m_w = (18000 * (m_w & 65535) + (m_w >> 16)) & mask;

      var result = ((m_z << 16) + m_w) & mask;
      result /= 4294967296;

      return result + 0.5;
    }
}
 
var random = {
    float: function(max) {
        return rnd()*max
    }, 
    int: function(max) {
        return Math.floor(rnd()*max+0)
    },
    // integer
    interval: function(min,max) {
        return Math.round(min+rnd()*(max-min))
    },
    // float
    range: function(min,max) {
        return min+rnd()*(max-min)
    },
    seed: function (s) {
      // Create a new initialized random generator
      rnd=seeder(s);
    }
};

/** PRINTF
 *
 */
var printf = {
    /** Trim string(s).
     *
     * @param str
     * @param indent
     * @param [width]
     * @param {string} [tab]
     * @returns {string}
     */
    align: function (str,indent,width,tab) {
        var lines = string.split('\n',str);
        var form = '';
        var sp = printf.spaces(indent);
        var spbreak = sp;

        array.iter(lines,function(line){
            var rest;
            function breakit(spbreak,str) {
                if (width < (str.length + spbreak.length)) {
                    return spbreak+string.sub(str,0,width-spbreak.length)+'\n'+
                           breakit(spbreak,string.sub(str,width-spbreak.length,str.length-width+spbreak.length));
                } else return spbreak+str+'\n';
            }
            if (width && width < (line.length + indent)) {
                if (tab) {
                    var pos = string.find(tab,line);
                    if (pos > 0 && pos < width) spbreak=printf.spaces(pos+indent+1);
                    else spbreak=sp;
                }
                form=form+sp+string.sub(line,0,width-indent)+'\n';
                rest=string.sub(line,width-indent,line.length-width+indent);
                form=form+breakit(spbreak,rest);
            }
            else
                form=form+sp+line+'\n';
        });
        return form;
    },
    /** Format a list of array elements using the (optional) mapping
     *  function <fun> and the separator <sep> (optional, too, default is ',').
     * 
     */
    list: function (array,fun,sep) {
      var i, str='';
      if (sep==undefined) sep=',';
      if (fun==undefined) fun=function (s) {return s;};
      if (!obj.isArray(array)) array=[array];
      for (i in array) {
        if (str==='') str=fun(array[i]);
        else str=str+sep+fun(array[i]);
      }
      return str;
    },
    /**
     *
     * @param n
     * @returns {string}
     */
    spaces: function (n){
        return string.make(n,' ');
    },
    /** Formatted printer (simplified)
     *
     * @param {* []} args (['%format',arg]|string) []  format=%s,%d,%f,%c,%x,%#d,%#s,..
     * @returns {string}
     */
    sprintf2: function(args) {
        var str='';
        array.iter(args,function(fmtarg) {
            var len, n,fs;
            if (obj.isArray(fmtarg)) {
                if (fmtarg.length==2) {
                    var fmt=fmtarg[0];
                    var arg=fmtarg[1];
                    var fc='';
                    var fn=0;
                    string.iter(fmt,function(c) {
                        if (c=='s' || c=='d' || c=='f' || c=='x') {
                            fc=c;
                        } else if (c!='%') {
                            fn=fn*10;
                            n=parseInt(c);
                            if (!isNaN(n)) fn=fn+n;
                        }
                    });
                    if (fc=='s' && obj.isString(arg)) {
                        str=str+arg;
                        if (fn!=0) {
                            len=arg.length;
                            if (len<fn) str=str+string.create(fn-len);
                        }
                    } else if (fc=='d' && obj.isNumber(arg)) {
                        fs = pervasives.string_of_int(arg);
                        if (fn!=0) {
                            len = fs.length;
                            if (len < fn) {
                                str=str+string.create(fn-len);
                            }
                        }
                        str=str+fs;
                    } else if (fc=='x' && obj.isNumber(arg)) {
                        fs = string.format_hex(arg,fn||8);
                        str=str+fs;
                    }
                }
            } else if (obj.isString(fmtarg)) {
                str = str + fmtarg;
            }
        });
        return str;
    },
    sprintf:Sprintf.sprintf
};

/** FILENAME
 *
 */
var filename = {
    /**
     *
     * @param path
     * @returns {string}
     */
    basename : function (path) {
        return Path.basename(path);
    },
    /**
     *
     * @param path
     * @returns {string}
     */
    dirname : function (path) {
        return Path.dirname(path);
    },
    /**
     *
     * @param path
     * @returns {string}
     */
    extname : function (path) {
        return Path.extname(path)
    },
    /**
     *
     * @param path
     * @returns {boolean}
     */
    is_relative: function(path) {
        return !(path.length > 0 && path[0] == '/');
    },
    /**
     *
     * @param pathl
     * @param absolute
     * @returns {string}
     */
    join: function (pathl,absolute) {
        var path=(absolute?'/':'');
        array.iter(pathl,function (name,index) {
            if (index>0) {
                path=path+'/'+name;
            }
            else {
                path=path+name;
            }
        });
        return path;
    },
    /**
     *
     * @param path
     * @returns {string}
     */
    normalize : function (path) {
        return Path.normalize(path)
    },
    /**
     *
     * @param path
     * @returns {*}
     */
    path_absolute: function (path) {
        if (this.is_relative(path)) {
            var workdir = Io.workdir();
            return this.path_normalize(workdir + '/' + path);
        } else return this.path_normalize(path);
    },
    /** Duplicate of Path.normalize!?
     *
     * @param path
     * @returns {string}
     */
    path_normalize: function (path) {
        var i;
        if (string.equal(path, '')) path = '/';
        var relpath = !(string.get(path, 0) == '/');
        var pathlist = path.split('/');
        var pathlist2 = pathlist.filter(function (s) {
            return (!string.equal(s, '') && !string.equal(s, '.'))
        });
        var pathlist3 = [];
        array.iter(pathlist2, function (pe) {
            if (!string.equal(pe, '..')) {
                array.push(pathlist3, pe)
            } else {
                if (pathlist3.length == 0) return '';
                else
                    pathlist3 = array.tail(pathlist3);
            }
        });
        var path2 = '';
        i = 0;
        array.iter(pathlist3, function (pe) {
            var sep;
            if (i == 0) sep = ''; else sep = '/';
            path2 = pe + sep + path2;
            i++;
        });
        if (relpath) return path2; else return '/' + path2;
    },
    removeext: function (path) {
      return path.substr(0, path.lastIndexOf('.'));
    }
};

/** PERVASIVES
 *
 *
 */
var pervasives = {
    assert:assert,
    char_of_int: function (i) {return String.fromCharCode(i)},
    div: function(a,b) {return a/b|0;},
    failwith: function(msg) {Io.err(msg);},
    float_of_string: function(s) {var num=parseFloat(s); if (isNaN(num)) throw 'NaN'; else return num;},
    int_of_char: function(c) {return c.charCodeAt()},
    int_of_float: function(f) {return f|0;},
    int_of_string: function(s) {      
      var num=parseInt(s); if (isNaN(num)) throw 'NaN'; else return num;
    },

    /** Try to find a value in a search list and return a mapping value.
     *
     * @param {*} value
     * @param {* []} mapping [testval,mapval] []
     * @returns {*}
     */
    map: function(value,mapping) {
        function eq(v1,v2) {
            if (v1==v2) return true;
            if (obj.isString(v1) && obj.isString(v2)) return string.equal(v1,v2);
            return false;
        }
        if (!array.empty(mapping)) {
          var hd=array.head(mapping);
          var tl=array.tail(mapping);
          if (eq(hd[0],value)) return hd[1];
          else return pervasives.map(value,tl);
        }  else return undefined;
    },
    /** Apply a matcher function to a list of cases with case handler functions.
     * A case is matched if the matcher function returns a value/object.
     *
     * The result of the matcher function is passed as an argument ot the case handler function.
     * The return value of the case handler fucntion is finally returned by this match function
     * or undefined if there was no matching case.
     *
     * @param {function(*,*):*} matcher function(expr,pat)
     * @param {*} expr
     * @param {*[]} cases (pattern,handler function | handler function) []
     * @returns {*|undefined}
     */
    match: function (matcher,expr,cases) {
        var ret = undefined;
        array.iter_break(cases, function (match) {
            var quit, succ, pat, fun;

            if (match.length == 2) {
                /*
                 ** Pattern, Function
                 */
                pat = match[0];
                fun = match[1];
                succ = matcher(expr, pat);
                if (succ) ret = fun(succ);
                quit = succ!=undefined;
            } else if (match.length == 1) {
                /*
                 ** Default case, Function
                 */
                fun = match[0];
                ret = fun();
                quit= true;
            }
            return quit;
        });
        return ret;
    },
    mtime: function () {var time = new Date(); return time.getTime();},
    min: function(a,b) { return (a<b)?a:b},
    max: function(a,b) { return (a>b)?a:b},
    string_of_float: function(f) {return f.toString()},
    string_of_int: function(i) {return i.toString()},
    string_of_int64: function(i) {return i.toString()},
    time: function () {var time = new Date(); return (time.getTime()/1000)|0;}
};

/** BIT
 *
 */
var bit = {
    get: function (v,b) {return (v >> b) && 1;},
    isSet: function (v,b) {return ((v >> b) && 1)==1;},
    set: function (v,b) {return v & (1 << b);}
};

/** ARGS
 *
 */
var args = {
    /** Parse process or command line arguments (array argv). The first offset [1] arguments are
     ** ignored. The numarg pattern '*' consumes all remaining arguments.
     *
     * @param {string []} argv
     * @param {*[]} map  [<argname>,<numargs:0..3|'*'>,<handler(up to 3 arguments|[])>]|[<defhandler(val)>] []
     * @param {number} [offset]
     */
    parse: function(argv,map,offset) {
        var shift=undefined,
            in_shift=0,
            shift_args=[],
            names,
            mapfun,
            numarg,
            len=argv.length;

        if (offset==undefined) offset=1;

        argv.forEach(function (val, index) {
            var last=index==(len-1);
            if(index>=offset) {
                if (in_shift==0) {
                    array.check(map,function (onemap) {
                        assert(onemap!=undefined||'map');
                        if (onemap.length==3) {
                            names  = onemap[0];
                            numarg = onemap[1];
                            mapfun = onemap[2];
                            if (!obj.isArray(names)) names=[names];
                            var found = array.find(names,function (name) {
                                if (string.equal(val, name)) return name; else _;
                            });
                            if (found) {
                                if (numarg==0) mapfun(found);
                                else {
                                    in_shift=numarg;
                                    shift_args=[];
                                    shift=mapfun;
                                }
                                return true;
                            }
                        } else if (obj.isFunction(onemap)) {
                          onemap(val);
                          return true;                        
                        } else if (onemap.length==1) {
                            mapfun = onemap[0];
                            mapfun(val);
                            return true;
                        }
                        return false;
                    });
                } else {
                    shift_args.push(val);
                    if (in_shift!='*') in_shift--;
                    if (in_shift==0 && shift!=undefined) {
                        numarg=shift_args.length;
                        switch (numarg) {
                            case 0: shift(val);break;
                            case 1: shift(shift_args[0],val); break;
                            case 2: shift(shift_args[0],shift_args[1],val); break;
                            case 3: shift(shift_args[0],shift_args[1],shift_args[2],val); break;
                            default: break;
                        }
                        shift=undefined;
                    } else if (in_shift=='*' && last) shift(shift_args);
                }
            }
        });
    }

};

/** HASHTBL
 *
 */
var hashtbl = {
    add: function(hash,key,data) {
        hash[key]=data;
    },
    create: function(initial) {
        return [];
    },
    empty: function(hash) {
        for (var key in hash) return false;
        return true;
    },
    find: function(hash,key) {
        return hash[key];
    },
    invalidate: function(hash,key) {
        hash[key]=undefined;
    },
    iter: function(hash,fun) {
        for (var key in hash) {
            if (hash[key]!=undefined) fun(key,hash[key]);
        }
    },
    mem: function(hash,key) {
        return hash[key] != undefined;
    },
    remove: function(hash,key) {
        // TODO: check, its wrong!
        if (!hash.hasOwnProperty(key))
            return;
        if (isNaN(parseInt(key)) || !(hash instanceof Array))
            delete hash[key];
        else
            hash.splice(key, 1)
    }
};

var types = [];
/**
 * 
 * @param name
 * @returns {number}
 */
function register_type(name) {
    var typoff = 1000+types.length*1000;
    if (array.member(types,name)) throw('[COMP] register_type: type '+name+' exists already.');
    types.push(name);
    return typoff;
}

/**
 *
 * @typedef {{v1:*, v2:*, v3:*, v4:*, v5:*, v6:*, v7:*, v8:*, v9:*  }} tuple
 */
/**
 *
 * @typedef {{t:number, v1:*, v2:*, v3:*, v4:*, v5:*, v6:*, v7:*, v8:*, v9:*  }} tagged_tuple
 */

module.exports = {
    args:args,
    assert: assert,
    array:array,
    bit:bit,
    defineGetter : defineGetter,
    defineSetter : defineSetter,
    div:pervasives.div,
    filename:filename,
    hashtbl:hashtbl,
    inherit : inherit,
    inheritPrototype : inheritPrototype,
    instanceOf : instanceOf,
    isNodeJS: function () {
        return (typeof global !== "undefined" &&
                {}.toString.call(global) == '[object global]');
    },
    obj:obj,
    pervasives:pervasives,
    printf:printf,
    random:random,
    string:string,
    isArray: obj.isArray,
    isString: obj.isString,
    isNumber: obj.isNumber,

    register_type:register_type,
    /**
     *
     * @param tag
     * @param [val1]
     * @param [val2]
     * @param [val3]
     * @returns {(tagged_tuple)}
     */
    Tuple: function (tag,val1,val2,val3) {
        if(val3) return {t:tag,v1:val1,v2:val2,v3:val3};
        else if (val2) return {t:tag,v1:val1,v2:val2};
        else if (val1) return {t:tag,v1:val1};
        else return {t:tag};
    }
};
};
BundleModuleCode['x11/win/rtree']=function (module,exports,global,process){
'use strict';

module.exports = rtree;
module.exports.default = rtree;
var Comp = Require('com/compat');

var quickselect = Require('x11/win/quickselect');

function rtree(maxEntries, format) {
    if (!(this instanceof rtree)) return new rtree(maxEntries, format);

    // max entries in a node is 9 by default; min node fill is 40% for best performance
    this._maxEntries = Math.max(4, maxEntries || 9);
    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));

    if (format) {
        this._initFormat(format);
    }

    this.clear();
}

rtree.prototype = {

    all: function () {
        return this._all(this.data, []);
    },

    clear: function () {
        this.data = createNode([]);
        return this;
    },

    collides: function (bbox) {

        var node = this.data,
            toBBox = this.toBBox;

        if (!intersects(bbox, node)) return false;

        var nodesToSearch = [],
            i, len, child, childBBox;

        while (node) {
            for (i = 0, len = node.children.length; i < len; i++) {

                child = node.children[i];
                childBBox = node.leaf ? toBBox(child) : child;

                if (intersects(bbox, childBBox)) {
                    if (node.leaf || contains(bbox, childBBox)) return true;
                    nodesToSearch.push(child);
                }
            }
            node = nodesToSearch.pop();
        }

        return false;
    },
    
    load: function (data) {
        if (!(data && data.length)) return this;

        if (data.length < this._minEntries) {
            for (var i = 0, len = data.length; i < len; i++) {
                this.insert(data[i]);
            }
            return this;
        }

        // recursively build the tree with the given data from scratch using OMT algorithm
        var node = this._build(data.slice(), 0, data.length - 1, 0);

        if (!this.data.children.length) {
            // save as is if tree is empty
            this.data = node;

        } else if (this.data.height === node.height) {
            // split root if trees have the same height
            this._splitRoot(this.data, node);

        } else {
            if (this.data.height < node.height) {
                // swap trees if inserted one is bigger
                var tmpNode = this.data;
                this.data = node;
                node = tmpNode;
            }

            // insert the small tree into the large tree at appropriate level
            this._insert(node, this.data.height - node.height - 1, true);
        }

        return this;
    },

    insert: function (item) {
        if (item) this._insert(item, this.data.height - 1);
        return this;
    },

    print: function (node,indent) {
      if (!node) node=this.data;
      if (!indent) indent=0;
      var b=node,
          s='',
          sp=indent==0?'':Comp.printf.spaces(indent);
      s=sp+'['+b.x0+','+b.y0+':'+b.x1+','+b.y1+']'+
            (node.shape?' '+node.shape.id:''); 
      if (node.children) for(var i in node.children) {
        s+='\n';
        s+=this.print(node.children[i],indent+2);    
      }
      return s;
    },

    remove: function (item, equalsFn) {
        if (!item) return this;

        var node = this.data,
            bbox = this.toBBox(item),
            path = [],
            indexes = [],
            i, parent, index, goingUp;

        // depth-first iterative tree traversal
        while (node || path.length) {

            if (!node) { // go up
                node = path.pop();
                parent = path[path.length - 1];
                i = indexes.pop();
                goingUp = true;
            }

            if (node.leaf) { // check current node
                index = findItem(item, node.children, equalsFn);

                if (index !== -1) {
                    // item found, remove the item and condense tree upwards
                    node.children.splice(index, 1);
                    path.push(node);
                    this._condense(path);
                    return this;
                }
            }

            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down
                path.push(node);
                indexes.push(i);
                i = 0;
                parent = node;
                node = node.children[0];

            } else if (parent) { // go right
                i++;
                node = parent.children[i];
                goingUp = false;

            } else node = null; // nothing found
        }

        return this;
    },

    search: function (bbox) {

        var node = this.data,
            result = [],
            toBBox = this.toBBox;

        if (!intersects(bbox, node)) return result;

        var nodesToSearch = [],
            i, len, child, childBBox;

        while (node) {
            for (i = 0, len = node.children.length; i < len; i++) {

                child = node.children[i];
                childBBox = node.leaf ? toBBox(child) : child;

                if (intersects(bbox, childBBox)) {
                    if (node.leaf) result.push(child);
                    else if (contains(bbox, childBBox)) this._all(child, result);
                    else nodesToSearch.push(child);
                }
            }
            node = nodesToSearch.pop();
        }

        return result;
    },



    // HELPERS
    
    toBBox: function (item) { return item; },

    compareMinX: compareNodeMinX,
    compareMinY: compareNodeMinY,

    toJSON: function () { return this.data; },

    fromJSON: function (data) {
        this.data = data;
        return this;
    },

    BBoxGroup: function (nodes) {
      var bbox={x0:Number.MAX_VALUE,y0:Number.MAX_VALUE,x1:Number.MIN_VALUE,y1:Number.MIN_VALUE};
      for(var i in nodes) {
        var node=nodes[i];
        bbox.x0=Math.min(bbox.x0,node.x0);
        bbox.y0=Math.min(bbox.y0,node.y0);
        bbox.x1=Math.max(bbox.x1,node.x1);
        bbox.y1=Math.max(bbox.y1,node.y1);
      }
      return bbox;
    },

    equal : function (bbox1,bbox2) {
        return bbox1.x0 == bbox2.x0 && bbox1.x1 == bbox2.x1 &&
               bbox1.y0 == bbox2.y0 && bbox1.y1 == bbox2.y1;
    },
    
    overlap : function (bbox1,bbox2) {
      // If one rectangle is on left side of other, l1.x > r2.x || l2.x > r1.x
      if (bbox1.x0 > bbox2.x1 || bbox2.x0 > bbox1.x1)
        return false;
      // If one rectangle is above other, l1.y < r2.y || l2.y < r1.y
      if (bbox1.y0 > bbox2.y1 || bbox2.y0 > bbox1.y1)
        return false;
      return true;  
    },

    within : function (bbox1,bbox2) {
      return bbox1.x0 >= bbox2.x0 && bbox1.x1 <= bbox2.x1 &&
             bbox1.y0 >= bbox2.y0 && bbox1.y1 <= bbox2.y1;
    },

    // INTERNALS
    _all: function (node, result) {
        var nodesToSearch = [];
        while (node) {
            if (node.leaf) result.push.apply(result, node.children);
            else nodesToSearch.push.apply(nodesToSearch, node.children);

            node = nodesToSearch.pop();
        }
        return result;
    },

    _build: function (items, left, right, height) {

        var N = right - left + 1,
            M = this._maxEntries,
            node;

        if (N <= M) {
            // reached leaf level; return leaf
            node = createNode(items.slice(left, right + 1));
            calcBBox(node, this.toBBox);
            return node;
        }

        if (!height) {
            // target height of the bulk-loaded tree
            height = Math.ceil(Math.log(N) / Math.log(M));

            // target number of root entries to maximize storage utilization
            M = Math.ceil(N / Math.pow(M, height - 1));
        }

        node = createNode([]);
        node.leaf = false;
        node.height = height;

        // split the items into M mostly square tiles

        var N2 = Math.ceil(N / M),
            N1 = N2 * Math.ceil(Math.sqrt(M)),
            i, j, right2, right3;

        multiSelect(items, left, right, N1, this.compareMinX);

        for (i = left; i <= right; i += N1) {

            right2 = Math.min(i + N1 - 1, right);

            multiSelect(items, i, right2, N2, this.compareMinY);

            for (j = i; j <= right2; j += N2) {

                right3 = Math.min(j + N2 - 1, right2);

                // pack each entry recursively
                node.children.push(this._build(items, j, right3, height - 1));
            }
        }

        calcBBox(node, this.toBBox);

        return node;
    },

    _chooseSubtree: function (bbox, node, level, path) {

        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;

        while (true) {
            path.push(node);

            if (node.leaf || path.length - 1 === level) break;

            minArea = minEnlargement = Infinity;

            for (i = 0, len = node.children.length; i < len; i++) {
                child = node.children[i];
                area = bboxArea(child);
                enlargement = enlargedArea(bbox, child) - area;

                // choose entry with the least area enlargement
                if (enlargement < minEnlargement) {
                    minEnlargement = enlargement;
                    minArea = area < minArea ? area : minArea;
                    targetNode = child;

                } else if (enlargement === minEnlargement) {
                    // otherwise choose one with the smallest area
                    if (area < minArea) {
                        minArea = area;
                        targetNode = child;
                    }
                }
            }

            node = targetNode || node.children[0];
        }

        return node;
    },

    _insert: function (item, level, isNode) {

        var toBBox = this.toBBox,
            bbox = isNode ? item : toBBox(item),
            insertPath = [];

        // find the best node for accommodating the item, saving all nodes along the path too
        var node = this._chooseSubtree(bbox, this.data, level, insertPath);

        // put the item into the node
        node.children.push(item);
        extend(node, bbox);

        // split on node overflow; propagate upwards if necessary
        while (level >= 0) {
            if (insertPath[level].children.length > this._maxEntries) {
                this._split(insertPath, level);
                level--;
            } else break;
        }

        // adjust bboxes along the insertion path
        this._adjustParentBBoxes(bbox, insertPath, level);
    },

    // split overflowed node into two
    _split: function (insertPath, level) {

        var node = insertPath[level],
            M = node.children.length,
            m = this._minEntries;

        this._chooseSplitAxis(node, m, M);

        var splitIndex = this._chooseSplitIndex(node, m, M);

        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
        newNode.height = node.height;
        newNode.leaf = node.leaf;

        calcBBox(node, this.toBBox);
        calcBBox(newNode, this.toBBox);

        if (level) insertPath[level - 1].children.push(newNode);
        else this._splitRoot(node, newNode);
    },

    _splitRoot: function (node, newNode) {
        // split root node
        this.data = createNode([node, newNode]);
        this.data.height = node.height + 1;
        this.data.leaf = false;
        calcBBox(this.data, this.toBBox);
    },

    _chooseSplitIndex: function (node, m, M) {

        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;

        minOverlap = minArea = Infinity;

        for (i = m; i <= M - m; i++) {
            bbox1 = distBBox(node, 0, i, this.toBBox);
            bbox2 = distBBox(node, i, M, this.toBBox);

            overlap = intersectionArea(bbox1, bbox2);
            area = bboxArea(bbox1) + bboxArea(bbox2);

            // choose distribution with minimum overlap
            if (overlap < minOverlap) {
                minOverlap = overlap;
                index = i;

                minArea = area < minArea ? area : minArea;

            } else if (overlap === minOverlap) {
                // otherwise choose distribution with minimum area
                if (area < minArea) {
                    minArea = area;
                    index = i;
                }
            }
        }

        return index;
    },

    // sorts node children by the best axis for split
    _chooseSplitAxis: function (node, m, M) {

        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,
            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,
            xMargin = this._allDistMargin(node, m, M, compareMinX),
            yMargin = this._allDistMargin(node, m, M, compareMinY);

        // if total distributions margin value is minimal for x, sort by x0,
        // otherwise it's already sorted by y0
        if (xMargin < yMargin) node.children.sort(compareMinX);
    },

    // total margin of all possible split distributions where each node is at least m full
    _allDistMargin: function (node, m, M, compare) {

        node.children.sort(compare);

        var toBBox = this.toBBox,
            leftBBox = distBBox(node, 0, m, toBBox),
            rightBBox = distBBox(node, M - m, M, toBBox),
            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),
            i, child;

        for (i = m; i < M - m; i++) {
            child = node.children[i];
            extend(leftBBox, node.leaf ? toBBox(child) : child);
            margin += bboxMargin(leftBBox);
        }

        for (i = M - m - 1; i >= m; i--) {
            child = node.children[i];
            extend(rightBBox, node.leaf ? toBBox(child) : child);
            margin += bboxMargin(rightBBox);
        }

        return margin;
    },

    _adjustParentBBoxes: function (bbox, path, level) {
        // adjust bboxes along the given tree path
        for (var i = level; i >= 0; i--) {
            extend(path[i], bbox);
        }
    },

    _condense: function (path) {
        // go through the path, removing empty nodes and updating bboxes
        for (var i = path.length - 1, siblings; i >= 0; i--) {
            if (path[i].children.length === 0) {
                if (i > 0) {
                    siblings = path[i - 1].children;
                    siblings.splice(siblings.indexOf(path[i]), 1);

                } else this.clear();

            } else calcBBox(path[i], this.toBBox);
        }
    },

    _initFormat: function (format) {
        // data format (x0, y0, x1, y1 accessors)

        // uses eval-type function compilation instead of just accepting a toBBox function
        // because the algorithms are very sensitive to sorting functions performance,
        // so they should be dead simple and without inner calls

        var compareArr = ['return a', ' - b', ';'];

        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));
        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));

        this.toBBox = new Function('a',
            'return {x0: a' + format[0] +
            ', y0: a' + format[1] +
            ', x1: a' + format[2] +
            ', y1: a' + format[3] + '};');
    }
};

function findItem(item, items, equalsFn) {
    if (!equalsFn) return items.indexOf(item);

    for (var i = 0; i < items.length; i++) {
        if (equalsFn(item, items[i])) return i;
    }
    return -1;
}

// calculate node's bbox from bboxes of its children
function calcBBox(node, toBBox) {
    distBBox(node, 0, node.children.length, toBBox, node);
}

// min bounding rectangle of node children from k to p-1
function distBBox(node, k, p, toBBox, destNode) {
    if (!destNode) destNode = createNode(null);
    destNode.x0 = Infinity;
    destNode.y0 = Infinity;
    destNode.x1 = -Infinity;
    destNode.y1 = -Infinity;

    for (var i = k, child; i < p; i++) {
        child = node.children[i];
        extend(destNode, node.leaf ? toBBox(child) : child);
    }

    return destNode;
}

function extend(a, b) {
    a.x0 = Math.min(a.x0, b.x0);
    a.y0 = Math.min(a.y0, b.y0);
    a.x1 = Math.max(a.x1, b.x1);
    a.y1 = Math.max(a.y1, b.y1);
    return a;
}

function compareNodeMinX(a, b) { return a.x0 - b.x0; }
function compareNodeMinY(a, b) { return a.y0 - b.y0; }

function bboxArea(a)   { return (a.x1 - a.x0) * (a.y1 - a.y0); }
function bboxMargin(a) { return (a.x1 - a.x0) + (a.y1 - a.y0); }

function enlargedArea(a, b) {
    return (Math.max(b.x1, a.x1) - Math.min(b.x0, a.x0)) *
           (Math.max(b.y1, a.y1) - Math.min(b.y0, a.y0));
}

function intersectionArea(a, b) {
    var x0 = Math.max(a.x0, b.x0),
        y0 = Math.max(a.y0, b.y0),
        x1 = Math.min(a.x1, b.x1),
        y1 = Math.min(a.y1, b.y1);

    return Math.max(0, x1 - x0) *
           Math.max(0, y1 - y0);
}

function contains(a, b) {
    return a.x0 <= b.x0 &&
           a.y0 <= b.y0 &&
           b.x1 <= a.x1 &&
           b.y1 <= a.y1;
}

function intersects(a, b) {
    return b.x0 <= a.x1 &&
           b.y0 <= a.y1 &&
           b.x1 >= a.x0 &&
           b.y1 >= a.y0;
}

function createNode(children) {
    return {
        children: children,
        height: 1,
        leaf: true,
        x0: Infinity,
        y0: Infinity,
        x1: -Infinity,
        y1: -Infinity
    };
}

// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
// combines selection algorithm with binary divide & conquer approach

function multiSelect(arr, left, right, n, compare) {
    var stack = [left, right],
        mid;

    while (stack.length) {
        right = stack.pop();
        left = stack.pop();

        if (right - left <= n) continue;

        mid = left + Math.ceil((right - left) / n / 2) * n;
        quickselect(arr, mid, left, right, compare);

        stack.push(left, mid, mid, right);
    }
}
};
BundleModuleCode['x11/win/quickselect']=function (module,exports,global,process){
'use strict';

module.exports = quickselect;
module.exports.default = quickselect;

function quickselect(arr, k, left, right, compare) {
    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);
};

function quickselectStep(arr, k, left, right, compare) {

    while (right > left) {
        if (right - left > 600) {
            var n = right - left + 1;
            var m = k - left + 1;
            var z = Math.log(n);
            var s = 0.5 * Math.exp(2 * z / 3);
            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
            quickselectStep(arr, k, newLeft, newRight, compare);
        }

        var t = arr[k];
        var i = left;
        var j = right;

        swap(arr, left, k);
        if (compare(arr[right], t) > 0) swap(arr, left, right);

        while (i < j) {
            swap(arr, i, j);
            i++;
            j--;
            while (compare(arr[i], t) < 0) i++;
            while (compare(arr[j], t) > 0) j--;
        }

        if (compare(arr[left], t) === 0) swap(arr, left, j);
        else {
            j++;
            swap(arr, j, right);
        }

        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
    }
}

function swap(arr, i, j) {
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}

function defaultCompare(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}
};

var Base64=Require('os/base64');
module.exports = Require('plugins/x11/x11.js');
if (typeof window != 'undefined') for(var p in module.exports) window[p]=module.exports[p];
return module.exports;
